!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
ABSOLUTE	vpr_types.h	/^{ ABSOLUTE, FRACTIONAL };$/;"	e	enum:e_Fc_type
ABS_DIFF	mst.c	7;"	d	file:
ABS_DIFF	place_stats.c	7;"	d	file:
ALLOW_SWITCH_OFF	rr_graph2.c	10;"	d	file:
ALL_NETS	draw.c	/^{ ALL_NETS, HIGHLIGHTED };$/;"	e	enum:e_draw_net_type	file:
AUTO_SCHED	vpr_types.h	/^{ AUTO_SCHED, USER_SCHED };	\/* Annealing schedule *\/$/;"	e	enum:sched_type
ArchFile	ReadOptions.h	/^    char *ArchFile;$/;"	m	struct:s_options	access:public
Aspect	xml_arch.h	/^    float Aspect;$/;"	m	struct:s_clb_grid	access:public
BISQUE	graphics.h	/^  CYAN, RED, DARKGREEN, MAGENTA, BISQUE, LIGHTBLUE, THISTLE, PLUM, KHAKI, $/;"	e	enum:color_types
BI_DIRECTION	vpr_types.h	/^    BI_DIRECTION = 2$/;"	e	enum:e_direction
BI_DIRECTIONAL	vpr_types.h	/^{ UNI_DIRECTIONAL, BI_DIRECTIONAL };	\/* UDSD by AY *\/$/;"	e	enum:e_directionality
BLACK	graphics.h	/^{ WHITE, BLACK, DARKGREY, LIGHTGREY, BLUE, GREEN, YELLOW,$/;"	e	enum:color_types
BLOCK_COUNT	timing_place_lookup.c	47;"	d	file:
BLUE	graphics.h	/^{ WHITE, BLACK, DARKGREY, LIGHTGREY, BLUE, GREEN, YELLOW,$/;"	e	enum:color_types
BOTTOM	vpr_types.h	/^{ TOP = 0, RIGHT = 1, BOTTOM = 2, LEFT = 3 };$/;"	e	enum:e_side
BOUNDARY	vpr_types.h	/^{ BOUNDARY = 0, FILL, COL_REPEAT, COL_REL };$/;"	e	enum:e_grid_loc_type
BOUNDING_BOX_PLACE	vpr_types.h	/^{ BOUNDING_BOX_PLACE, NET_TIMING_DRIVEN_PLACE,$/;"	e	enum:e_place_algorithm
BREADTH_FIRST	vpr_types.h	/^{ BREADTH_FIRST, TIMING_DRIVEN, DIRECTED_SEARCH };$/;"	e	enum:e_router_algorithm
BUFSIZE	util.h	29;"	d
BUF_AND_PTRANS_FLAG	check_rr_graph.c	12;"	d	file:
BUF_FLAG	check_rr_graph.c	10;"	d	file:
BUTTON_TEXT_LEN	graphics.c	92;"	d	file:
C	vpr_types.h	/^    float C;$/;"	m	struct:s_rr_node	access:public
CHANX	vpr_types.h	/^{ SOURCE, SINK, IPIN, OPIN, CHANX, CHANY, NUM_RR_TYPES }$/;"	e	enum:e_rr_type
CHANX_COST_INDEX_START	vpr_types.h	/^    IPIN_COST_INDEX, CHANX_COST_INDEX_START$/;"	e	enum:e_cost_indices
CHANY	vpr_types.h	/^{ SOURCE, SINK, IPIN, OPIN, CHANX, CHANY, NUM_RR_TYPES }$/;"	e	enum:e_rr_type
CHECK	place.c	/^{ NORMAL, CHECK };$/;"	e	enum:cost_methods	file:
CHECK_RAND	util.c	837;"	d	file:
CHUNK_SIZE	util.c	218;"	d	file:
COL_REL	vpr_types.h	/^{ BOUNDARY = 0, FILL, COL_REPEAT, COL_REL };$/;"	e	enum:e_grid_loc_type
COL_REPEAT	vpr_types.h	/^{ BOUNDARY = 0, FILL, COL_REPEAT, COL_REL };$/;"	e	enum:e_grid_loc_type
CONSTANT_GEN_SOURCE	path_delay2.h	/^    CONSTANT_GEN_SOURCE$/;"	e	enum:__anon8
CORAL	graphics.h	/^  CORAL, TURQUOISE, MEDIUMPURPLE, DARKSLATEBLUE, DARKKHAKI, NUM_COLOR$/;"	e	enum:color_types
CYAN	graphics.h	/^  CYAN, RED, DARKGREEN, MAGENTA, BISQUE, LIGHTBLUE, THISTLE, PLUM, KHAKI, $/;"	e	enum:color_types
C_downstream	net_delay.c	/^    float C_downstream;$/;"	m	struct:s_rc_node	file:	access:public
C_downstream	route_tree_timing.h	/^    float C_downstream;$/;"	m	struct:s_rt_node	access:public
C_ipin_cblock	vpr_types.h	/^    float C_ipin_cblock;$/;"	m	struct:s_timing_inf	access:public
C_ipin_cblock	xml_arch.h	/^     float C_ipin_cblock;$/;"	m	struct:s_arch	access:public
C_load	vpr_types.h	/^    float C_load;$/;"	m	struct:s_rr_indexed_data	access:public
Chans	xml_arch.h	/^    t_chan_width_dist Chans;$/;"	m	struct:s_arch	access:public
CheckArch	CheckArch.c	/^CheckArch(IN t_arch Arch,$/;"	f	signature:(IN t_arch Arch, IN boolean TimingEnabled)
CheckArch	SetupVPR.h	/^void CheckArch(IN t_arch Arch,$/;"	p	signature:(IN t_arch Arch, IN boolean TimingEnabled)
CheckElement	xml_arch.c	/^CheckElement(IN ezxml_t Node,$/;"	f	file:	signature:(IN ezxml_t Node, IN const char *Name)
CheckElement	xml_arch.c	/^static void CheckElement(IN ezxml_t Node,$/;"	p	file:	signature:(IN ezxml_t Node, IN const char *Name)
CheckGrid	SetupVPR.c	/^CheckGrid()$/;"	f	file:
CheckGrid	SetupVPR.c	/^static void CheckGrid(void);$/;"	p	file:	signature:(void)
CheckOptions	CheckOptions.c	/^CheckOptions(IN t_options Options,$/;"	f	signature:(IN t_options Options, IN boolean TimingEnabled)
CheckOptions	SetupVPR.h	/^void CheckOptions(IN t_options Options,$/;"	p	signature:(IN t_options Options, IN boolean TimingEnabled)
CheckSegments	CheckArch.c	/^static void CheckSegments(IN t_arch Arch) {$/;"	f	file:	signature:(IN t_arch Arch)
CheckSegments	CheckArch.c	/^static void CheckSegments(IN t_arch Arch);$/;"	p	file:	signature:(IN t_arch Arch)
CheckSetup	CheckSetup.c	/^CheckSetup(IN enum e_operation Operation,$/;"	f	signature:(IN enum e_operation Operation, IN struct s_placer_opts PlacerOpts, IN struct s_annealing_sched AnnealSched, IN struct s_router_opts RouterOpts, IN struct s_det_routing_arch RoutingArch, IN t_segment_inf * Segments, IN t_timing_inf Timing, IN t_subblock_data Subblocks, IN t_chan_width_dist Chans)
CheckSetup	SetupVPR.h	/^void CheckSetup(IN enum e_operation Operation,$/;"	p	signature:(IN enum e_operation Operation, IN struct s_placer_opts PlacerOpts, IN struct s_annealing_sched AnnealSched, IN struct s_router_opts RouterOpts, IN struct s_det_routing_arch RoutingArch, IN t_segment_inf * Segments, IN t_timing_inf Timing, IN t_subblock_data Subblocks, IN t_chan_width_dist Chans)
CheckSwitches	CheckArch.c	/^CheckSwitches(IN t_arch Arch,$/;"	f	file:	signature:(IN t_arch Arch, IN boolean TimingEnabled)
CheckSwitches	CheckArch.c	/^static void CheckSwitches(IN t_arch Arch,$/;"	p	file:	signature:(IN t_arch Arch, IN boolean TimingEnabled)
CheckText	xml_arch.c	/^static void CheckText(IN ezxml_t Node);$/;"	p	file:	signature:(IN ezxml_t Node)
Cin	vpr_types.h	/^    float Cin;$/;"	m	struct:s_switch_inf	access:public
Cmetal	vpr_types.h	/^    float Cmetal;$/;"	m	struct:s_seg_details	access:public
Cmetal	vpr_types.h	/^    float Cmetal;$/;"	m	struct:s_segment_inf	access:public
Count	ReadOptions.h	/^    int Count[OT_BASE_UNKNOWN];$/;"	m	struct:s_options	access:public
CountChildren	xml_arch.c	/^CountChildren(IN ezxml_t Node,$/;"	f	file:	signature:(IN ezxml_t Node, IN const char *Name)
CountChildren	xml_arch.c	/^static int CountChildren(IN ezxml_t Node,$/;"	p	file:	signature:(IN ezxml_t Node, IN const char *Name)
CountTokens	ReadLine.c	/^CountTokens(IN char **Tokens)$/;"	f	signature:(IN char **Tokens)
CountTokens	ReadLine.h	/^int CountTokens(IN char **Tokens);$/;"	p	signature:(IN char **Tokens)
CountTokensInString	xml_arch.c	/^CountTokensInString(IN const char *Str,$/;"	f	file:	signature:(IN const char *Str, OUT int *Num, OUT int *Len)
CountTokensInString	xml_arch.c	/^static void CountTokensInString(IN const char *Str,$/;"	p	file:	signature:(IN const char *Str, OUT int *Num, OUT int *Len)
Cout	vpr_types.h	/^    float Cout;$/;"	m	struct:s_switch_inf	access:public
DARKGREEN	graphics.h	/^  CYAN, RED, DARKGREEN, MAGENTA, BISQUE, LIGHTBLUE, THISTLE, PLUM, KHAKI, $/;"	e	enum:color_types
DARKGREY	graphics.h	/^{ WHITE, BLACK, DARKGREY, LIGHTGREY, BLUE, GREEN, YELLOW,$/;"	e	enum:color_types
DARKKHAKI	graphics.h	/^  CORAL, TURQUOISE, MEDIUMPURPLE, DARKSLATEBLUE, DARKKHAKI, NUM_COLOR$/;"	e	enum:color_types
DARKSLATEBLUE	graphics.h	/^  CORAL, TURQUOISE, MEDIUMPURPLE, DARKSLATEBLUE, DARKKHAKI, NUM_COLOR$/;"	e	enum:color_types
DASHED	graphics.h	/^{ SOLID, DASHED };$/;"	e	enum:line_types
DEBUG	vpr_types.h	2;"	d
DEBUG_TIMING_PLACE_LOOKUP	timing_place_lookup.c	56;"	d	file:
DEC_DIRECTION	vpr_types.h	/^    DEC_DIRECTION = 1,$/;"	e	enum:e_direction
DELAY_NORMALIZED	vpr_types.h	/^{ INTRINSIC_DELAY, DELAY_NORMALIZED, DEMAND_ONLY };$/;"	e	enum:e_base_cost_type
DELTA	vpr_types.h	/^{ UNIFORM, GAUSSIAN, PULSE, DELTA };$/;"	e	enum:e_stat
DEMAND_ONLY	vpr_types.h	/^{ INTRINSIC_DELAY, DELAY_NORMALIZED, DEMAND_ONLY };$/;"	e	enum:e_base_cost_type
DETAILED	vpr_types.h	/^{ GLOBAL, DETAILED };$/;"	e	enum:e_route_type
DIRECTED_SEARCH	vpr_types.h	/^{ BREADTH_FIRST, TIMING_DRIVEN, DIRECTED_SEARCH };$/;"	e	enum:e_router_algorithm
DRAW_ALL_BUT_BUFFERS_RR	draw.c	/^    DRAW_ALL_BUT_BUFFERS_RR,$/;"	e	enum:e_draw_rr_toggle	file:
DRAW_ALL_RR	draw.c	/^    DRAW_ALL_RR,$/;"	e	enum:e_draw_rr_toggle	file:
DRAW_NODES_AND_SBOX_RR	draw.c	/^    DRAW_NODES_AND_SBOX_RR,$/;"	e	enum:e_draw_rr_toggle	file:
DRAW_NODES_RR	draw.c	/^    DRAW_NODES_RR,$/;"	e	enum:e_draw_rr_toggle	file:
DRAW_NO_RR	draw.c	/^    DRAW_NO_RR = 0,$/;"	e	enum:e_draw_rr_toggle	file:
DRAW_RR_TOGGLE_MAX	draw.c	/^    DRAW_RR_TOGGLE_MAX$/;"	e	enum:e_draw_rr_toggle	file:
DRIVER	vpr_types.h	/^{ OPEN = -1, DRIVER = 0, RECEIVER = 1 };$/;"	e	enum:e_pin_type
DUMPFILE	timing_place_lookup.c	58;"	d	file:
EMPTY	vpr_types.h	43;"	d
EMPTY_TYPE	main.c	/^t_type_ptr EMPTY_TYPE = NULL;$/;"	v
EMPTY_TYPE_BACKUP	timing_place_lookup.c	/^static t_type_ptr EMPTY_TYPE_BACKUP;$/;"	v	file:
EMPTY_TYPE_INDEX	xml_arch.c	12;"	d	file:
ENABLE_REVERSE	rr_graph2.c	15;"	d	file:
ERROR_TOL	place.c	37;"	d	file:
ERROR_TOL	route_timing.c	766;"	d	file:
ERRTAG	util.h	26;"	d
EZXML_BUFSIZE	ezxml.h	38;"	d
EZXML_DUP	ezxml.h	41;"	d
EZXML_ERRL	ezxml.c	65;"	d	file:
EZXML_NAMEM	ezxml.h	39;"	d
EZXML_NIL	ezxml.c	/^char *EZXML_NIL[] = { NULL };	\/* empty, null terminated array of strings *\/$/;"	v
EZXML_NOMMAP	ezxml.c	30;"	d	file:
EZXML_TXTM	ezxml.h	40;"	d
EZXML_WS	ezxml.c	64;"	d	file:
EchoArch	xml_arch.c	/^EchoArch(IN const char *EchoFile,$/;"	f	signature:(IN const char *EchoFile, IN const t_type_descriptor * Types, IN int NumTypes)
EchoArch	xml_arch.h	/^void EchoArch(IN const char *EchoFile,$/;"	p	signature:(IN const char *EchoFile, IN const t_type_descriptor * Types, IN int NumTypes)
Enum	vpr_types.h	/^    int Enum;$/;"	m	struct:s_TokenPair	access:public
Error	ReadOptions.c	/^Error(IN const char *Token)$/;"	f	file:	signature:(IN const char *Token)
Error	ReadOptions.c	/^static void Error(IN const char *Token);$/;"	p	file:	signature:(IN const char *Token)
ErrorOption	ReadOptions.c	/^ErrorOption(IN const char *Option)$/;"	f	file:	signature:(IN const char *Option)
ErrorOption	ReadOptions.c	/^static void ErrorOption(IN const char *Option);$/;"	p	file:	signature:(IN const char *Option)
FALSE	util.h	/^{ FALSE, TRUE }$/;"	e	enum:__anon11
FB_IPIN	path_delay2.h	/^    FB_IPIN, FB_OPIN, SUBBLK_IPIN, SUBBLK_OPIN, FF_SINK, FF_SOURCE,$/;"	e	enum:__anon8
FB_OPIN	path_delay2.h	/^    FB_IPIN, FB_OPIN, SUBBLK_IPIN, SUBBLK_OPIN, FF_SINK, FF_SOURCE,$/;"	e	enum:__anon8
FC_ABS	xml_arch.c	/^{ FC_ABS, FC_FRAC, FC_FULL };$/;"	e	enum:Fc_type	file:
FC_FRAC	xml_arch.c	/^{ FC_ABS, FC_FRAC, FC_FULL };$/;"	e	enum:Fc_type	file:
FC_FULL	xml_arch.c	/^{ FC_ABS, FC_FRAC, FC_FULL };$/;"	e	enum:Fc_type	file:
FF_SINK	path_delay2.h	/^    FB_IPIN, FB_OPIN, SUBBLK_IPIN, SUBBLK_OPIN, FF_SINK, FF_SOURCE,$/;"	e	enum:__anon8
FF_SOURCE	path_delay2.h	/^    FB_IPIN, FB_OPIN, SUBBLK_IPIN, SUBBLK_OPIN, FF_SINK, FF_SOURCE,$/;"	e	enum:__anon8
FILL	vpr_types.h	/^{ BOUNDARY = 0, FILL, COL_REPEAT, COL_REL };$/;"	e	enum:e_grid_loc_type
FILL_TYPE	main.c	/^t_type_ptr FILL_TYPE = NULL;$/;"	v
FILL_TYPE_BACKUP	timing_place_lookup.c	/^static t_type_ptr FILL_TYPE_BACKUP;$/;"	v	file:
FRACTIONAL	vpr_types.h	/^{ ABSOLUTE, FRACTIONAL };$/;"	e	enum:e_Fc_type
FRAGMENT_THRESHOLD	util.c	219;"	d	file:
FREE	vpr_types.h	/^{ FREE, RANDOM, USER };$/;"	e	enum:e_pad_loc_type
FROM	place.c	33;"	d	file:
FROM_AND_TO	place.c	35;"	d	file:
FROM_X_TO_Y	draw.c	/^{ FROM_X_TO_Y, FROM_Y_TO_X };	\/* Chanx to chany or vice versa? *\/$/;"	e	enum:e_edge_dir	file:
FROM_Y_TO_X	draw.c	/^{ FROM_X_TO_Y, FROM_Y_TO_X };	\/* Chanx to chany or vice versa? *\/$/;"	e	enum:e_edge_dir	file:
FULL	vpr_types.h	/^{ SUBSET, WILTON, UNIVERSAL, FULL };	\/* UDSD Modifications by WMF *\/$/;"	e	enum:e_switch_block_type
Fc_in	vpr_types.h	/^    float Fc_in;$/;"	m	struct:s_type_descriptor	access:public
Fc_out	vpr_types.h	/^    float Fc_out;$/;"	m	struct:s_type_descriptor	access:public
Fc_type	xml_arch.c	/^    enum Fc_type$/;"	g	file:
FindElement	xml_arch.c	/^FindElement(IN ezxml_t Parent,$/;"	f	file:	signature:(IN ezxml_t Parent, IN const char *Name, IN boolean Required)
FindElement	xml_arch.c	/^static ezxml_t FindElement(IN ezxml_t Parent,$/;"	p	file:	signature:(IN ezxml_t Parent, IN const char *Name, IN boolean Required)
FindProperty	xml_arch.c	/^FindProperty(IN ezxml_t Parent,$/;"	f	file:	signature:(IN ezxml_t Parent, IN const char *Name, IN boolean Required)
FindProperty	xml_arch.c	/^static const char *FindProperty(IN ezxml_t Parent,$/;"	p	file:	signature:(IN ezxml_t Parent, IN const char *Name, IN boolean Required)
FreeNode	xml_arch.c	/^FreeNode(INOUT ezxml_t Node)$/;"	f	file:	signature:(INOUT ezxml_t Node)
FreeNode	xml_arch.c	/^static void FreeNode(INOUT ezxml_t Node);$/;"	p	file:	signature:(INOUT ezxml_t Node)
FreeTokens	ReadLine.c	/^FreeTokens(INOUT char ***TokensPtr)$/;"	f	signature:(INOUT char ***TokensPtr)
FreeTokens	ReadLine.h	/^void FreeTokens(INOUT char ***TokensPtr);$/;"	p	signature:(INOUT char ***TokensPtr)
Fs	vpr_types.h	/^    int Fs;$/;"	m	struct:s_det_routing_arch	access:public
Fs	xml_arch.h	/^     int Fs;$/;"	m	struct:s_arch	access:public
Fs_seed	main.c	/^int Fs_seed = -1;$/;"	v
GAUSSIAN	vpr_types.h	/^{ UNIFORM, GAUSSIAN, PULSE, DELTA };$/;"	e	enum:e_stat
GLOBAL	vpr_types.h	/^{ GLOBAL, DETAILED };$/;"	e	enum:e_route_type
GRAPH_BIDIR	rr_graph.h	/^    GRAPH_BIDIR,		\/* Detailed bidirectional graph *\/$/;"	e	enum:e_graph_type
GRAPH_GLOBAL	rr_graph.h	/^    GRAPH_GLOBAL,		\/* One node per channel with wire capacity > 1 and full connectivity *\/$/;"	e	enum:e_graph_type
GRAPH_UNIDIR	rr_graph.h	/^    GRAPH_UNIDIR,		\/* Detailed unidir graph, untilable *\/$/;"	e	enum:e_graph_type
GRAPH_UNIDIR_TILEABLE	rr_graph.h	/^    GRAPH_UNIDIR_TILEABLE	\/* Detail unidir graph with wire groups multiples of 2*L *\/$/;"	e	enum:e_graph_type
GREEN	graphics.h	/^{ WHITE, BLACK, DARKGREY, LIGHTGREY, BLUE, GREEN, YELLOW,$/;"	e	enum:color_types
GetNodeTokens	xml_arch.c	/^GetNodeTokens(IN ezxml_t Node)$/;"	f	file:	signature:(IN ezxml_t Node)
GetNodeTokens	xml_arch.c	/^static char **GetNodeTokens(IN ezxml_t Node);$/;"	p	file:	signature:(IN ezxml_t Node)
GraphPause	ReadOptions.h	/^	int GraphPause;$/;"	m	struct:s_options	access:public
H	xml_arch.h	/^     int H;$/;"	m	struct:s_clb_grid	access:public
HASHSIZE	hash.c	6;"	d	file:
HIGHLIGHTED	draw.c	/^{ ALL_NETS, HIGHLIGHTED };$/;"	e	enum:e_draw_net_type	file:
HUGE_FLOAT	vpr_types.h	35;"	d
IA	util.c	834;"	d	file:
IC	util.c	835;"	d	file:
IM	util.c	836;"	d	file:
IMPOSSIBLE	timing_place_lookup.h	1;"	d
IN	util.h	21;"	d
INC_DIRECTION	vpr_types.h	/^    INC_DIRECTION = 0,$/;"	e	enum:e_direction
INFINITE	place_and_route.h	1;"	d
INOUT	util.h	23;"	d
INPAD	read_netlist.c	/^{ NORMAL = 0, INPAD, OUTPAD };$/;"	e	enum:special_blk	file:
INPAD_OPIN	path_delay2.h	/^{ INPAD_SOURCE, INPAD_OPIN, OUTPAD_IPIN, OUTPAD_SINK,$/;"	e	enum:__anon8
INPAD_SOURCE	path_delay2.h	/^{ INPAD_SOURCE, INPAD_OPIN, OUTPAD_IPIN, OUTPAD_SINK,$/;"	e	enum:__anon8
INTRINSIC_DELAY	vpr_types.h	/^{ INTRINSIC_DELAY, DELAY_NORMALIZED, DEMAND_ONLY };$/;"	e	enum:e_base_cost_type
IO_TYPE	main.c	/^t_type_ptr IO_TYPE = NULL;$/;"	v
IO_TYPE_BACKUP	timing_place_lookup.c	/^static t_type_ptr IO_TYPE_BACKUP;$/;"	v	file:
IO_TYPE_INDEX	xml_arch.c	13;"	d	file:
IPIN	vpr_types.h	/^{ SOURCE, SINK, IPIN, OPIN, CHANX, CHANY, NUM_RR_TYPES }$/;"	e	enum:e_rr_type
IPIN_COST_INDEX	vpr_types.h	/^    IPIN_COST_INDEX, CHANX_COST_INDEX_START$/;"	e	enum:e_cost_indices
InitArch	SetupVPR.c	/^InitArch(IN t_arch Arch)$/;"	f	file:	signature:(IN t_arch Arch)
InitArch	SetupVPR.c	/^static void InitArch(IN t_arch Arch);$/;"	p	file:	signature:(IN t_arch Arch)
IsAuto	xml_arch.h	/^    boolean IsAuto;$/;"	m	struct:s_clb_grid	access:public
IsTimingEnabled	SetupVPR.c	/^IsTimingEnabled(IN t_options Options)$/;"	f	signature:(IN t_options Options)
IsTimingEnabled	SetupVPR.h	/^boolean IsTimingEnabled(IN t_options Options);$/;"	p	signature:(IN t_options Options)
IsWhitespace	xml_arch.c	/^IsWhitespace(char c)$/;"	f	file:	signature:(char c)
IsWhitespace	xml_arch.c	/^static boolean IsWhitespace(char c);$/;"	p	file:	signature:(char c)
K	xml_arch.h	/^     int K;			\/* LUT size *\/$/;"	m	struct:s_arch	access:public
KHAKI	graphics.h	/^  CYAN, RED, DARKGREEN, MAGENTA, BISQUE, LIGHTBLUE, THISTLE, PLUM, KHAKI, $/;"	e	enum:color_types
LEFT	vpr_types.h	/^{ TOP = 0, RIGHT = 1, BOTTOM = 2, LEFT = 3 };$/;"	e	enum:e_side
LIGHTBLUE	graphics.h	/^  CYAN, RED, DARKGREEN, MAGENTA, BISQUE, LIGHTBLUE, THISTLE, PLUM, KHAKI, $/;"	e	enum:color_types
LIGHTGREY	graphics.h	/^{ WHITE, BLACK, DARKGREY, LIGHTGREY, BLUE, GREEN, YELLOW,$/;"	e	enum:color_types
LINEAR_CONG	vpr_types.h	/^{ LINEAR_CONG, NONLINEAR_CONG };$/;"	e	enum:place_c_types
LONGLINE	segment_stats.c	10;"	d	file:
MAGENTA	graphics.h	/^  CYAN, RED, DARKGREEN, MAGENTA, BISQUE, LIGHTBLUE, THISTLE, PLUM, KHAKI, $/;"	e	enum:color_types
MAJOR	vpr_types.h	33;"	d
MAXPIXEL	graphics.c	157;"	d	file:
MAXPTS	graphics.h	13;"	d
MAX_BLOCK_COLOURS	draw.c	14;"	d	file:
MAX_CHANNEL_WIDTH	vpr_types.h	40;"	d
MAX_FONT_SIZE	graphics.c	89;"	d	file:
MAX_LEN	place_stats.c	9;"	d	file:
MAX_MOVES_BEFORE_RECOMPUTE	place.c	38;"	d	file:
MAX_SHORT	vpr_types.h	41;"	d
MAX_X	place_stats.c	8;"	d	file:
MEDIUMPURPLE	graphics.h	/^  CORAL, TURQUOISE, MEDIUMPURPLE, DARKSLATEBLUE, DARKKHAKI, NUM_COLOR$/;"	e	enum:color_types
MINOR	vpr_types.h	32;"	d
MINPIXEL	graphics.c	158;"	d	file:
MULTI_BUFFERED	vpr_types.h	/^{ MULTI_BUFFERED, MULTI_MUXED, MULTI_MERGED, SINGLE };$/;"	e	enum:e_drivers
MULTI_MERGED	vpr_types.h	/^{ MULTI_BUFFERED, MULTI_MUXED, MULTI_MERGED, SINGLE };$/;"	e	enum:e_drivers
MULTI_MUXED	vpr_types.h	/^{ MULTI_BUFFERED, MULTI_MUXED, MULTI_MERGED, SINGLE };$/;"	e	enum:e_drivers
MUX_SIZE_DIST_DISPLAY	rr_graph.c	26;"	d	file:
MWIDTH	graphics.c	87;"	d	file:
N	xml_arch.h	/^    int N;			\/* Cluster size *\/$/;"	m	struct:s_arch	access:public
NCHUNK	route_common.c	1138;"	d	file:
NDEBUG	vpr_types.h	16;"	d
NET_COUNT	timing_place_lookup.c	36;"	d	file:
NET_TIMING_DRIVEN_PLACE	vpr_types.h	/^{ BOUNDING_BOX_PLACE, NET_TIMING_DRIVEN_PLACE,$/;"	e	enum:e_place_algorithm
NET_USED	timing_place_lookup.c	40;"	d	file:
NET_USED_SINK_BLOCK	timing_place_lookup.c	43;"	d	file:
NET_USED_SOURCE_BLOCK	timing_place_lookup.c	42;"	d	file:
NONLINEAR_CONG	vpr_types.h	/^{ LINEAR_CONG, NONLINEAR_CONG };$/;"	e	enum:place_c_types
NORMAL	place.c	/^{ NORMAL, CHECK };$/;"	e	enum:cost_methods	file:
NORMAL	read_netlist.c	/^{ NORMAL = 0, INPAD, OUTPAD };$/;"	e	enum:special_blk	file:
NOT_FOUND	place_and_route.h	2;"	d
NO_FIXED_CHANNEL_WIDTH	vpr_types.h	446;"	d
NO_GRAPHICS	vpr_types.h	15;"	d
NO_PICTURE	vpr_types.h	/^{ NO_PICTURE, PLACEMENT, ROUTING };	\/* What's on screen? *\/$/;"	e	enum:pic_type
NO_PREVIOUS	vpr_types.h	723;"	d
NO_ROUTE_THROUGHS	route_tree_timing.c	297;"	d	file:
NUM_COLOR	graphics.h	/^  CORAL, TURQUOISE, MEDIUMPURPLE, DARKSLATEBLUE, DARKKHAKI, NUM_COLOR$/;"	e	enum:color_types
NUM_RR_TYPES	vpr_types.h	/^{ SOURCE, SINK, IPIN, OPIN, CHANX, CHANY, NUM_RR_TYPES }$/;"	e	enum:e_rr_type
NUM_SUB_PIN_TYPES	path_delay.c	/^{ SUB_INPUT = 0, SUB_OUTPUT, SUB_CLOCK, NUM_SUB_PIN_TYPES };$/;"	e	enum:e_subblock_pin_type	file:
NUM_TYPES_USED	timing_place_lookup.c	54;"	d	file:
NetFile	ReadOptions.h	/^    char *NetFile;$/;"	m	struct:s_options	access:public
OFF	graphics.c	1133;"	d	file:
ON	graphics.c	1134;"	d	file:
OPEN	vpr_types.h	/^{ OPEN = -1, DRIVER = 0, RECEIVER = 1 };$/;"	e	enum:e_pin_type
OPIN	vpr_types.h	/^{ SOURCE, SINK, IPIN, OPIN, CHANX, CHANY, NUM_RR_TYPES }$/;"	e	enum:e_rr_type
OPIN_COST_INDEX	vpr_types.h	/^{ SOURCE_COST_INDEX = 0, SINK_COST_INDEX, OPIN_COST_INDEX,$/;"	e	enum:e_cost_indices
OT_ACC_FAC	OptionTokens.h	/^    OT_ACC_FAC,$/;"	e	enum:e_OptionBaseToken
OT_ALPHA_T	OptionTokens.h	/^    OT_ALPHA_T,$/;"	e	enum:e_OptionBaseToken
OT_ARG_UNKNOWN	OptionTokens.h	/^    OT_ARG_UNKNOWN		\/* Must be last since used for counting enum items *\/$/;"	e	enum:e_OptionArgToken
OT_ASTAR_FAC	OptionTokens.h	/^    OT_ASTAR_FAC,$/;"	e	enum:e_OptionBaseToken
OT_AUTO	OptionTokens.h	/^    OT_AUTO,$/;"	e	enum:e_OptionBaseToken
OT_BASE_COST_TYPE	OptionTokens.h	/^    OT_BASE_COST_TYPE,$/;"	e	enum:e_OptionBaseToken
OT_BASE_UNKNOWN	OptionTokens.h	/^    OT_BASE_UNKNOWN		\/* Must be last since used for counting enum items *\/$/;"	e	enum:e_OptionBaseToken
OT_BB_FACTOR	OptionTokens.h	/^    OT_BB_FACTOR,$/;"	e	enum:e_OptionBaseToken
OT_BEND_COST	OptionTokens.h	/^    OT_BEND_COST,$/;"	e	enum:e_OptionBaseToken
OT_BLOCK_DIST	OptionTokens.h	/^    OT_BLOCK_DIST,$/;"	e	enum:e_OptionBaseToken
OT_BOUNDING_BOX	OptionTokens.h	/^    OT_BOUNDING_BOX,$/;"	e	enum:e_OptionArgToken
OT_BREADTH_FIRST	OptionTokens.h	/^    OT_BREADTH_FIRST,$/;"	e	enum:e_OptionArgToken
OT_CRITICALITY_EXP	OptionTokens.h	/^    OT_CRITICALITY_EXP,$/;"	e	enum:e_OptionBaseToken
OT_DELAY_NORMALIZED	OptionTokens.h	/^	OT_DELAY_NORMALIZED,$/;"	e	enum:e_OptionArgToken
OT_DEMAND_ONLY	OptionTokens.h	/^	OT_DEMAND_ONLY,$/;"	e	enum:e_OptionArgToken
OT_DETAILED	OptionTokens.h	/^    OT_DETAILED,$/;"	e	enum:e_OptionArgToken
OT_DIRECTED_SEARCH	OptionTokens.h	/^    OT_DIRECTED_SEARCH,$/;"	e	enum:e_OptionArgToken
OT_ENABLE_TIMING_COMPUTATIONS	OptionTokens.h	/^    OT_ENABLE_TIMING_COMPUTATIONS,$/;"	e	enum:e_OptionBaseToken
OT_EXIT_T	OptionTokens.h	/^    OT_EXIT_T,$/;"	e	enum:e_OptionBaseToken
OT_FAST	OptionTokens.h	/^    OT_FAST,$/;"	e	enum:e_OptionBaseToken
OT_FIRST_ITER_PRES_FAC	OptionTokens.h	/^    OT_FIRST_ITER_PRES_FAC,$/;"	e	enum:e_OptionBaseToken
OT_FIX_PINS	OptionTokens.h	/^    OT_FIX_PINS,$/;"	e	enum:e_OptionBaseToken
OT_FULL_STATS	OptionTokens.h	/^    OT_FULL_STATS,$/;"	e	enum:e_OptionBaseToken
OT_GLOBAL	OptionTokens.h	/^    OT_GLOBAL,$/;"	e	enum:e_OptionArgToken
OT_INITIAL_PRES_FAC	OptionTokens.h	/^    OT_INITIAL_PRES_FAC,$/;"	e	enum:e_OptionBaseToken
OT_INIT_T	OptionTokens.h	/^    OT_INIT_T,$/;"	e	enum:e_OptionBaseToken
OT_INNER_LOOP_RECOMPUTE_DIVIDER	OptionTokens.h	/^    OT_INNER_LOOP_RECOMPUTE_DIVIDER,$/;"	e	enum:e_OptionBaseToken
OT_INNER_NUM	OptionTokens.h	/^    OT_INNER_NUM,$/;"	e	enum:e_OptionBaseToken
OT_INTRINSIC_DELAY	OptionTokens.h	/^	OT_INTRINSIC_DELAY,$/;"	e	enum:e_OptionArgToken
OT_LINEAR	OptionTokens.h	/^    OT_LINEAR,$/;"	e	enum:e_OptionArgToken
OT_MAX_CRITICALITY	OptionTokens.h	/^    OT_MAX_CRITICALITY,$/;"	e	enum:e_OptionBaseToken
OT_MAX_ROUTER_ITERATIONS	OptionTokens.h	/^    OT_MAX_ROUTER_ITERATIONS,$/;"	e	enum:e_OptionBaseToken
OT_NET_TIMING_DRIVEN	OptionTokens.h	/^    OT_NET_TIMING_DRIVEN,$/;"	e	enum:e_OptionArgToken
OT_NODISP	OptionTokens.h	/^    OT_NODISP,$/;"	e	enum:e_OptionBaseToken
OT_NONLINEAR	OptionTokens.h	/^    OT_NONLINEAR,$/;"	e	enum:e_OptionArgToken
OT_NUM_REGIONS	OptionTokens.h	/^    OT_NUM_REGIONS,$/;"	e	enum:e_OptionBaseToken
OT_OFF	OptionTokens.h	/^    OT_OFF,$/;"	e	enum:e_OptionArgToken
OT_ON	OptionTokens.h	/^    OT_ON,$/;"	e	enum:e_OptionArgToken
OT_OUTFILE_PREFIX	OptionTokens.h	/^    OT_OUTFILE_PREFIX,$/;"	e	enum:e_OptionBaseToken
OT_PATH_TIMING_DRIVEN	OptionTokens.h	/^    OT_PATH_TIMING_DRIVEN,$/;"	e	enum:e_OptionArgToken
OT_PLACE_ALGORITHM	OptionTokens.h	/^    OT_PLACE_ALGORITHM,$/;"	e	enum:e_OptionBaseToken
OT_PLACE_CHAN_WIDTH	OptionTokens.h	/^    OT_PLACE_CHAN_WIDTH,$/;"	e	enum:e_OptionBaseToken
OT_PLACE_COST_EXP	OptionTokens.h	/^    OT_PLACE_COST_EXP,$/;"	e	enum:e_OptionBaseToken
OT_PLACE_COST_TYPE	OptionTokens.h	/^    OT_PLACE_COST_TYPE,$/;"	e	enum:e_OptionBaseToken
OT_PLACE_ONLY	OptionTokens.h	/^    OT_PLACE_ONLY,$/;"	e	enum:e_OptionBaseToken
OT_PRES_FAC_MULT	OptionTokens.h	/^    OT_PRES_FAC_MULT,$/;"	e	enum:e_OptionBaseToken
OT_RANDOM	OptionTokens.h	/^    OT_RANDOM,$/;"	e	enum:e_OptionArgToken
OT_READ_PLACE_ONLY	OptionTokens.h	/^    OT_READ_PLACE_ONLY,$/;"	e	enum:e_OptionBaseToken
OT_RECOMPUTE_CRIT_ITER	OptionTokens.h	/^    OT_RECOMPUTE_CRIT_ITER,$/;"	e	enum:e_OptionBaseToken
OT_ROUTER_ALGORITHM	OptionTokens.h	/^    OT_ROUTER_ALGORITHM,$/;"	e	enum:e_OptionBaseToken
OT_ROUTE_CHAN_WIDTH	OptionTokens.h	/^    OT_ROUTE_CHAN_WIDTH,$/;"	e	enum:e_OptionBaseToken
OT_ROUTE_ONLY	OptionTokens.h	/^    OT_ROUTE_ONLY,$/;"	e	enum:e_OptionBaseToken
OT_ROUTE_TYPE	OptionTokens.h	/^    OT_ROUTE_TYPE,$/;"	e	enum:e_OptionBaseToken
OT_SEED	OptionTokens.h	/^    OT_SEED,$/;"	e	enum:e_OptionBaseToken
OT_TD_PLACE_EXP_FIRST	OptionTokens.h	/^    OT_TD_PLACE_EXP_FIRST,$/;"	e	enum:e_OptionBaseToken
OT_TD_PLACE_EXP_LAST	OptionTokens.h	/^    OT_TD_PLACE_EXP_LAST,$/;"	e	enum:e_OptionBaseToken
OT_TIMING_ANALYSIS	OptionTokens.h	/^    OT_TIMING_ANALYSIS,$/;"	e	enum:e_OptionBaseToken
OT_TIMING_ANALYZE_ONLY_WITH_NET_DELAY	OptionTokens.h	/^    OT_TIMING_ANALYZE_ONLY_WITH_NET_DELAY,$/;"	e	enum:e_OptionBaseToken
OT_TIMING_DRIVEN	OptionTokens.h	/^    OT_TIMING_DRIVEN,$/;"	e	enum:e_OptionArgToken
OT_TIMING_TRADEOFF	OptionTokens.h	/^    OT_TIMING_TRADEOFF,$/;"	e	enum:e_OptionBaseToken
OT_VERIFY_BINARY_SEARCH	OptionTokens.h	/^    OT_VERIFY_BINARY_SEARCH,$/;"	e	enum:e_OptionBaseToken
OUT	util.h	22;"	d
OUTPAD	read_netlist.c	/^{ NORMAL = 0, INPAD, OUTPAD };$/;"	e	enum:special_blk	file:
OUTPAD_IPIN	path_delay2.h	/^{ INPAD_SOURCE, INPAD_OPIN, OUTPAD_IPIN, OUTPAD_SINK,$/;"	e	enum:__anon8
OUTPAD_SINK	path_delay2.h	/^{ INPAD_SOURCE, INPAD_OPIN, OUTPAD_IPIN, OUTPAD_SINK,$/;"	e	enum:__anon8
OptionArgTokenList	OptionTokens.c	/^const struct s_TokenPair OptionArgTokenList[] = {$/;"	v	typeref:struct:s_TokenPair
OptionBaseTokenList	OptionTokens.c	/^const struct s_TokenPair OptionBaseTokenList[] = {$/;"	v	typeref:struct:s_TokenPair
OutFilePrefix	ReadOptions.h	/^    char *OutFilePrefix;$/;"	m	struct:s_options	access:public
OutFilePrefix	main.c	/^char *OutFilePrefix = NULL;$/;"	v
PATH_TIMING_DRIVEN_PLACE	vpr_types.h	/^    PATH_TIMING_DRIVEN_PLACE$/;"	e	enum:e_place_algorithm
PI	graphics.c	90;"	d	file:
PLACEMENT	vpr_types.h	/^{ NO_PICTURE, PLACEMENT, ROUTING };	\/* What's on screen? *\/$/;"	e	enum:pic_type
PLACE_ALWAYS	vpr_types.h	/^{ PLACE_NEVER, PLACE_ONCE, PLACE_ALWAYS };$/;"	e	enum:pfreq
PLACE_AND_ROUTE	vpr_types.h	/^{ PLACE_AND_ROUTE, PLACE_ONLY, ROUTE_ONLY,$/;"	e	enum:e_operation
PLACE_NEVER	vpr_types.h	/^{ PLACE_NEVER, PLACE_ONCE, PLACE_ALWAYS };$/;"	e	enum:pfreq
PLACE_ONCE	vpr_types.h	/^{ PLACE_NEVER, PLACE_ONCE, PLACE_ALWAYS };$/;"	e	enum:pfreq
PLACE_ONLY	vpr_types.h	/^{ PLACE_AND_ROUTE, PLACE_ONLY, ROUTE_ONLY,$/;"	e	enum:e_operation
PLUM	graphics.h	/^  CYAN, RED, DARKGREEN, MAGENTA, BISQUE, LIGHTBLUE, THISTLE, PLUM, KHAKI, $/;"	e	enum:color_types
POSTSCRIPT	graphics.h	2;"	d
PROC_TIME	place_and_route.h	6;"	d
PTRANS_FLAG	check_rr_graph.c	11;"	d	file:
PULSE	vpr_types.h	/^{ UNIFORM, GAUSSIAN, PULSE, DELTA };$/;"	e	enum:e_stat
ParseFc	xml_arch.c	/^ParseFc(ezxml_t Node,$/;"	f	file:	signature:(ezxml_t Node, enum Fc_type *Fc, float *Val)
ParseFc	xml_arch.c	/^static void ParseFc(ezxml_t Node,$/;"	p	file:	signature:(ezxml_t Node, enum Fc_type *Fc, float *Val)
PinFile	ReadOptions.h	/^    char *PinFile;$/;"	m	struct:s_options	access:public
PlaceAlgorithm	ReadOptions.h	/^    enum e_place_algorithm PlaceAlgorithm;$/;"	m	struct:s_options	typeref:enum:s_options::e_place_algorithm	access:public
PlaceAlphaT	ReadOptions.h	/^    float PlaceAlphaT;$/;"	m	struct:s_options	access:public
PlaceChanWidth	ReadOptions.h	/^    int PlaceChanWidth;$/;"	m	struct:s_options	access:public
PlaceCostType	ReadOptions.h	/^    enum place_c_types PlaceCostType;$/;"	m	struct:s_options	typeref:enum:s_options::place_c_types	access:public
PlaceExitT	ReadOptions.h	/^    float PlaceExitT;$/;"	m	struct:s_options	access:public
PlaceFile	ReadOptions.h	/^    char *PlaceFile;$/;"	m	struct:s_options	access:public
PlaceInitT	ReadOptions.h	/^    float PlaceInitT;$/;"	m	struct:s_options	access:public
PlaceInnerNum	ReadOptions.h	/^    float PlaceInnerNum;$/;"	m	struct:s_options	access:public
PlaceNonlinearRegions	ReadOptions.h	/^    int PlaceNonlinearRegions;$/;"	m	struct:s_options	access:public
PlaceTimingTradeoff	ReadOptions.h	/^	float PlaceTimingTradeoff;$/;"	m	struct:s_options	access:public
PrintTitle	main.c	/^PrintTitle()$/;"	f	file:
PrintTitle	main.c	/^static void PrintTitle();$/;"	p	file:
PrintUsage	main.c	/^PrintUsage()$/;"	f	file:
PrintUsage	main.c	/^static void PrintUsage();$/;"	p	file:
ProcessCB_SB	xml_arch.c	/^ProcessCB_SB(INOUT ezxml_t Node,$/;"	f	file:	signature:(INOUT ezxml_t Node, INOUT boolean * list, IN int len)
ProcessCB_SB	xml_arch.c	/^static void ProcessCB_SB(INOUT ezxml_t Node,$/;"	p	file:	signature:(INOUT ezxml_t Node, INOUT boolean * list, IN int len)
ProcessChanWidthDistr	xml_arch.c	/^ProcessChanWidthDistr(INOUT ezxml_t Node,$/;"	f	file:	signature:(INOUT ezxml_t Node, OUT struct s_arch *arch)
ProcessChanWidthDistr	xml_arch.c	/^static void ProcessChanWidthDistr(INOUT ezxml_t Node,$/;"	p	file:	signature:(INOUT ezxml_t Node, OUT struct s_arch *arch)
ProcessChanWidthDistrDir	xml_arch.c	/^ProcessChanWidthDistrDir(INOUT ezxml_t Node,$/;"	f	file:	signature:(INOUT ezxml_t Node, OUT t_chan * chan)
ProcessChanWidthDistrDir	xml_arch.c	/^static void ProcessChanWidthDistrDir(INOUT ezxml_t Node,$/;"	p	file:	signature:(INOUT ezxml_t Node, OUT t_chan * chan)
ProcessDevice	xml_arch.c	/^ProcessDevice(INOUT ezxml_t Node,$/;"	f	file:	signature:(INOUT ezxml_t Node, OUT struct s_arch *arch, IN boolean timing_enabled)
ProcessDevice	xml_arch.c	/^static void ProcessDevice(INOUT ezxml_t Node,$/;"	p	file:	signature:(INOUT ezxml_t Node, OUT struct s_arch *arch, IN boolean timing_enabled)
ProcessIO	xml_arch.c	/^ProcessIO(INOUT ezxml_t Node,$/;"	f	file:	signature:(INOUT ezxml_t Node, IN boolean timing_enabled)
ProcessIO	xml_arch.c	/^static void ProcessIO(INOUT ezxml_t Node,$/;"	p	file:	signature:(INOUT ezxml_t Node, IN boolean timing_enabled)
ProcessLayout	xml_arch.c	/^ProcessLayout(INOUT ezxml_t Node,$/;"	f	file:	signature:(INOUT ezxml_t Node, OUT struct s_arch *arch)
ProcessLayout	xml_arch.c	/^static void ProcessLayout(INOUT ezxml_t Node,$/;"	p	file:	signature:(INOUT ezxml_t Node, OUT struct s_arch *arch)
ProcessOption	ReadOptions.c	/^ProcessOption(IN const char *const *Args,$/;"	f	file:	signature:(IN const char *const *Args, INOUT t_options * Options)
ProcessOption	ReadOptions.c	/^static const char *const *ProcessOption(IN const char *const *Args,$/;"	p	file:	signature:(IN const char *const *Args, INOUT t_options * Options)
ProcessSegments	xml_arch.c	/^ProcessSegments(INOUT ezxml_t Parent,$/;"	f	file:	signature:(INOUT ezxml_t Parent, OUT struct s_segment_inf **Segs, OUT int *NumSegs, IN struct s_switch_inf *Switches, IN int NumSwitches, IN boolean timing_enabled)
ProcessSegments	xml_arch.c	/^static void ProcessSegments(INOUT ezxml_t Parent,$/;"	p	file:	signature:(INOUT ezxml_t Parent, OUT struct s_segment_inf **Segs, OUT int *NumSegs, IN struct s_switch_inf *Switches, IN int NumSwitches, IN boolean timing_enabled)
ProcessSubblocks	xml_arch.c	/^ProcessSubblocks(INOUT ezxml_t Parent,$/;"	f	file:	signature:(INOUT ezxml_t Parent, INOUT t_type_descriptor * Type, boolean timing_enabled)
ProcessSubblocks	xml_arch.c	/^static void ProcessSubblocks(INOUT ezxml_t Parent,$/;"	p	file:	signature:(INOUT ezxml_t Parent, INOUT t_type_descriptor * Type, IN boolean timing_enabled)
ProcessSwitches	xml_arch.c	/^ProcessSwitches(INOUT ezxml_t Parent,$/;"	f	file:	signature:(INOUT ezxml_t Parent, OUT struct s_switch_inf **Switches, OUT int *NumSwitches, IN boolean timing_enabled)
ProcessSwitches	xml_arch.c	/^static void ProcessSwitches(INOUT ezxml_t Node,$/;"	p	file:	signature:(INOUT ezxml_t Node, OUT struct s_switch_inf **Switches, OUT int *NumSwitches, IN boolean timing_enabled)
ProcessTypeProps	xml_arch.c	/^ProcessTypeProps(ezxml_t Node,$/;"	f	file:	signature:(ezxml_t Node, t_type_descriptor * Type)
ProcessTypeProps	xml_arch.c	/^static void ProcessTypeProps(ezxml_t Node,$/;"	p	file:	signature:(ezxml_t Node, t_type_descriptor * Type)
ProcessTypes	xml_arch.c	/^ProcessTypes(INOUT ezxml_t Node,$/;"	f	file:	signature:(INOUT ezxml_t Node, OUT t_type_descriptor ** Types, OUT int *NumTypes, boolean timing_enabled)
ProcessTypes	xml_arch.c	/^static void ProcessTypes(INOUT ezxml_t Node,$/;"	p	file:	signature:(INOUT ezxml_t Node, OUT t_type_descriptor ** Types, OUT int *NumTypes, IN boolean timing_enabled)
Process_Fc	xml_arch.c	/^Process_Fc(ezxml_t Fc_in_node,$/;"	f	file:	signature:(ezxml_t Fc_in_node, ezxml_t Fc_out_node, t_type_descriptor * Type)
Process_Fc	xml_arch.c	/^static void Process_Fc(ezxml_t Fc_in_node,$/;"	p	file:	signature:(ezxml_t Fc_in_node, ezxml_t Fc_out_node, t_type_descriptor * Type)
R	vpr_types.h	/^    float R;$/;"	m	struct:s_rr_node	access:public
R	vpr_types.h	/^    float R;$/;"	m	struct:s_switch_inf	access:public
RANDOM	vpr_types.h	/^{ FREE, RANDOM, USER };$/;"	e	enum:e_pad_loc_type
RAY_BLOCK_CLASSIFY_H	ray_block_classify.h	2;"	d
RECEIVER	vpr_types.h	/^{ OPEN = -1, DRIVER = 0, RECEIVER = 1 };$/;"	e	enum:e_pin_type
RED	graphics.h	/^  CYAN, RED, DARKGREEN, MAGENTA, BISQUE, LIGHTBLUE, THISTLE, PLUM, KHAKI, $/;"	e	enum:color_types
REVERSE_OPIN_ORDER	rr_graph.c	23;"	d	file:
RIGHT	vpr_types.h	/^{ TOP = 0, RIGHT = 1, BOTTOM = 2, LEFT = 3 };$/;"	e	enum:e_side
ROUND_UP	route_directed_search.c	537;"	d	file:
ROUND_UP	route_timing.c	612;"	d	file:
ROUTE_ONLY	vpr_types.h	/^{ PLACE_AND_ROUTE, PLACE_ONLY, ROUTE_ONLY,$/;"	e	enum:e_operation
ROUTING	vpr_types.h	/^{ NO_PICTURE, PLACEMENT, ROUTING };	\/* What's on screen? *\/$/;"	e	enum:pic_type
RR_GRAPH_NO_WARN	rr_graph.h	/^    RR_GRAPH_NO_WARN = 0x00,$/;"	e	enum:__anon12
RR_GRAPH_WARN_CHAN_WIDTH_CHANGED	rr_graph.h	/^    RR_GRAPH_WARN_CHAN_WIDTH_CHANGED = 0x02$/;"	e	enum:__anon12
RR_GRAPH_WARN_FC_CLIPPED	rr_graph.h	/^    RR_GRAPH_WARN_FC_CLIPPED = 0x01,$/;"	e	enum:__anon12
R_minW_nmos	vpr_types.h	/^    float R_minW_nmos;$/;"	m	struct:s_det_routing_arch	access:public
R_minW_nmos	xml_arch.h	/^     float R_minW_nmos;$/;"	m	struct:s_arch	access:public
R_minW_pmos	vpr_types.h	/^    float R_minW_pmos;$/;"	m	struct:s_det_routing_arch	access:public
R_minW_pmos	xml_arch.h	/^     float R_minW_pmos;$/;"	m	struct:s_arch	access:public
R_upstream	route_common.h	/^    float R_upstream;$/;"	m	struct:s_heap	access:public
R_upstream	route_tree_timing.h	/^    float R_upstream;$/;"	m	struct:s_rt_node	access:public
ReadBaseCostType	ReadOptions.c	/^ReadBaseCostType(IN const char *const *Args,$/;"	f	file:	signature:(IN const char *const *Args, OUT enum e_base_cost_type *BaseCostType)
ReadBaseCostType	ReadOptions.c	/^static const char *const *ReadBaseCostType(IN const char *const *Args,$/;"	p	file:	signature:(IN const char *const *Args, OUT enum e_base_cost_type *BaseCostType)
ReadBaseToken	ReadOptions.c	/^ReadBaseToken(IN const char *const *Args,$/;"	f	file:	signature:(IN const char *const *Args, OUT enum e_OptionBaseToken *Token)
ReadBaseToken	ReadOptions.c	/^static const char *const *ReadBaseToken(IN const char *const *Args,$/;"	p	file:	signature:(IN const char *const *Args, OUT enum e_OptionBaseToken *Token)
ReadFixPins	ReadOptions.c	/^ReadFixPins(IN const char *const *Args,$/;"	f	file:	signature:(IN const char *const *Args, OUT char **PinFile)
ReadFixPins	ReadOptions.c	/^static const char *const *ReadFixPins(IN const char *const *Args,$/;"	p	file:	signature:(IN const char *const *Args, OUT char **PinFile)
ReadFixPins	temp.c	/^ReadFixPins(IN const char *const *Args,$/;"	f	file:	signature:(IN const char *const *Args, OUT char **PinFile)
ReadFloat	ReadOptions.c	/^ReadFloat(IN const char *const *Args,$/;"	f	file:	signature:(IN const char *const *Args, OUT float *Val)
ReadFloat	ReadOptions.c	/^static const char *const *ReadFloat(IN const char *const *Args,$/;"	p	file:	signature:(IN const char *const *Args, OUT float *Val)
ReadInt	ReadOptions.c	/^ReadInt(IN const char *const *Args,$/;"	f	file:	signature:(IN const char *const *Args, OUT int *Val)
ReadInt	ReadOptions.c	/^static const char *const *ReadInt(IN const char *const *Args,$/;"	p	file:	signature:(IN const char *const *Args, OUT int *Val)
ReadLineTokens	ReadLine.c	/^ReadLineTokens(INOUT FILE * InFile,$/;"	f	signature:(INOUT FILE * InFile, INOUT int *LineNum)
ReadLineTokens	ReadLine.h	/^char **ReadLineTokens(INOUT FILE * InFile,$/;"	p	signature:(INOUT FILE * InFile, INOUT int *LineNum)
ReadLineTokens	read_place.c	/^char **ReadLineTokens(INOUT FILE * InFile,$/;"	p	file:	signature:(INOUT FILE * InFile, INOUT int *LineNum)
ReadOnOff	ReadOptions.c	/^ReadOnOff(IN const char *const *Args,$/;"	f	file:	signature:(IN const char *const *Args, OUT boolean * Val)
ReadOnOff	ReadOptions.c	/^static const char *const *ReadOnOff(IN const char *const *Args,$/;"	p	file:	signature:(IN const char *const *Args, OUT boolean * Val)
ReadOptions	ReadOptions.c	/^ReadOptions(IN int argc,$/;"	f	signature:(IN int argc, IN char **argv, OUT t_options * Options)
ReadOptions	ReadOptions.h	/^void ReadOptions(IN int argc,$/;"	p	signature:(IN int argc, IN char **argv, OUT t_options * Options)
ReadPlaceAlgorithm	ReadOptions.c	/^ReadPlaceAlgorithm(IN const char *const *Args,$/;"	f	file:	signature:(IN const char *const *Args, OUT enum e_place_algorithm *Algo)
ReadPlaceAlgorithm	ReadOptions.c	/^static const char *const *ReadPlaceAlgorithm(IN const char *const *Args,$/;"	p	file:	signature:(IN const char *const *Args, OUT enum e_place_algorithm *Algo)
ReadPlaceCostType	ReadOptions.c	/^ReadPlaceCostType(IN const char *const *Args,$/;"	f	file:	signature:(IN const char *const *Args, OUT enum place_c_types *Type)
ReadPlaceCostType	ReadOptions.c	/^static const char *const *ReadPlaceCostType(IN const char *const *Args,$/;"	p	file:	signature:(IN const char *const *Args, OUT enum place_c_types *Type)
ReadRouteType	ReadOptions.c	/^ReadRouteType(IN const char *const *Args,$/;"	f	file:	signature:(IN const char *const *Args, OUT enum e_route_type *Type)
ReadRouteType	ReadOptions.c	/^static const char *const *ReadRouteType(IN const char *const *Args,$/;"	p	file:	signature:(IN const char *const *Args, OUT enum e_route_type *Type)
ReadRouterAlgorithm	ReadOptions.c	/^ReadRouterAlgorithm(IN const char *const *Args,$/;"	f	file:	signature:(IN const char *const *Args, OUT enum e_router_algorithm *Algo)
ReadRouterAlgorithm	ReadOptions.c	/^static const char *const *ReadRouterAlgorithm(IN const char *const *Args,$/;"	p	file:	signature:(IN const char *const *Args, OUT enum e_router_algorithm *Algo)
ReadString	ReadOptions.c	/^ReadString(IN const char *const *Args,$/;"	f	file:	signature:(IN const char *const *Args, OUT char **Val)
ReadString	ReadOptions.c	/^static const char *const *ReadString(IN const char *const *Args,$/;"	p	file:	signature:(IN const char *const *Args, OUT char **Val)
ReadToken	ReadOptions.c	/^ReadToken(IN const char *const *Args,$/;"	f	file:	signature:(IN const char *const *Args, OUT enum e_OptionArgToken *Token)
RecomputeCritIter	ReadOptions.h	/^	int RecomputeCritIter;$/;"	m	struct:s_options	access:public
Rmetal	vpr_types.h	/^    float Rmetal;$/;"	m	struct:s_seg_details	access:public
Rmetal	vpr_types.h	/^    float Rmetal;$/;"	m	struct:s_segment_inf	access:public
RouteChanWidth	ReadOptions.h	/^	int RouteChanWidth;$/;"	m	struct:s_options	access:public
RouteFile	ReadOptions.h	/^    char *RouteFile;$/;"	m	struct:s_options	access:public
RouteType	ReadOptions.h	/^    enum e_route_type RouteType;$/;"	m	struct:s_options	typeref:enum:s_options::e_route_type	access:public
RouterAlgorithm	ReadOptions.h	/^    enum e_router_algorithm RouterAlgorithm;$/;"	m	struct:s_options	typeref:enum:s_options::e_router_algorithm	access:public
SAME_TRACK	rr_graph2.c	18;"	d	file:
SBOX_ERROR	rr_graph_sbox.c	141;"	d	file:
SBType	xml_arch.h	/^     enum e_switch_block_type SBType;$/;"	m	struct:s_arch	typeref:enum:s_arch::e_switch_block_type	access:public
SCREEN	graphics.h	1;"	d
SINGLE	vpr_types.h	/^{ MULTI_BUFFERED, MULTI_MUXED, MULTI_MERGED, SINGLE };$/;"	e	enum:e_drivers
SINK	vpr_types.h	/^{ SOURCE, SINK, IPIN, OPIN, CHANX, CHANY, NUM_RR_TYPES }$/;"	e	enum:e_rr_type
SINK_BLOCK	timing_place_lookup.c	45;"	d	file:
SINK_COST_INDEX	vpr_types.h	/^{ SOURCE_COST_INDEX = 0, SINK_COST_INDEX, OPIN_COST_INDEX,$/;"	e	enum:e_cost_indices
SMALL_NET	place.c	21;"	d	file:
SOLID	graphics.h	/^{ SOLID, DASHED };$/;"	e	enum:line_types
SOURCE	vpr_types.h	/^{ SOURCE, SINK, IPIN, OPIN, CHANX, CHANY, NUM_RR_TYPES }$/;"	e	enum:e_rr_type
SOURCE_BLOCK	timing_place_lookup.c	44;"	d	file:
SOURCE_COST_INDEX	vpr_types.h	/^{ SOURCE_COST_INDEX = 0, SINK_COST_INDEX, OPIN_COST_INDEX,$/;"	e	enum:e_cost_indices
SUBBLK_IPIN	path_delay2.h	/^    FB_IPIN, FB_OPIN, SUBBLK_IPIN, SUBBLK_OPIN, FF_SINK, FF_SOURCE,$/;"	e	enum:__anon8
SUBBLK_OPIN	path_delay2.h	/^    FB_IPIN, FB_OPIN, SUBBLK_IPIN, SUBBLK_OPIN, FF_SINK, FF_SOURCE,$/;"	e	enum:__anon8
SUBSET	vpr_types.h	/^{ SUBSET, WILTON, UNIVERSAL, FULL };	\/* UDSD Modifications by WMF *\/$/;"	e	enum:e_switch_block_type
SUB_CLOCK	path_delay.c	/^{ SUB_INPUT = 0, SUB_OUTPUT, SUB_CLOCK, NUM_SUB_PIN_TYPES };$/;"	e	enum:e_subblock_pin_type	file:
SUB_INPUT	path_delay.c	/^{ SUB_INPUT = 0, SUB_OUTPUT, SUB_CLOCK, NUM_SUB_PIN_TYPES };$/;"	e	enum:e_subblock_pin_type	file:
SUB_OUTPUT	path_delay.c	/^{ SUB_INPUT = 0, SUB_OUTPUT, SUB_CLOCK, NUM_SUB_PIN_TYPES };$/;"	e	enum:e_subblock_pin_type	file:
Seed	ReadOptions.h	/^    int Seed;$/;"	m	struct:s_options	access:public
Segments	xml_arch.h	/^     t_segment_inf * Segments;$/;"	m	struct:s_arch	access:public
SetupAnnealSched	SetupVPR.c	/^SetupAnnealSched(IN t_options Options,$/;"	f	file:	signature:(IN t_options Options, OUT struct s_annealing_sched *AnnealSched)
SetupAnnealSched	SetupVPR.c	/^static void SetupAnnealSched(IN t_options Options,$/;"	p	file:	signature:(IN t_options Options, OUT struct s_annealing_sched *AnnealSched)
SetupClassInf	xml_arch.c	/^SetupClassInf(ezxml_t Classes,$/;"	f	file:	signature:(ezxml_t Classes, t_type_descriptor * Type)
SetupClassInf	xml_arch.c	/^static void SetupClassInf(ezxml_t Classes,$/;"	p	file:	signature:(ezxml_t Classes, t_type_descriptor * Type)
SetupEmptyType	xml_arch.c	/^SetupEmptyType()$/;"	f	file:
SetupEmptyType	xml_arch.c	/^static void SetupEmptyType();$/;"	p	file:
SetupGlobalRoutingArch	SetupVPR.c	/^static void SetupGlobalRoutingArch(OUT struct s_det_routing_arch *RoutingArch,$/;"	p	file:	signature:(OUT struct s_det_routing_arch *RoutingArch, OUT t_segment_inf ** Segments)
SetupGridLocations	xml_arch.c	/^SetupGridLocations(ezxml_t Locations,$/;"	f	file:	signature:(ezxml_t Locations, t_type_descriptor * Type)
SetupGridLocations	xml_arch.c	/^static void SetupGridLocations(ezxml_t Locations,$/;"	p	file:	signature:(ezxml_t Locations, t_type_descriptor * Type)
SetupOperation	SetupVPR.c	/^SetupOperation(IN t_options Options,$/;"	f	file:	signature:(IN t_options Options, OUT enum e_operation *Operation)
SetupOperation	SetupVPR.c	/^static void SetupOperation(IN t_options Options,$/;"	p	file:	signature:(IN t_options Options, OUT enum e_operation *Operation)
SetupPinClasses	xml_arch.c	/^SetupPinClasses(ezxml_t Classes,$/;"	f	file:	signature:(ezxml_t Classes, t_type_descriptor * Type)
SetupPinClasses	xml_arch.c	/^static void SetupPinClasses(ezxml_t Classes,$/;"	p	file:	signature:(ezxml_t Classes, t_type_descriptor * Type)
SetupPinLocations	xml_arch.c	/^SetupPinLocations(ezxml_t Locations,$/;"	f	file:	signature:(ezxml_t Locations, t_type_descriptor * Type)
SetupPinLocations	xml_arch.c	/^static void SetupPinLocations(ezxml_t Locations,$/;"	p	file:	signature:(ezxml_t Locations, t_type_descriptor * Type)
SetupPlacerOpts	SetupVPR.c	/^SetupPlacerOpts(IN t_options Options,$/;"	f	file:	signature:(IN t_options Options, IN boolean TimingEnabled, OUT struct s_placer_opts *PlacerOpts)
SetupPlacerOpts	SetupVPR.c	/^static void SetupPlacerOpts(IN t_options Options,$/;"	p	file:	signature:(IN t_options Options, IN boolean TimingEnabled, OUT struct s_placer_opts *PlacerOpts)
SetupRouterOpts	SetupVPR.c	/^SetupRouterOpts(IN t_options Options,$/;"	f	file:	signature:(IN t_options Options, IN boolean TimingEnabled, OUT struct s_router_opts *RouterOpts)
SetupRouterOpts	SetupVPR.c	/^static void SetupRouterOpts(IN t_options Options,$/;"	p	file:	signature:(IN t_options Options, IN boolean TimingEnabled, OUT struct s_router_opts *RouterOpts)
SetupRoutingArch	SetupVPR.c	/^SetupRoutingArch(IN t_arch Arch,$/;"	f	file:	signature:(IN t_arch Arch, OUT struct s_det_routing_arch *RoutingArch)
SetupRoutingArch	SetupVPR.c	/^static void SetupRoutingArch(IN t_arch Arch,$/;"	p	file:	signature:(IN t_arch Arch, OUT struct s_det_routing_arch *RoutingArch)
SetupSubblocksTSeq	xml_arch.c	/^SetupSubblocksTSeq(ezxml_t timing_seq_in,$/;"	f	file:	signature:(ezxml_t timing_seq_in, ezxml_t timing_seq_out, t_type_descriptor * Type)
SetupSubblocksTSeq	xml_arch.c	/^static void SetupSubblocksTSeq(ezxml_t timing_seq_in,$/;"	p	file:	signature:(ezxml_t timing_seq_in, ezxml_t timing_seq_out, t_type_descriptor * Type)
SetupSubblocksTcomb	xml_arch.c	/^SetupSubblocksTcomb(ezxml_t timing,$/;"	f	file:	signature:(ezxml_t timing, t_type_descriptor * Type)
SetupSubblocksTcomb	xml_arch.c	/^static void SetupSubblocksTcomb(ezxml_t timing,$/;"	p	file:	signature:(ezxml_t timing, t_type_descriptor * Type)
SetupSwitches	SetupVPR.c	/^SetupSwitches(IN t_arch Arch,$/;"	f	file:	signature:(IN t_arch Arch, INOUT struct s_det_routing_arch *RoutingArch, IN struct s_switch_inf *ArchSwitches, IN int NumArchSwitches)
SetupSwitches	SetupVPR.c	/^static void SetupSwitches(IN t_arch Arch,$/;"	p	file:	signature:(IN t_arch Arch, INOUT struct s_det_routing_arch *RoutingArch, IN struct s_switch_inf *ArchSwitches, IN int NumArchSwitches)
SetupTiming	SetupVPR.c	/^SetupTiming(IN t_options Options,$/;"	f	file:	signature:(IN t_options Options, IN t_arch Arch, IN boolean TimingEnabled, IN enum e_operation Operation, IN struct s_placer_opts PlacerOpts, IN struct s_router_opts RouterOpts, OUT t_timing_inf * Timing)
SetupTiming	SetupVPR.c	/^static void SetupTiming(IN t_options Options,$/;"	p	file:	signature:(IN t_options Options, IN t_arch Arch, IN boolean TimingEnabled, IN enum e_operation Operation, IN struct s_placer_opts PlacerOpts, IN struct s_router_opts RouterOpts, OUT t_timing_inf * Timing)
SetupTypeTiming	xml_arch.c	/^SetupTypeTiming(ezxml_t timing,$/;"	f	file:	signature:(ezxml_t timing, t_type_descriptor * Type)
SetupTypeTiming	xml_arch.c	/^static void SetupTypeTiming(ezxml_t timing,$/;"	p	file:	signature:(ezxml_t timing, t_type_descriptor * Type)
SetupVPR	SetupVPR.c	/^SetupVPR(IN t_options Options,$/;"	f	signature:(IN t_options Options, IN boolean TimingEnabled, OUT t_arch * Arch, OUT enum e_operation *Operation, OUT struct s_placer_opts *PlacerOpts, OUT struct s_annealing_sched *AnnealSched, OUT struct s_router_opts *RouterOpts, OUT struct s_det_routing_arch *RoutingArch, OUT t_segment_inf ** Segments, OUT t_timing_inf * Timing, OUT t_subblock_data * Subblocks, OUT boolean * ShowGraphics, OUT int *GraphPause)
SetupVPR	SetupVPR.h	/^void SetupVPR(IN t_options Options,$/;"	p	signature:(IN t_options Options, IN boolean TimingEnabled, OUT t_arch * Arch, OUT enum e_operation *Operation, OUT struct s_placer_opts *PlacerOpts, OUT struct s_annealing_sched *AnnealSched, OUT struct s_router_opts *RouterOpts, OUT struct s_det_routing_arch *RoutingArch, OUT t_segment_inf ** Segments, OUT t_timing_inf * Timing, OUT t_subblock_data * Subblocks, OUT boolean * ShowGraphics, OUT int *GraphPause)
ShowAnnealSched	ShowSetup.c	/^ShowAnnealSched(IN struct s_annealing_sched AnnealSched)$/;"	f	file:	signature:(IN struct s_annealing_sched AnnealSched)
ShowAnnealSched	ShowSetup.c	/^static void ShowAnnealSched(IN struct s_annealing_sched AnnealSched);$/;"	p	file:	signature:(IN struct s_annealing_sched AnnealSched)
ShowOperation	ShowSetup.c	/^ShowOperation(IN enum e_operation Operation)$/;"	f	file:	signature:(IN enum e_operation Operation)
ShowOperation	ShowSetup.c	/^static void ShowOperation(IN enum e_operation Operation);$/;"	p	file:	signature:(IN enum e_operation Operation)
ShowPlaceTiming	ReadOptions.h	/^    boolean ShowPlaceTiming;$/;"	m	struct:s_options	access:public
ShowPlacerOpts	ShowSetup.c	/^ShowPlacerOpts(IN t_options Options,$/;"	f	file:	signature:(IN t_options Options, IN struct s_placer_opts PlacerOpts, IN struct s_annealing_sched AnnealSched)
ShowPlacerOpts	ShowSetup.c	/^static void ShowPlacerOpts(IN t_options Options,$/;"	p	file:	signature:(IN t_options Options, IN struct s_placer_opts PlacerOpts, IN struct s_annealing_sched AnnealSched)
ShowRouterOpts	ShowSetup.c	/^ShowRouterOpts(IN struct s_router_opts RouterOpts)$/;"	f	file:	signature:(IN struct s_router_opts RouterOpts)
ShowRouterOpts	ShowSetup.c	/^static void ShowRouterOpts(IN struct s_router_opts RouterOpts);$/;"	p	file:	signature:(IN struct s_router_opts RouterOpts)
ShowRoutingArch	ShowSetup.c	/^ShowRoutingArch(IN struct s_det_routing_arch RoutingArch)$/;"	f	file:	signature:(IN struct s_det_routing_arch RoutingArch)
ShowRoutingArch	ShowSetup.c	/^static void ShowRoutingArch(IN struct s_det_routing_arch RoutingArch);$/;"	p	file:	signature:(IN struct s_det_routing_arch RoutingArch)
ShowSetup	SetupVPR.h	/^void ShowSetup(IN t_options Options,$/;"	p	signature:(IN t_options Options, IN t_arch Arch, IN boolean TimingEnabled, IN enum e_operation Operation, IN struct s_placer_opts PlacerOpts, IN struct s_annealing_sched AnnealSched, IN struct s_router_opts RouterOpts, IN struct s_det_routing_arch RoutingArch, IN t_segment_inf * Segments, IN t_timing_inf Timing, IN t_subblock_data Subblocks)
ShowSetup	ShowSetup.c	/^ShowSetup(IN t_options Options,$/;"	f	signature:(IN t_options Options, IN t_arch Arch, IN boolean TimingEnabled, IN enum e_operation Operation, IN struct s_placer_opts PlacerOpts, IN struct s_annealing_sched AnnealSched, IN struct s_router_opts RouterOpts, IN struct s_det_routing_arch RoutingArch, IN t_segment_inf * Segments, IN t_timing_inf Timing, IN t_subblock_data Subblocks)
Str	vpr_types.h	/^    char *Str;$/;"	m	struct:s_TokenPair	access:public
Switches	xml_arch.h	/^     struct s_switch_inf *Switches;$/;"	m	struct:s_arch	typeref:struct:s_arch::s_switch_inf	access:public
THISTLE	graphics.h	/^  CYAN, RED, DARKGREEN, MAGENTA, BISQUE, LIGHTBLUE, THISTLE, PLUM, KHAKI, $/;"	e	enum:color_types
TIMING_ANALYSIS_ONLY	vpr_types.h	/^    TIMING_ANALYSIS_ONLY$/;"	e	enum:e_operation
TIMING_DRIVEN	vpr_types.h	/^{ BREADTH_FIRST, TIMING_DRIVEN, DIRECTED_SEARCH };$/;"	e	enum:e_router_algorithm
TO	place.c	34;"	d	file:
TOKENS	vpr_types.h	19;"	d
TOP	vpr_types.h	/^{ TOP = 0, RIGHT = 1, BOTTOM = 2, LEFT = 3 };$/;"	e	enum:e_side
TRUE	util.h	/^{ FALSE, TRUE }$/;"	e	enum:__anon11
TURQUOISE	graphics.h	/^  CORAL, TURQUOISE, MEDIUMPURPLE, DARKSLATEBLUE, DARKKHAKI, NUM_COLOR$/;"	e	enum:color_types
T_AREA_HEIGHT	graphics.c	88;"	d	file:
T_CONSTANT_GENERATOR	path_delay.c	76;"	d	file:
T_arr	path_delay2.h	/^    float T_arr;$/;"	m	struct:__anon7	access:public
T_comb	vpr_types.h	/^    float **T_comb;$/;"	m	struct:s_T_subblock	access:public
T_fb_ipin_to_sblk_ipin	vpr_types.h	/^    float T_fb_ipin_to_sblk_ipin;$/;"	m	struct:s_type_timing_inf	access:public
T_ipin_cblock	vpr_types.h	/^    float T_ipin_cblock;$/;"	m	struct:s_timing_inf	access:public
T_ipin_cblock	xml_arch.h	/^     float T_ipin_cblock;$/;"	m	struct:s_arch	access:public
T_linear	vpr_types.h	/^    float T_linear;$/;"	m	struct:s_rr_indexed_data	access:public
T_quadratic	vpr_types.h	/^    float T_quadratic;$/;"	m	struct:s_rr_indexed_data	access:public
T_req	path_delay2.h	/^    float T_req;$/;"	m	struct:__anon7	access:public
T_sblk_opin_to_fb_opin	vpr_types.h	/^    float T_sblk_opin_to_fb_opin;$/;"	m	struct:s_type_timing_inf	access:public
T_sblk_opin_to_sblk_ipin	vpr_types.h	/^    float T_sblk_opin_to_sblk_ipin;$/;"	m	struct:s_type_timing_inf	access:public
T_seq_in	vpr_types.h	/^    float *T_seq_in;$/;"	m	struct:s_T_subblock	access:public
T_seq_out	vpr_types.h	/^    float *T_seq_out;$/;"	m	struct:s_T_subblock	access:public
T_subblock	vpr_types.h	/^    t_T_subblock *T_subblock;$/;"	m	struct:s_type_timing_inf	access:public
Tdel	net_delay.c	/^    float Tdel;$/;"	m	struct:s_rc_node	file:	access:public
Tdel	path_delay2.h	/^    float Tdel;$/;"	m	struct:__anon6	access:public
Tdel	route_tree_timing.h	/^    float Tdel;$/;"	m	struct:s_rt_node	access:public
Tdel	vpr_types.h	/^    float Tdel;$/;"	m	struct:s_switch_inf	access:public
TimingAnalysis	ReadOptions.h	/^    boolean TimingAnalysis;$/;"	m	struct:s_options	access:public
UNIFORM	vpr_types.h	/^{ UNIFORM, GAUSSIAN, PULSE, DELTA };$/;"	e	enum:e_stat
UNIVERSAL	vpr_types.h	/^{ SUBSET, WILTON, UNIVERSAL, FULL };	\/* UDSD Modifications by WMF *\/$/;"	e	enum:e_switch_block_type
UNI_DIRECTIONAL	vpr_types.h	/^{ UNI_DIRECTIONAL, BI_DIRECTIONAL };	\/* UDSD by AY *\/$/;"	e	enum:e_directionality
UN_SET	rr_graph2.c	19;"	d	file:
USER	vpr_types.h	/^{ FREE, RANDOM, USER };$/;"	e	enum:e_pad_loc_type
USER_SCHED	vpr_types.h	/^{ AUTO_SCHED, USER_SCHED };	\/* Annealing schedule *\/$/;"	e	enum:sched_type
W	xml_arch.h	/^     int W;$/;"	m	struct:s_clb_grid	access:public
WARNTAG	util.h	27;"	d
WHITE	graphics.h	/^{ WHITE, BLACK, DARKGREY, LIGHTGREY, BLUE, GREEN, YELLOW,$/;"	e	enum:color_types
WILTON	vpr_types.h	/^{ SUBSET, WILTON, UNIVERSAL, FULL };	\/* UDSD Modifications by WMF *\/$/;"	e	enum:e_switch_block_type
WL	place_and_route.h	5;"	d
WMF_DEBUG	main.c	/^boolean WMF_DEBUG = FALSE;$/;"	v
WNEED	place_and_route.h	4;"	d
W_seed	main.c	/^int W_seed = -1;$/;"	v
XPOST	graphics.c	75;"	d	file:
XTOWORLD	graphics.c	81;"	d	file:
XmlReadArch	xml_arch.c	/^XmlReadArch(IN const char *ArchFile,$/;"	f	signature:(IN const char *ArchFile, IN boolean timing_enabled, OUT struct s_arch *arch, OUT t_type_descriptor ** Types, OUT int *NumTypes)
XmlReadArch	xml_arch.h	/^void XmlReadArch(IN const char *ArchFile,$/;"	p	signature:(IN const char *ArchFile, IN boolean timing_enabled, OUT struct s_arch *arch, OUT t_type_descriptor ** Types, OUT int *NumTypes)
YELLOW	graphics.h	/^{ WHITE, BLACK, DARKGREY, LIGHTGREY, BLUE, GREEN, YELLOW,$/;"	e	enum:color_types
YPOST	graphics.c	76;"	d	file:
YTOWORLD	graphics.c	82;"	d	file:
_EZXML_H	ezxml.h	26;"	d
__anon2::acc_cost	route_common.h	/^    float acc_cost;$/;"	m	struct:__anon2	access:public
__anon2::backward_path_cost	route_common.h	/^    float backward_path_cost;$/;"	m	struct:__anon2	access:public
__anon2::path_cost	route_common.h	/^    float path_cost;$/;"	m	struct:__anon2	access:public
__anon2::pres_cost	route_common.h	/^    float pres_cost;$/;"	m	struct:__anon2	access:public
__anon2::prev_edge	route_common.h	/^    short prev_edge;$/;"	m	struct:__anon2	access:public
__anon2::prev_node	route_common.h	/^    int prev_node;$/;"	m	struct:__anon2	access:public
__anon2::target_flag	route_common.h	/^    short target_flag;$/;"	m	struct:__anon2	access:public
__anon3::x	graphics.h	/^    float x;$/;"	m	struct:__anon3	access:public
__anon3::y	graphics.h	/^    float y;$/;"	m	struct:__anon3	access:public
__anon5::fcn	graphics.c	/^    void (*fcn) (void (*drawscreen) (void));$/;"	m	struct:__anon5	file:	access:public
__anon5::height	graphics.c	/^    int height;$/;"	m	struct:__anon5	file:	access:public
__anon5::ispoly	graphics.c	/^    int ispoly;$/;"	m	struct:__anon5	file:	access:public
__anon5::ispressed	graphics.c	/^    int ispressed;$/;"	m	struct:__anon5	file:	access:public
__anon5::istext	graphics.c	/^    int istext;$/;"	m	struct:__anon5	file:	access:public
__anon5::poly	graphics.c	/^    int poly[3][2];$/;"	m	struct:__anon5	file:	access:public
__anon5::text	graphics.c	/^    char text[BUTTON_TEXT_LEN];$/;"	m	struct:__anon5	file:	access:public
__anon5::width	graphics.c	/^    int width;$/;"	m	struct:__anon5	file:	access:public
__anon5::win	graphics.c	/^    Window win;$/;"	m	struct:__anon5	file:	access:public
__anon5::xleft	graphics.c	/^    int xleft;$/;"	m	struct:__anon5	file:	access:public
__anon5::ytop	graphics.c	/^    int ytop;$/;"	m	struct:__anon5	file:	access:public
__anon6::Tdel	path_delay2.h	/^    float Tdel;$/;"	m	struct:__anon6	access:public
__anon6::to_node	path_delay2.h	/^    int to_node;$/;"	m	struct:__anon6	access:public
__anon7::T_arr	path_delay2.h	/^    float T_arr;$/;"	m	struct:__anon7	access:public
__anon7::T_req	path_delay2.h	/^    float T_req;$/;"	m	struct:__anon7	access:public
__anon7::num_edges	path_delay2.h	/^    int num_edges;$/;"	m	struct:__anon7	access:public
__anon7::out_edges	path_delay2.h	/^    t_tedge *out_edges;$/;"	m	struct:__anon7	access:public
__anon9::iblk	path_delay2.h	/^    int iblk;$/;"	m	struct:__anon9	access:public
__anon9::ipin	path_delay2.h	/^    short ipin;$/;"	m	struct:__anon9	access:public
__anon9::isubblk	path_delay2.h	/^    short isubblk;$/;"	m	struct:__anon9	access:public
__anon9::type	path_delay2.h	/^    t_tnode_type type;$/;"	m	struct:__anon9	access:public
acc_cost	route_common.h	/^    float acc_cost;$/;"	m	struct:__anon2	access:public
acc_fac	ReadOptions.h	/^	float acc_fac;$/;"	m	struct:s_options	access:public
acc_fac	vpr_types.h	/^    float acc_fac;$/;"	m	struct:s_router_opts	access:public
add_path_to_route_tree	route_tree_timing.c	/^add_path_to_route_tree(struct s_heap *hptr,$/;"	f	file:	signature:(struct s_heap *hptr, t_rt_node ** sink_rt_node_ptr)
add_path_to_route_tree	route_tree_timing.c	/^static t_rt_node *add_path_to_route_tree(struct s_heap *hptr,$/;"	p	file:	signature:(struct s_heap *hptr, t_rt_node ** sink_rt_node_ptr)
add_route_tree_to_heap	route_timing.c	/^add_route_tree_to_heap(t_rt_node * rt_node,$/;"	f	file:	signature:(t_rt_node * rt_node, int target_node, float target_criticality, float astar_fac)
add_route_tree_to_heap	route_timing.c	/^static void add_route_tree_to_heap(t_rt_node * rt_node,$/;"	p	file:	signature:(t_rt_node * rt_node, int target_node, float target_criticality, float astar_fac)
add_rr_graph_C_from_switches	rr_graph_timing_params.c	/^add_rr_graph_C_from_switches(float C_ipin_cblock)$/;"	f	signature:(float C_ipin_cblock)
add_rr_graph_C_from_switches	rr_graph_timing_params.h	/^void add_rr_graph_C_from_switches(float C_ipin_cblock);$/;"	p	signature:(float C_ipin_cblock)
add_to_heap	route_common.c	/^add_to_heap(struct s_heap *hptr)$/;"	f	file:	signature:(struct s_heap *hptr)
add_to_heap	route_common.c	/^static void add_to_heap(struct s_heap *hptr);$/;"	p	file:	signature:(struct s_heap *hptr)
add_to_mod_list	route_common.c	/^add_to_mod_list(float *fptr)$/;"	f	signature:(float *fptr)
add_to_mod_list	route_common.h	/^void add_to_mod_list(float *fptr);$/;"	p	signature:(float *fptr)
add_to_rc_tree	net_delay.c	/^add_to_rc_tree(t_rc_node * parent_rc,$/;"	f	file:	signature:(t_rc_node * parent_rc, t_rc_node * child_rc, short iswitch, int inode, t_linked_rc_edge ** rc_edge_free_list_ptr)
add_to_rc_tree	net_delay.c	/^static void add_to_rc_tree(t_rc_node * parent_rc,$/;"	p	file:	signature:(t_rc_node * parent_rc, t_rc_node * child_rc, short iswitch, int inode, t_linked_rc_edge ** rc_edge_free_list_ptr)
add_to_sort_heap	heapsort.c	/^add_to_sort_heap(int *heap,$/;"	f	file:	signature:(int *heap, float *sort_values, int index, int heap_tail)
add_to_sort_heap	heapsort.c	/^static void add_to_sort_heap(int *heap,$/;"	p	file:	signature:(int *heap, float *sort_values, int index, int heap_tail)
adjust_one_rr_occ_and_pcost	route_common.c	/^adjust_one_rr_occ_and_pcost(int inode,$/;"	f	file:	signature:(int inode, int add_or_sub, float pres_fac)
adjust_one_rr_occ_and_pcost	route_common.c	/^static void adjust_one_rr_occ_and_pcost(int inode,$/;"	p	file:	signature:(int inode, int add_or_sub, float pres_fac)
adjustwin	graphics.c	/^adjustwin(void (*drawscreen) (void))$/;"	f	file:	signature:(void (*drawscreen) (void))
adjustwin	graphics.c	/^static void adjustwin(void (*drawscreen) (void));$/;"	p	file:	signature:(void (*drawscreen) (void))
alloc_and_assign_internal_structures	timing_place_lookup.c	/^alloc_and_assign_internal_structures(struct s_net **original_net,$/;"	f	file:	signature:(struct s_net **original_net, struct s_block **original_block, int *original_num_nets, int *original_num_blocks)
alloc_and_assign_internal_structures	timing_place_lookup.c	/^static void alloc_and_assign_internal_structures(struct s_net **original_net,$/;"	p	file:	signature:(struct s_net **original_net, struct s_block **original_block, int *original_num_nets, int *original_num_blocks)
alloc_and_load_actual_fc	rr_graph.c	/^alloc_and_load_actual_fc(IN int num_types,$/;"	f	file:	signature:(IN int num_types, IN t_type_ptr types, IN int nodes_per_chan, IN boolean is_Fc_out, IN enum e_directionality directionality, OUT boolean * Fc_clipped)
alloc_and_load_actual_fc	rr_graph.c	/^static int *alloc_and_load_actual_fc(IN int num_types,$/;"	p	file:	signature:(IN int num_types, IN t_type_ptr types, IN int nodes_per_chan, IN boolean is_Fc_out, IN enum e_directionality directionality, OUT boolean * Fc_clipped)
alloc_and_load_clb_opins_used_locally	route_common.c	/^alloc_and_load_clb_opins_used_locally(t_subblock_data subblock_data)$/;"	f	file:	signature:(t_subblock_data subblock_data)
alloc_and_load_clb_opins_used_locally	route_common.c	/^static t_ivec **alloc_and_load_clb_opins_used_locally(t_subblock_data$/;"	p	file:	signature:(t_subblock_data subblock_data)
alloc_and_load_edges_and_switches	rr_graph.c	/^alloc_and_load_edges_and_switches(IN t_rr_node * rr_node,$/;"	f	signature:(IN t_rr_node * rr_node, IN int inode, IN int num_edges, INOUT boolean * rr_edge_done, IN t_linked_edge * edge_list_head)
alloc_and_load_edges_and_switches	rr_graph.c	/^void alloc_and_load_edges_and_switches(IN t_rr_node * rr_node,$/;"	p	file:	signature:(IN t_rr_node * rr_node, IN int inode, IN int num_edges, IN boolean * rr_edge_done, IN t_linked_edge * edge_list_head)
alloc_and_load_fanout_counts	path_delay.c	/^alloc_and_load_fanout_counts(int ***num_uses_of_fb_ipin_ptr,$/;"	f	file:	signature:(int ***num_uses_of_fb_ipin_ptr, int ****num_uses_of_sblk_opin_ptr, t_subblock_data subblock_data)
alloc_and_load_fanout_counts	path_delay.c	/^static void alloc_and_load_fanout_counts(int ***num_uses_of_fb_ipin_ptr,$/;"	p	file:	signature:(int ***num_uses_of_fb_ipin_ptr, int ****num_uses_of_sblk_opin_ptr, t_subblock_data subblock_data)
alloc_and_load_for_fast_cost_update	place.c	/^alloc_and_load_for_fast_cost_update(float place_cost_exp)$/;"	f	file:	signature:(float place_cost_exp)
alloc_and_load_for_fast_cost_update	place.c	/^static void alloc_and_load_for_fast_cost_update(float place_cost_exp);$/;"	p	file:	signature:(float place_cost_exp)
alloc_and_load_global_route_seg_details	rr_graph.c	/^alloc_and_load_global_route_seg_details(IN int nodes_per_chan,$/;"	f	file:	signature:(IN int nodes_per_chan, IN int global_route_switch)
alloc_and_load_global_route_seg_details	rr_graph.c	/^static t_seg_details *alloc_and_load_global_route_seg_details(IN int$/;"	p	file:	signature:(IN int nodes_per_chan, IN int global_route_switch)
alloc_and_load_grid	SetupVPR.c	/^alloc_and_load_grid(INOUT int *num_instances_type)$/;"	f	file:	signature:(INOUT int *num_instances_type)
alloc_and_load_grid	SetupVPR.c	/^static void alloc_and_load_grid(INOUT int *num_instances_type);	\/* [0..num_types-1] *\/$/;"	p	file:	signature:(INOUT int *num_instances_type)
alloc_and_load_perturb_ipins	rr_graph.c	/^alloc_and_load_perturb_ipins(IN int nodes_per_chan,$/;"	f	file:	signature:(IN int nodes_per_chan, IN int num_types, IN int *Fc_in, IN int *Fc_out, IN enum e_directionality directionality)
alloc_and_load_perturb_ipins	rr_graph.c	/^static boolean *alloc_and_load_perturb_ipins(IN int nodes_per_chan,$/;"	p	file:	signature:(IN int nodes_per_chan, IN int num_types, IN int *Fc_in, IN int *Fc_out, IN enum e_directionality directionality)
alloc_and_load_pin_mappings	path_delay.c	/^alloc_and_load_pin_mappings(int ***block_pin_to_tnode_ptr,$/;"	f	file:	signature:(int ***block_pin_to_tnode_ptr, int *****snode_block_pin_to_tnode_ptr, t_subblock_data subblock_data, int ***num_uses_of_sblk_opin)
alloc_and_load_pin_mappings	path_delay.c	/^static int alloc_and_load_pin_mappings(int ***block_pin_to_tnode_ptr,$/;"	p	file:	signature:(int ***block_pin_to_tnode_ptr, int *****snode_block_pin_to_tnode_ptr, t_subblock_data subblock_data, int ***num_uses_of_sblk_opin)
alloc_and_load_pin_to_track_map	rr_graph.c	/^alloc_and_load_pin_to_track_map(IN enum e_pin_type pin_type,$/;"	f	file:	signature:(IN enum e_pin_type pin_type, IN int nodes_per_chan, IN int Fc, IN t_type_ptr Type, IN boolean perturb_switch_pattern, IN enum e_directionality directionality)
alloc_and_load_pin_to_track_map	rr_graph.c	/^static int ****alloc_and_load_pin_to_track_map(IN enum e_pin_type pin_type,$/;"	p	file:	signature:(IN enum e_pin_type pin_type, IN int nodes_per_chan, IN int Fc, IN t_type_ptr Type, IN boolean perturb_switch_pattern, IN enum e_directionality directionality)
alloc_and_load_placement_structs	place.c	/^alloc_and_load_placement_structs(int place_cost_type,$/;"	f	file:	signature:(int place_cost_type, int num_regions, float place_cost_exp, float ***old_region_occ_x, float ***old_region_occ_y, struct s_placer_opts placer_opts)
alloc_and_load_placement_structs	place.c	/^static void alloc_and_load_placement_structs(int place_cost_type,$/;"	p	file:	signature:(int place_cost_type, int num_regions, float place_cost_exp, float ***old_region_occ_x, float ***old_region_occ_y, struct s_placer_opts placer_opts)
alloc_and_load_rc_tree	net_delay.c	/^alloc_and_load_rc_tree(int inet,$/;"	f	file:	signature:(int inet, t_rc_node ** rc_node_free_list_ptr, t_linked_rc_edge ** rc_edge_free_list_ptr, t_linked_rc_ptr * rr_node_to_rc_node)
alloc_and_load_rc_tree	net_delay.c	/^static t_rc_node *alloc_and_load_rc_tree(int inet,$/;"	p	file:	signature:(int inet, t_rc_node ** rc_node_free_list_ptr, t_linked_rc_edge ** rc_edge_free_list_ptr, t_linked_rc_ptr * rr_node_to_rc_node)
alloc_and_load_rr_clb_source	rr_graph.c	/^alloc_and_load_rr_clb_source(t_ivec *** rr_node_indices)$/;"	f	file:	signature:(t_ivec *** rr_node_indices)
alloc_and_load_rr_clb_source	rr_graph.c	/^static void alloc_and_load_rr_clb_source(t_ivec *** rr_node_indices);$/;"	p	file:	signature:(t_ivec *** rr_node_indices)
alloc_and_load_rr_graph	rr_graph.c	/^alloc_and_load_rr_graph(IN int num_nodes,$/;"	f	file:	signature:(IN int num_nodes, IN t_rr_node * rr_node, IN int num_seg_types, IN t_seg_details * seg_details, IN boolean * rr_edge_done, IN struct s_ivec ****track_to_ipin_lookup, IN int *****opin_to_track_map, IN struct s_ivec ***switch_block_conn, IN struct s_grid_tile **grid, IN int nx, IN int ny, IN int Fs, IN short *****sblock_pattern, IN int *Fc_out, IN int **Fc_xofs, IN int **Fc_yofs, IN t_ivec *** rr_node_indices, IN int nodes_per_chan, IN enum e_switch_block_type sb_type, IN int delayless_switch, IN enum e_directionality directionality, IN int wire_to_ipin_switch, OUT boolean * Fc_clipped)
alloc_and_load_rr_graph	rr_graph.c	/^static void alloc_and_load_rr_graph(IN int num_nodes,$/;"	p	file:	signature:(IN int num_nodes, IN t_rr_node * rr_node, IN int num_seg_types, IN t_seg_details * seg_details, IN boolean * rr_edge_done, IN struct s_ivec ****track_to_ipin_lookup, IN int *****opin_to_track_map, IN struct s_ivec ***switch_block_conn, IN struct s_grid_tile **grid, IN int nx, IN int ny, IN int Fs, IN short *****sblock_pattern, IN int *Fc_out, IN int **Fc_xofs, IN int **Fc_yofs, IN t_ivec *** rr_node_indices, IN int nodes_per_chan, IN enum e_switch_block_type sb_type, IN int delayless_switch, IN enum e_directionality directionality, IN int wire_to_ipin_switch, OUT boolean * Fc_clipped)
alloc_and_load_rr_indexed_data	rr_graph_indexed_data.c	/^alloc_and_load_rr_indexed_data(IN t_segment_inf * segment_inf,$/;"	f	signature:(IN t_segment_inf * segment_inf, IN int num_segment, IN t_ivec *** rr_node_indices, IN int nodes_per_chan, int wire_to_ipin_switch, enum e_base_cost_type base_cost_type)
alloc_and_load_rr_indexed_data	rr_graph_indexed_data.h	/^void alloc_and_load_rr_indexed_data(t_segment_inf * segment_inf,$/;"	p	signature:(t_segment_inf * segment_inf, int num_segment, t_ivec *** rr_node_indices, int nodes_per_chan, int wire_to_ipin_switch, enum e_base_cost_type base_cost_type)
alloc_and_load_rr_node_indices	rr_graph2.c	/^alloc_and_load_rr_node_indices(IN int nodes_per_chan,$/;"	f	signature:(IN int nodes_per_chan, IN int nx, IN int ny, INOUT int *index, IN t_seg_details * seg_details)
alloc_and_load_rr_node_indices	rr_graph2.h	/^struct s_ivec ***alloc_and_load_rr_node_indices(IN int nodes_per_chan,$/;"	p	signature:(IN int nodes_per_chan, IN int nx, IN int ny, INOUT int *index, IN t_seg_details * seg_details)
alloc_and_load_rr_node_route_structs	route_common.c	/^alloc_and_load_rr_node_route_structs(void)$/;"	f	signature:(void)
alloc_and_load_rr_node_route_structs	route_common.h	/^void alloc_and_load_rr_node_route_structs(void);$/;"	p	signature:(void)
alloc_and_load_seg_details	rr_graph2.c	/^alloc_and_load_seg_details(INOUT int *nodes_per_chan,$/;"	f	signature:(INOUT int *nodes_per_chan, IN int max_len, IN int num_seg_types, IN t_segment_inf * segment_inf, IN boolean use_full_seg_groups, IN boolean is_global_graph, IN enum e_directionality directionality)
alloc_and_load_seg_details	rr_graph2.h	/^t_seg_details *alloc_and_load_seg_details(INOUT int *nodes_per_chan,$/;"	p	signature:(INOUT int *nodes_per_chan, IN int max_len, IN int num_seg_types, IN t_segment_inf * segment_inf, IN boolean use_full_seg_groups, IN boolean is_global_graph, IN enum e_directionality directionality)
alloc_and_load_sharable_switch_trans	rr_graph_area.c	/^alloc_and_load_sharable_switch_trans(int num_switch,$/;"	f	file:	signature:(int num_switch, float trans_sram_bit, float R_minW_nmos, float R_minW_pmos)
alloc_and_load_sharable_switch_trans	rr_graph_area.c	/^static float *alloc_and_load_sharable_switch_trans(int num_switch,$/;"	p	file:	signature:(int num_switch, float trans_sram_bit, float R_minW_nmos, float R_minW_pmos)
alloc_and_load_switch_block_conn	rr_graph_sbox.c	/^alloc_and_load_switch_block_conn(IN int nodes_per_chan,$/;"	f	signature:(IN int nodes_per_chan, IN enum e_switch_block_type switch_block_type, IN int Fs)
alloc_and_load_switch_block_conn	rr_graph_sbox.h	/^struct s_ivec ***alloc_and_load_switch_block_conn(int nodes_per_chan,$/;"	p	signature:(int nodes_per_chan, enum e_switch_block_type switch_block_type, int Fs)
alloc_and_load_timing_graph	path_delay.c	/^alloc_and_load_timing_graph(t_timing_inf timing_inf,$/;"	f	signature:(t_timing_inf timing_inf, t_subblock_data subblock_data)
alloc_and_load_timing_graph	path_delay.h	/^float **alloc_and_load_timing_graph(t_timing_inf timing_inf,$/;"	p	signature:(t_timing_inf timing_inf, t_subblock_data subblock_data)
alloc_and_load_timing_graph_levels	path_delay2.c	/^alloc_and_load_timing_graph_levels(void)$/;"	f	signature:(void)
alloc_and_load_timing_graph_levels	path_delay2.h	/^int alloc_and_load_timing_graph_levels(void);$/;"	p	signature:(void)
alloc_and_load_tnode_fanin_and_check_edges	path_delay2.c	/^alloc_and_load_tnode_fanin_and_check_edges(int *num_sinks_ptr)$/;"	f	file:	signature:(int *num_sinks_ptr)
alloc_and_load_tnode_fanin_and_check_edges	path_delay2.c	/^static int *alloc_and_load_tnode_fanin_and_check_edges(int *num_sinks_ptr);$/;"	p	file:	signature:(int *num_sinks_ptr)
alloc_and_load_tnodes_and_net_mapping	path_delay.c	/^alloc_and_load_tnodes_and_net_mapping(int **num_uses_of_fb_ipin,$/;"	f	file:	signature:(int **num_uses_of_fb_ipin, int ***num_uses_of_sblk_opin, int **block_pin_to_tnode, int ****snode_block_pin_to_tnode, t_subblock_data subblock_data, t_timing_inf timing_inf)
alloc_and_load_tnodes_and_net_mapping	path_delay.c	/^static void alloc_and_load_tnodes_and_net_mapping(int **num_uses_of_fb_ipin,$/;"	p	file:	signature:(int **num_uses_of_fb_ipin, int ***num_uses_of_sblk_opin, int **block_pin_to_tnode, int ****snode_block_pin_to_tnode, t_subblock_data subblock_data, t_timing_inf timing_inf)
alloc_and_load_track_to_pin_lookup	rr_graph.c	/^alloc_and_load_track_to_pin_lookup(IN int ****pin_to_track_map,$/;"	f	file:	signature:(IN int ****pin_to_track_map, IN int Fc, IN int height, IN int num_pins, IN int nodes_per_chan)
alloc_and_load_track_to_pin_lookup	rr_graph.c	/^static struct s_ivec ***alloc_and_load_track_to_pin_lookup(IN int$/;"	p	file:	signature:(IN int ****pin_to_track_map, IN int Fc, IN int height, IN int num_pins, IN int nodes_per_chan)
alloc_and_load_unique_pin_list	place.c	/^alloc_and_load_unique_pin_list(void)$/;"	f	file:	signature:(void)
alloc_and_load_unique_pin_list	place.c	/^static void alloc_and_load_unique_pin_list(void);$/;"	p	file:	signature:(void)
alloc_and_load_unsharable_switch_trans	rr_graph_area.c	/^alloc_and_load_unsharable_switch_trans(int num_switch,$/;"	f	file:	signature:(int num_switch, float trans_sram_bit, float R_minW_nmos)
alloc_and_load_unsharable_switch_trans	rr_graph_area.c	/^static float *alloc_and_load_unsharable_switch_trans(int num_switch,$/;"	p	file:	signature:(int num_switch, float trans_sram_bit, float R_minW_nmos)
alloc_b2b_connection_table	ray_block_classify.c	/^int** alloc_b2b_connection_table() $/;"	f
alloc_b2b_connection_table	ray_block_classify.h	/^int** alloc_b2b_connection_table();$/;"	p	signature:()
alloc_block	timing_place_lookup.c	/^alloc_block(void)$/;"	f	file:	signature:(void)
alloc_block	timing_place_lookup.c	/^static void alloc_block(void);$/;"	p	file:	signature:(void)
alloc_block_association_table	ray_block_classify.c	/^int* alloc_block_association_table()$/;"	f
alloc_block_association_table	ray_block_classify.h	/^int* alloc_block_association_table();$/;"	p	signature:()
alloc_crit	timing_place.c	/^alloc_crit(struct s_linked_vptr **chunk_list_head_ptr)$/;"	f	file:	signature:(struct s_linked_vptr **chunk_list_head_ptr)
alloc_crit	timing_place.c	/^static float **alloc_crit(struct s_linked_vptr **chunk_list_head_ptr);$/;"	p	file:	signature:(struct s_linked_vptr **chunk_list_head_ptr)
alloc_delta_arrays	timing_place_lookup.c	/^alloc_delta_arrays(void)$/;"	f	file:	signature:(void)
alloc_delta_arrays	timing_place_lookup.c	/^static void alloc_delta_arrays(void);$/;"	p	file:	signature:(void)
alloc_draw_structs	draw.c	/^alloc_draw_structs(void)$/;"	f	signature:(void)
alloc_draw_structs	draw.h	/^void alloc_draw_structs(void);$/;"	p	signature:(void)
alloc_hash_table	hash.c	/^alloc_hash_table(void)$/;"	f	signature:(void)
alloc_hash_table	hash.h	/^struct s_hash **alloc_hash_table(void);$/;"	p	signature:(void)
alloc_heap_data	route_common.c	/^alloc_heap_data(void)$/;"	f	file:	signature:(void)
alloc_heap_data	route_common.c	/^static struct s_heap *alloc_heap_data(void);$/;"	p	file:	signature:(void)
alloc_ivector_and_copy_int_list	util.c	/^alloc_ivector_and_copy_int_list(t_linked_int ** list_head_ptr,$/;"	f	signature:(t_linked_int ** list_head_ptr, int num_items, struct s_ivec *ivec, t_linked_int ** free_list_head_ptr)
alloc_ivector_and_copy_int_list	util.h	/^void alloc_ivector_and_copy_int_list(t_linked_int ** list_head_ptr,$/;"	p	signature:(t_linked_int ** list_head_ptr, int num_items, struct s_ivec *ivec, t_linked_int ** free_list_head_ptr)
alloc_linked_f_pointer	route_common.c	/^alloc_linked_f_pointer(void)$/;"	f	file:	signature:(void)
alloc_linked_f_pointer	route_common.c	/^static struct s_linked_f_pointer *alloc_linked_f_pointer(void);$/;"	p	file:	signature:(void)
alloc_linked_rc_edge	net_delay.c	/^alloc_linked_rc_edge(t_linked_rc_edge ** rc_edge_free_list_ptr)$/;"	f	file:	signature:(t_linked_rc_edge ** rc_edge_free_list_ptr)
alloc_linked_rc_edge	net_delay.c	/^static t_linked_rc_edge *alloc_linked_rc_edge(t_linked_rc_edge$/;"	p	file:	signature:(t_linked_rc_edge ** rc_edge_free_list_ptr)
alloc_linked_rt_edge	route_tree_timing.c	/^alloc_linked_rt_edge(void)$/;"	f	file:	signature:(void)
alloc_linked_rt_edge	route_tree_timing.c	/^static t_linked_rt_edge *alloc_linked_rt_edge(void);$/;"	p	file:	signature:(void)
alloc_lookups_and_criticalities	timing_place.c	/^alloc_lookups_and_criticalities(t_chan_width_dist chan_width_dist,$/;"	f	signature:(t_chan_width_dist chan_width_dist, struct s_router_opts router_opts, struct s_det_routing_arch det_routing_arch, t_segment_inf * segment_inf, t_timing_inf timing_inf, t_subblock_data subblock_data, float ***net_delay, float ***net_slack)
alloc_lookups_and_criticalities	timing_place.h	/^void alloc_lookups_and_criticalities(t_chan_width_dist chan_width_dist,$/;"	p	signature:(t_chan_width_dist chan_width_dist, struct s_router_opts router_opts, struct s_det_routing_arch det_routing_arch, t_segment_inf * segment_inf, t_timing_inf timing_inf, t_subblock_data subblock_data, float ***net_delay, float ***net_slack)
alloc_matrix	util.c	/^alloc_matrix(int nrmin,$/;"	f	signature:(int nrmin, int nrmax, int ncmin, int ncmax, size_t elsize)
alloc_matrix	util.h	/^void **alloc_matrix(int nrmin,$/;"	p	signature:(int nrmin, int nrmax, int ncmin, int ncmax, size_t elsize)
alloc_matrix3	util.c	/^alloc_matrix3(int nrmin,$/;"	f	signature:(int nrmin, int nrmax, int ncmin, int ncmax, int ndmin, int ndmax, size_t elsize)
alloc_matrix3	util.h	/^void ***alloc_matrix3(int nrmin,$/;"	p	signature:(int nrmin, int nrmax, int ncmin, int ncmax, int ndmin, int ndmax, size_t elsize)
alloc_matrix4	util.c	/^alloc_matrix4(int nrmin,$/;"	f	signature:(int nrmin, int nrmax, int ncmin, int ncmax, int ndmin, int ndmax, int nemin, int nemax, size_t elsize)
alloc_matrix4	util.h	/^void ****alloc_matrix4(int nrmin,$/;"	p	signature:(int nrmin, int nrmax, int ncmin, int ncmax, int ndmin, int ndmax, int nemin, int nemax, size_t elsize)
alloc_net	timing_place_lookup.c	/^alloc_net(void)$/;"	f	file:	signature:(void)
alloc_net	timing_place_lookup.c	/^static void alloc_net(void);$/;"	p	file:	signature:(void)
alloc_net_delay	net_delay.c	/^alloc_net_delay(struct s_linked_vptr **chunk_list_head_ptr)$/;"	f	signature:(struct s_linked_vptr **chunk_list_head_ptr)
alloc_net_delay	net_delay.h	/^float **alloc_net_delay(struct s_linked_vptr **chunk_list_head_ptr);$/;"	p	signature:(struct s_linked_vptr **chunk_list_head_ptr)
alloc_net_rr_terminals	rr_graph.c	/^alloc_net_rr_terminals(void)$/;"	f	file:	signature:(void)
alloc_net_rr_terminals	rr_graph.c	/^static void alloc_net_rr_terminals(void);$/;"	p	file:	signature:(void)
alloc_net_slack	path_delay.c	/^alloc_net_slack(void)$/;"	f	file:	signature:(void)
alloc_net_slack	path_delay.c	/^static float **alloc_net_slack(void);$/;"	p	file:	signature:(void)
alloc_place_regions	place.c	/^alloc_place_regions(int num_regions)$/;"	f	file:	signature:(int num_regions)
alloc_place_regions	place.c	/^static void alloc_place_regions(int num_regions);$/;"	p	file:	signature:(int num_regions)
alloc_rc_node	net_delay.c	/^alloc_rc_node(t_rc_node ** rc_node_free_list_ptr)$/;"	f	file:	signature:(t_rc_node ** rc_node_free_list_ptr)
alloc_rc_node	net_delay.c	/^static t_rc_node *alloc_rc_node(t_rc_node ** rc_node_free_list_ptr);$/;"	p	file:	signature:(t_rc_node ** rc_node_free_list_ptr)
alloc_route_structs	route_common.c	/^alloc_route_structs(t_subblock_data subblock_data)$/;"	f	signature:(t_subblock_data subblock_data)
alloc_route_structs	route_export.h	/^t_ivec **alloc_route_structs(t_subblock_data subblock_data);$/;"	p	signature:(t_subblock_data subblock_data)
alloc_route_tree_timing_structs	route_tree_timing.c	/^alloc_route_tree_timing_structs(void)$/;"	f	signature:(void)
alloc_route_tree_timing_structs	route_tree_timing.h	/^void alloc_route_tree_timing_structs(void);$/;"	p	signature:(void)
alloc_routing_structs	timing_place_lookup.c	/^alloc_routing_structs(struct s_router_opts router_opts,$/;"	f	file:	signature:(struct s_router_opts router_opts, struct s_det_routing_arch det_routing_arch, t_segment_inf * segment_inf, t_timing_inf timing_inf, t_subblock_data subblock_data)
alloc_routing_structs	timing_place_lookup.c	/^static void alloc_routing_structs(struct s_router_opts router_opts,$/;"	p	file:	signature:(struct s_router_opts router_opts, struct s_det_routing_arch det_routing_arch, t_segment_inf * segment_inf, t_timing_inf timing_inf, t_subblock_data subblock_data)
alloc_rt_node	route_tree_timing.c	/^alloc_rt_node(void)$/;"	f	file:	signature:(void)
alloc_rt_node	route_tree_timing.c	/^static t_rt_node *alloc_rt_node(void);$/;"	p	file:	signature:(void)
alloc_saved_routing	route_common.c	/^alloc_saved_routing(t_ivec ** fb_opins_used_locally,$/;"	f	signature:(t_ivec ** fb_opins_used_locally, t_ivec *** saved_clb_opins_used_locally_ptr)
alloc_saved_routing	route_export.h	/^struct s_trace **alloc_saved_routing(t_ivec ** fb_opins_used_locally,$/;"	p	signature:(t_ivec ** fb_opins_used_locally, t_ivec *** saved_clb_opins_used_locally_ptr)
alloc_sblock_pattern_lookup	rr_graph2.c	/^alloc_sblock_pattern_lookup(IN int nx,$/;"	f	signature:(IN int nx, IN int ny, IN int nodes_per_chan)
alloc_sblock_pattern_lookup	rr_graph2.h	/^short *****alloc_sblock_pattern_lookup(IN int nx,$/;"	p	signature:(IN int nx, IN int ny, IN int nodes_per_chan)
alloc_timing_driven_route_structs	route_timing.c	/^alloc_timing_driven_route_structs(float **pin_criticality_ptr,$/;"	f	signature:(float **pin_criticality_ptr, int **sink_order_ptr, t_rt_node *** rt_node_of_sink_ptr)
alloc_timing_driven_route_structs	route_timing.h	/^void alloc_timing_driven_route_structs(float **pin_criticality_ptr,$/;"	p	signature:(float **pin_criticality_ptr, int **sink_order_ptr, t_rt_node *** rt_node_of_sink_ptr)
alloc_trace_data	route_common.c	/^alloc_trace_data(void)$/;"	f	file:	signature:(void)
alloc_trace_data	route_common.c	/^static struct s_trace *alloc_trace_data(void);$/;"	p	file:	signature:(void)
allocate_and_load_critical_path	path_delay.c	/^allocate_and_load_critical_path(void)$/;"	f	signature:(void)
allocate_and_load_critical_path	path_delay.h	/^t_linked_int *allocate_and_load_critical_path(void);$/;"	p	signature:(void)
alpha_t	vpr_types.h	/^    float alpha_t;$/;"	m	struct:s_annealing_sched	access:public
angnorm	graphics.c	/^angnorm(float ang)$/;"	f	file:	signature:(float ang)
assess_swap	place.c	/^assess_swap(float delta_c,$/;"	f	file:	signature:(float delta_c, float t)
assess_swap	place.c	/^static int assess_swap(float delta_c,$/;"	p	file:	signature:(float delta_c, float t)
assign_blocks_and_route_net	timing_place_lookup.c	/^assign_blocks_and_route_net(t_type_ptr source_type,$/;"	f	file:	signature:(t_type_ptr source_type, int source_x_loc, int source_y_loc, t_type_ptr sink_type, int sink_x_loc, int sink_y_loc, struct s_router_opts router_opts, struct s_det_routing_arch det_routing_arch, t_segment_inf * segment_inf, t_timing_inf timing_inf)
assign_blocks_and_route_net	timing_place_lookup.c	/^static float assign_blocks_and_route_net(t_type_ptr source_type,$/;"	p	file:	signature:(t_type_ptr source_type, int source_x_loc, int source_y_loc, t_type_ptr sink_type, int sink_x_loc, int sink_y_loc, struct s_router_opts router_opts, struct s_det_routing_arch det_routing_arch, t_segment_inf * segment_inf, t_timing_inf timing_inf)
assign_locations	timing_place_lookup.c	/^assign_locations(t_type_ptr source_type,$/;"	f	file:	signature:(t_type_ptr source_type, int source_x_loc, int source_y_loc, int source_z_loc, t_type_ptr sink_type, int sink_x_loc, int sink_y_loc, int sink_z_loc)
assign_locations	timing_place_lookup.c	/^static void assign_locations(t_type_ptr source_type,$/;"	p	file:	signature:(t_type_ptr source_type, int source_x_loc, int source_y_loc, int source_z_loc, t_type_ptr sink_type, int sink_x_loc, int sink_y_loc, int sink_z_loc)
astar_fac	ReadOptions.h	/^	float astar_fac;$/;"	m	struct:s_options	access:public
astar_fac	vpr_types.h	/^    float astar_fac;$/;"	m	struct:s_router_opts	access:public
attr	ezxml.c	/^    char ***attr;		\/* default attributes *\/$/;"	m	struct:ezxml_root	file:	access:public
attr	ezxml.h	/^	char **attr;		\/* tag attributes { name, value, name, value, ... NULL } *\/$/;"	m	struct:ezxml	access:public
backward_path_cost	route_common.h	/^    float backward_path_cost;$/;"	m	struct:__anon2	access:public
backward_path_cost	route_common.h	/^    float backward_path_cost;$/;"	m	struct:s_heap	access:public
base_cost	vpr_types.h	/^    float base_cost;$/;"	m	struct:s_rr_indexed_data	access:public
base_cost_type	ReadOptions.h	/^	enum e_base_cost_type base_cost_type;$/;"	m	struct:s_options	typeref:enum:s_options::e_base_cost_type	access:public
base_cost_type	vpr_types.h	/^    enum e_base_cost_type base_cost_type;$/;"	m	struct:s_router_opts	typeref:enum:s_router_opts::e_base_cost_type	access:public
bb_coords	place.c	/^static struct s_bb *bb_coords = NULL, *bb_num_on_edges = NULL;$/;"	v	typeref:struct:s_bb	file:
bb_factor	ReadOptions.h	/^	int bb_factor;$/;"	m	struct:s_options	access:public
bb_factor	vpr_types.h	/^    int bb_factor;$/;"	m	struct:s_router_opts	access:public
bb_num_on_edges	place.c	/^static struct s_bb *bb_coords = NULL, *bb_num_on_edges = NULL;$/;"	v	typeref:struct:	file:
bend_cost	ReadOptions.h	/^	float bend_cost;$/;"	m	struct:s_options	access:public
bend_cost	vpr_types.h	/^    float bend_cost;$/;"	m	struct:s_router_opts	access:public
binary_search	main.c	/^int binary_search = -1;$/;"	v
binary_search_place_and_route	place_and_route.c	/^binary_search_place_and_route(struct s_placer_opts placer_opts,$/;"	f	file:	signature:(struct s_placer_opts placer_opts, char *place_file, char *net_file, char *arch_file, char *route_file, boolean full_stats, boolean verify_binary_search, struct s_annealing_sched annealing_sched, struct s_router_opts router_opts, struct s_det_routing_arch det_routing_arch, t_segment_inf * segment_inf, t_timing_inf timing_inf, t_subblock_data * subblock_data_ptr, t_chan_width_dist chan_width_dist, t_mst_edge ** mst)
binary_search_place_and_route	place_and_route.c	/^static int binary_search_place_and_route(struct s_placer_opts placer_opts,$/;"	p	file:	signature:(struct s_placer_opts placer_opts, char *place_file, char *net_file, char *arch_file, char *route_file, boolean full_stats, boolean verify_binary_search, struct s_annealing_sched annealing_sched, struct s_router_opts router_opts, struct s_det_routing_arch det_routing_arch, t_segment_inf * segment_inf, t_timing_inf timing_inf, t_subblock_data * subblock_data_ptr, t_chan_width_dist chan_width_dist, t_mst_edge ** mst)
bitfield	vpr_types.h	/^typedef size_t bitfield;$/;"	t
block	globals_declare.h	/^struct s_block *block;$/;"	v	typeref:struct:s_block
block	main.c	/^struct s_block *block = NULL;$/;"	v	typeref:struct:s_block
block_color	draw.c	/^static enum color_types *net_color, *block_color;$/;"	v	typeref:enum:	file:
block_dist	ReadOptions.h	/^    int block_dist;$/;"	m	struct:s_options	access:public
block_dist	vpr_types.h	/^    int block_dist;$/;"	m	struct:s_placer_opts	access:public
blocks	vpr_types.h	/^    int *blocks;$/;"	m	struct:s_grid_tile	access:public
boolean	util.h	/^boolean;$/;"	t	typeref:enum:__anon11
boolean	util.h	/^typedef int boolean;$/;"	t
breadth_first_add_source_to_heap	route_breadth_first.c	/^breadth_first_add_source_to_heap(int inet)$/;"	f	file:	signature:(int inet)
breadth_first_add_source_to_heap	route_breadth_first.c	/^static void breadth_first_add_source_to_heap(int inet);$/;"	p	file:	signature:(int inet)
breadth_first_expand_neighbours	route_breadth_first.c	/^breadth_first_expand_neighbours(int inode,$/;"	f	file:	signature:(int inode, float pcost, int inet, float bend_cost)
breadth_first_expand_neighbours	route_breadth_first.c	/^static void breadth_first_expand_neighbours(int inode,$/;"	p	file:	signature:(int inode, float pcost, int inet, float bend_cost)
breadth_first_expand_trace_segment	route_breadth_first.c	/^breadth_first_expand_trace_segment(struct s_trace *start_ptr,$/;"	f	file:	signature:(struct s_trace *start_ptr, int remaining_connections_to_sink)
breadth_first_expand_trace_segment	route_breadth_first.c	/^static void breadth_first_expand_trace_segment(struct s_trace *start_ptr,$/;"	p	file:	signature:(struct s_trace *start_ptr, int remaining_connections_to_sink)
breadth_first_route_net	route_breadth_first.c	/^breadth_first_route_net(int inet,$/;"	f	file:	signature:(int inet, float bend_cost)
breadth_first_route_net	route_breadth_first.c	/^static boolean breadth_first_route_net(int inet,$/;"	p	file:	signature:(int inet, float bend_cost)
buf_size	vpr_types.h	/^    float buf_size;$/;"	m	struct:s_switch_inf	access:public
buffered	vpr_types.h	/^    boolean buffered;$/;"	m	struct:s_switch_inf	access:public
build_bidir_rr_opins	rr_graph.c	/^build_bidir_rr_opins(IN int i,$/;"	f	file:	signature:(IN int i, IN int j, INOUT t_rr_node * rr_node, IN t_ivec *** rr_node_indices, IN int *****opin_to_track_map, IN int *Fc_out, IN boolean * rr_edge_done, IN t_seg_details * seg_details, IN struct s_grid_tile **grid)
build_bidir_rr_opins	rr_graph.c	/^static void build_bidir_rr_opins(IN int i,$/;"	p	file:	signature:(IN int i, IN int j, INOUT t_rr_node * rr_node, IN t_ivec *** rr_node_indices, IN int *****opin_to_track_map, IN int *Fc_out, IN boolean * rr_edge_done, IN t_seg_details * seg_details, IN struct s_grid_tile **grid)
build_block_output_tnode	path_delay.c	/^build_block_output_tnode(int inode,$/;"	f	file:	signature:(int inode, int iblk, int ipin, int **block_pin_to_tnode)
build_block_output_tnode	path_delay.c	/^static void build_block_output_tnode(int inode,$/;"	p	file:	signature:(int inode, int iblk, int ipin, int **block_pin_to_tnode)
build_default_menu	graphics.c	/^build_default_menu(void)$/;"	f	file:	signature:(void)
build_fb_tnodes	path_delay.c	/^build_fb_tnodes(int iblk,$/;"	f	file:	signature:(int iblk, int *n_uses_of_fb_ipin, int **block_pin_to_tnode, int ***sub_pin_to_tnode, int num_subs, t_subblock * sub_inf, float T_fb_ipin_to_sblk_ipin)
build_fb_tnodes	path_delay.c	/^static void build_fb_tnodes(int iblk,$/;"	p	file:	signature:(int iblk, int *n_uses_of_fb_ipin, int **block_pin_to_tnode, int ***sub_pin_to_tnode, int num_subs, t_subblock * sub_inf, float T_fb_ipin_to_sblk_ipin)
build_rr_graph	rr_graph.c	/^build_rr_graph(IN t_graph_type graph_type,$/;"	f	signature:(IN t_graph_type graph_type, IN int num_types, IN t_type_ptr types, IN int nx, IN int ny, IN struct s_grid_tile **grid, IN int chan_width, IN struct s_chan_width_dist *chan_capacity_inf, IN enum e_switch_block_type sb_type, IN int Fs, IN int num_seg_types, IN int num_switches, IN t_segment_inf * segment_inf, IN int global_route_switch, IN int delayless_switch, IN t_timing_inf timing_inf, IN int wire_to_ipin_switch, IN enum e_base_cost_type base_cost_type, OUT int *Warnings)
build_rr_graph	rr_graph.h	/^void build_rr_graph(IN t_graph_type graph_type,$/;"	p	signature:(IN t_graph_type graph_type, IN int num_types, IN t_type_ptr types, IN int nx, IN int ny, IN struct s_grid_tile **grid, IN int chan_width, IN struct s_chan_width_dist *chan_capacity_inf, IN enum e_switch_block_type sb_type, IN int Fs, IN int num_seg_types, IN int num_switches, IN t_segment_inf * segment_inf, IN int global_route_switch, IN int delayless_switch, IN t_timing_inf timing_inf, IN int wire_to_ipin_switch, IN enum e_base_cost_type base_cost_type, OUT int *Warnings)
build_rr_sinks_sources	rr_graph.c	/^build_rr_sinks_sources(IN int i,$/;"	f	file:	signature:(IN int i, IN int j, IN t_rr_node * rr_node, IN t_ivec *** rr_node_indices, IN int delayless_switch, IN struct s_grid_tile **grid)
build_rr_sinks_sources	rr_graph.c	/^static void build_rr_sinks_sources(IN int i,$/;"	p	file:	signature:(IN int i, IN int j, IN t_rr_node * rr_node, IN t_ivec *** rr_node_indices, IN int delayless_switch, IN struct s_grid_tile **grid)
build_rr_xchan	rr_graph.c	/^build_rr_xchan(IN int i,$/;"	f	file:	signature:(IN int i, IN int j, IN struct s_ivec ****track_to_ipin_lookup, IN struct s_ivec ***switch_block_conn, IN int cost_index_offset, IN int nodes_per_chan, IN int *opin_mux_size, IN short *****sblock_pattern, IN int Fs_per_side, IN t_seg_details * seg_details, IN t_ivec *** rr_node_indices, INOUT boolean * rr_edge_done, INOUT t_rr_node * rr_node, IN int wire_to_ipin_switch, IN enum e_directionality directionality)
build_rr_xchan	rr_graph.c	/^static void build_rr_xchan(IN int i,$/;"	p	file:	signature:(IN int i, IN int j, IN struct s_ivec ****track_to_ipin_lookup, IN struct s_ivec ***switch_block_conn, IN int cost_index_offset, IN int nodes_per_chan, IN int *opin_mux_size, IN short *****sblock_pattern, IN int Fs_per_side, IN t_seg_details * seg_details, IN t_ivec *** rr_node_indices, IN boolean * rr_edge_done, INOUT t_rr_node * rr_node, IN int wire_to_ipin_switch, IN enum e_directionality directionality)
build_rr_ychan	rr_graph.c	/^build_rr_ychan(IN int i,$/;"	f	file:	signature:(IN int i, IN int j, IN struct s_ivec ****track_to_ipin_lookup, IN struct s_ivec ***switch_block_conn, IN int cost_index_offset, IN int nodes_per_chan, IN int *opin_mux_size, IN short *****sblock_pattern, IN int Fs_per_side, IN t_seg_details * seg_details, IN t_ivec *** rr_node_indices, IN boolean * rr_edge_done, INOUT t_rr_node * rr_node, IN int wire_to_ipin_switch, IN enum e_directionality directionality)
build_rr_ychan	rr_graph.c	/^static void build_rr_ychan(IN int i,$/;"	p	file:	signature:(IN int i, IN int j, IN struct s_ivec ****track_to_ipin_lookup, IN struct s_ivec ***switch_block_conn, IN int cost_index_offset, IN int nodes_per_chan, IN int *opin_mux_size, IN short *****sblock_pattern, IN int Fs_per_side, IN t_seg_details * seg_details, IN t_ivec *** rr_node_indices, IN boolean * rr_edge_done, INOUT t_rr_node * rr_node, IN int wire_to_ipin_switch, IN enum e_directionality directionality)
build_subblock_tnodes	path_delay.c	/^build_subblock_tnodes(int **n_uses_of_sblk_opin,$/;"	f	file:	signature:(int **n_uses_of_sblk_opin, int *node_block_pin_to_tnode, int ***sub_pin_to_tnode, int *num_subblocks_per_block, t_subblock ** subblock_inf, t_timing_inf timing_inf, int iblk)
build_subblock_tnodes	path_delay.c	/^static void build_subblock_tnodes(int **n_uses_of_sblk_opin,$/;"	p	file:	signature:(int **n_uses_of_sblk_opin, int *node_block_pin_to_tnode, int ***sub_pin_to_tnode, int *num_subblocks_per_block, t_subblock ** subblock_inf, t_timing_inf timing_inf, int iblk)
build_textarea	graphics.c	/^build_textarea(void)$/;"	f	file:	signature:(void)
build_unidir_rr_opins	rr_graph.c	/^build_unidir_rr_opins(IN int i,$/;"	f	file:	signature:(IN int i, IN int j, IN struct s_grid_tile **grid, IN int *Fc_out, IN int nodes_per_chan, IN t_seg_details * seg_details, INOUT int **Fc_xofs, INOUT int **Fc_yofs, INOUT t_rr_node * rr_node, INOUT boolean * rr_edge_done, OUT boolean * Fc_clipped, IN t_ivec *** rr_node_indices)
build_unidir_rr_opins	rr_graph.c	/^static void build_unidir_rr_opins(IN int i,$/;"	p	file:	signature:(IN int i, IN int j, IN struct s_grid_tile **grid, IN int *Fc_out, IN int nodes_per_chan, IN t_seg_details * seg_details, INOUT int **Fc_xofs, INOUT int **Fc_yofs, INOUT t_rr_node * rr_node, INOUT boolean * rr_edge_done, OUT boolean * Fc_clipped, IN t_ivec *** rr_node_indices)
button	graphics.c	/^static t_button *button;	\/* [0..num_buttons-1] *\/$/;"	v	file:
capacity	vpr_types.h	/^    float capacity;$/;"	m	struct:s_place_region	access:public
capacity	vpr_types.h	/^    int capacity;$/;"	m	struct:s_type_descriptor	access:public
capacity	vpr_types.h	/^    short capacity;$/;"	m	struct:s_rr_node	access:public
cb	vpr_types.h	/^    boolean *cb;$/;"	m	struct:s_seg_details	access:public
cb	vpr_types.h	/^    boolean *cb;$/;"	m	struct:s_segment_inf	access:public
cb_len	vpr_types.h	/^    int cb_len;$/;"	m	struct:s_segment_inf	access:public
chan_width_io	vpr_types.h	/^    float chan_width_io;$/;"	m	struct:s_chan_width_dist	access:public
chan_width_x	globals_declare.h	/^int *chan_width_x, *chan_width_y;	\/* numerical form *\/$/;"	v
chan_width_x	main.c	/^int *chan_width_x = NULL;	\/* [0..ny] *\/$/;"	v
chan_width_y	globals_declare.h	/^int *chan_width_x, *chan_width_y;	\/* numerical form *\/$/;"	v
chan_width_y	main.c	/^int *chan_width_y = NULL;	\/* [0..nx] *\/$/;"	v
chan_x_dist	vpr_types.h	/^    t_chan chan_x_dist;$/;"	m	struct:s_chan_width_dist	access:public
chan_y_dist	vpr_types.h	/^    t_chan chan_y_dist;$/;"	m	struct:s_chan_width_dist	access:public
chanx_chany_adjacent	check_route.c	/^chanx_chany_adjacent(int chanx_node,$/;"	f	file:	signature:(int chanx_node, int chany_node)
chanx_chany_adjacent	check_route.c	/^static int chanx_chany_adjacent(int chanx_node,$/;"	p	file:	signature:(int chanx_node, int chany_node)
chanx_place_cost_fac	place.c	/^static float **chanx_place_cost_fac, **chany_place_cost_fac;$/;"	v	file:
chany_place_cost_fac	place.c	/^static float **chanx_place_cost_fac, **chany_place_cost_fac;$/;"	v	file:
check_adjacent	check_route.c	/^check_adjacent(int from_node,$/;"	f	file:	signature:(int from_node, int to_node)
check_adjacent	check_route.c	/^static boolean check_adjacent(int from_node,$/;"	p	file:	signature:(int from_node, int to_node)
check_all_tracks_reach_pins	rr_graph.c	/^check_all_tracks_reach_pins(t_type_ptr type,$/;"	f	file:	signature:(t_type_ptr type, int ****tracks_connected_to_pin, int nodes_per_chan, int Fc, enum e_pin_type ipin_or_opin)
check_all_tracks_reach_pins	rr_graph.c	/^static void check_all_tracks_reach_pins(t_type_ptr type,$/;"	p	file:	signature:(t_type_ptr type, int ****tracks_connected_to_pin, int nodes_per_chan, int Fc, enum e_pin_type ipin_or_opin)
check_connections_to_global_fb_pins	check_netlist.c	/^check_connections_to_global_fb_pins(int inet)$/;"	f	file:	signature:(int inet)
check_connections_to_global_fb_pins	check_netlist.c	/^static int check_connections_to_global_fb_pins(int inet);$/;"	p	file:	signature:(int inet)
check_fb_conn	check_netlist.c	/^check_fb_conn(int iblk,$/;"	f	file:	signature:(int iblk, int num_conn)
check_fb_conn	check_netlist.c	/^static int check_fb_conn(int iblk,$/;"	p	file:	signature:(int iblk, int num_conn)
check_fb_to_subblock_connections	check_netlist.c	/^check_fb_to_subblock_connections(int iblk,$/;"	f	file:	signature:(int iblk, t_subblock * subblock_inf, int num_subblocks, int *num_uses_of_fb_pin)
check_fb_to_subblock_connections	check_netlist.c	/^static int check_fb_to_subblock_connections(int iblk,$/;"	p	file:	signature:(int iblk, t_subblock * subblock_inf, int num_subblocks, int *num_uses_of_fb_pin)
check_for_duplicate_block_names	check_netlist.c	/^check_for_duplicate_block_names(void)$/;"	f	file:	signature:(void)
check_for_duplicate_block_names	check_netlist.c	/^static int check_for_duplicate_block_names(void);$/;"	p	file:	signature:(void)
check_for_multiple_sink_connections	check_netlist.c	/^check_for_multiple_sink_connections(void)$/;"	f	file:	signature:(void)
check_for_multiple_sink_connections	check_netlist.c	/^static void check_for_multiple_sink_connections(void);$/;"	p	file:	signature:(void)
check_internal_subblock_connections	check_netlist.c	/^check_internal_subblock_connections(t_subblock_data * subblock_data_ptr,$/;"	f	file:	signature:(t_subblock_data * subblock_data_ptr, int iblk, int **num_uses_of_sblk_opin)
check_internal_subblock_connections	check_netlist.c	/^static int check_internal_subblock_connections(t_subblock_data$/;"	p	file:	signature:(t_subblock_data * subblock_data_ptr, int iblk, int **num_uses_of_sblk_opin)
check_locally_used_fb_opins	check_route.c	/^check_locally_used_fb_opins(t_ivec ** fb_opins_used_locally,$/;"	f	file:	signature:(t_ivec ** fb_opins_used_locally, enum e_route_type route_type)
check_locally_used_fb_opins	check_route.c	/^static void check_locally_used_fb_opins(t_ivec ** fb_opins_used_locally,$/;"	p	file:	signature:(t_ivec ** fb_opins_used_locally, enum e_route_type route_type)
check_netlist	check_netlist.c	/^check_netlist(t_subblock_data * subblock_data_ptr)$/;"	f	signature:(t_subblock_data * subblock_data_ptr)
check_netlist	check_netlist.h	/^void check_netlist(t_subblock_data * subblock_data_ptr);$/;"	p	signature:(t_subblock_data * subblock_data_ptr)
check_node	check_rr_graph.c	/^check_node(int inode,$/;"	f	signature:(int inode, enum e_route_type route_type)
check_node	check_rr_graph.h	/^void check_node(int inode,$/;"	p	signature:(int inode, enum e_route_type route_type)
check_node_and_range	check_route.c	/^check_node_and_range(int inode,$/;"	f	file:	signature:(int inode, enum e_route_type route_type)
check_node_and_range	check_route.c	/^static void check_node_and_range(int inode,$/;"	p	file:	signature:(int inode, enum e_route_type route_type)
check_pass_transistors	check_rr_graph.c	/^check_pass_transistors(int from_node)$/;"	f	file:	signature:(int from_node)
check_pass_transistors	check_rr_graph.c	/^static void check_pass_transistors(int from_node);$/;"	p	file:	signature:(int from_node)
check_place	place.c	/^check_place(float bb_cost,$/;"	f	file:	signature:(float bb_cost, float timing_cost, int place_cost_type, int num_regions, enum e_place_algorithm place_algorithm, float delay_cost)
check_place	place.c	/^static void check_place(float bb_cost,$/;"	p	file:	signature:(float bb_cost, float timing_cost, int place_cost_type, int num_regions, enum e_place_algorithm place_algorithm, float delay_cost)
check_route	check_route.c	/^check_route(enum e_route_type route_type,$/;"	f	signature:(enum e_route_type route_type, int num_switch, t_ivec ** fb_opins_used_locally)
check_route	check_route.h	/^void check_route(enum e_route_type route_type,$/;"	p	signature:(enum e_route_type route_type, int num_switch, t_ivec ** fb_opins_used_locally)
check_rr_graph	check_rr_graph.c	/^check_rr_graph(IN t_graph_type graph_type,$/;"	f	signature:(IN t_graph_type graph_type, IN int num_types, IN t_type_ptr types, IN int nx, IN int ny, IN struct s_grid_tile **grid, IN int nodes_per_chan, IN int Fs, IN int num_seg_types, IN int num_switches, IN t_segment_inf * segment_inf, IN int global_route_switch, IN int delayless_switch, IN int wire_to_ipin_switch, t_seg_details * seg_details, int *Fc_in, int *Fc_out, t_ivec *** rr_node_indices, int *****opin_to_track_map, int *****ipin_to_track_map, t_ivec **** track_to_ipin_lookup, t_ivec *** switch_block_conn, boolean * perturb_ipins)
check_rr_graph	check_rr_graph.h	/^void check_rr_graph(IN t_graph_type graph_type,$/;"	p	signature:(IN t_graph_type graph_type, IN int num_types, IN t_type_ptr types, IN int nx, IN int ny, IN struct s_grid_tile **grid, IN int nodes_per_chan, IN int Fs, IN int num_seg_types, IN int num_switches, IN t_segment_inf * segment_inf, IN int global_route_switch, IN int delayless_switch, IN int wire_to_ipin_switch, t_seg_details * seg_details, int *Fc_in, int *Fc_out, t_ivec *** rr_node_indices, int *****opin_to_track_map, int *****ipin_to_track_map, t_ivec **** track_to_ipin_lookup, t_ivec *** switch_block_conn, boolean * perturb_ipins)
check_sink	check_route.c	/^check_sink(int inode,$/;"	f	file:	signature:(int inode, int inet, boolean * pin_done)
check_sink	check_route.c	/^static void check_sink(int inode,$/;"	p	file:	signature:(int inode, int inet, boolean * pin_done)
check_source	check_route.c	/^check_source(int inode,$/;"	f	file:	signature:(int inode, int inet)
check_source	check_route.c	/^static void check_source(int inode,$/;"	p	file:	signature:(int inode, int inet)
check_subblock_pin	check_netlist.c	/^check_subblock_pin(int fb_pin,$/;"	f	file:	signature:(int fb_pin, int min_val, int max_val, enum e_pin_type pin_type, int iblk, int isubblk, t_subblock * subblock_inf)
check_subblock_pin	check_netlist.c	/^static int check_subblock_pin(int fb_pin,$/;"	p	file:	signature:(int fb_pin, int min_val, int max_val, enum e_pin_type pin_type, int iblk, int isubblk, t_subblock * subblock_inf)
check_subblocks	check_netlist.c	/^check_subblocks(int iblk,$/;"	f	file:	signature:(int iblk, t_subblock_data * subblock_data_ptr, int *num_uses_of_fb_pin, int **num_uses_of_sblk_opin)
check_subblocks	check_netlist.c	/^static int check_subblocks(int iblk,$/;"	p	file:	signature:(int iblk, t_subblock_data * subblock_data_ptr, int *num_uses_of_fb_pin, int **num_uses_of_sblk_opin)
check_switch	check_route.c	/^check_switch(struct s_trace *tptr,$/;"	f	file:	signature:(struct s_trace *tptr, int num_switch)
check_switch	check_route.c	/^static void check_switch(struct s_trace *tptr,$/;"	p	file:	signature:(struct s_trace *tptr, int num_switch)
check_timing_graph	path_delay2.c	/^check_timing_graph(int num_const_gen,$/;"	f	signature:(int num_const_gen, int num_ff, int num_sinks)
check_timing_graph	path_delay2.h	/^void check_timing_graph(int num_const_gen,$/;"	p	signature:(int num_const_gen, int num_ff, int num_sinks)
child	ezxml.h	/^	ezxml_t child;		\/* head of sub tag list, NULL if none *\/$/;"	m	struct:ezxml	access:public
child	net_delay.c	/^    struct s_rc_node *child;$/;"	m	struct:s_linked_rc_edge	typeref:struct:s_linked_rc_edge::s_rc_node	file:	access:public
child	route_tree_timing.h	/^    struct s_rt_node *child;$/;"	m	struct:s_linked_rt_edge	typeref:struct:s_linked_rt_edge::s_rt_node	access:public
child_list	net_delay.c	/^	t_linked_rc_edge *child_list;$/;"	m	union:s_rc_node::__anon4	file:	access:public
child_list	route_tree_timing.h	/^	t_linked_rt_edge *child_list;$/;"	m	union:s_rt_node::__anon10	access:public
chunk_bytes_avail	rr_graph.c	/^static int chunk_bytes_avail = 0;$/;"	v	file:
chunk_next_avail_mem	rr_graph.c	/^static char *chunk_next_avail_mem = NULL;$/;"	v	file:
class_inf	vpr_types.h	/^    struct s_class *class_inf;	\/* [0..num_class-1] *\/$/;"	m	struct:s_type_descriptor	typeref:struct:s_type_descriptor::s_class	access:public
clb_grid	xml_arch.h	/^     struct s_clb_grid clb_grid;$/;"	m	struct:s_arch	typeref:struct:s_arch::s_clb_grid	access:public
clb_opins_used_locally	timing_place_lookup.c	/^static t_ivec **clb_opins_used_locally;$/;"	v	file:
clearscreen	graphics.c	/^clearscreen(void)$/;"	f	signature:(void)
clearscreen	graphics.h	/^void clearscreen(void);		\/* Erases the screen *\/$/;"	p	signature:(void)
clock	vpr_types.h	/^    int clock;$/;"	m	struct:s_subblock	access:public
close	ezxml.c	61;"	d	file:
close_graphics	graphics.c	/^close_graphics(void)$/;"	f	signature:(void)
close_graphics	graphics.h	/^void close_graphics(void);	\/* Closes X display      *\/$/;"	p	signature:(void)
close_postscript	graphics.c	/^close_postscript(void)$/;"	f	signature:(void)
close_postscript	graphics.h	/^void close_postscript(void);$/;"	p	signature:(void)
col_rel	vpr_types.h	/^    float col_rel;$/;"	m	struct:s_grid_loc_def	access:public
color_types	graphics.h	/^enum color_types$/;"	g
colors	graphics.c	/^static int colors[NUM_COLOR];$/;"	v	file:
comp_bb_cost	place.c	/^comp_bb_cost(int method,$/;"	f	file:	signature:(int method, int place_cost_type, int num_regions)
comp_bb_cost	place.c	/^static float comp_bb_cost(int method,$/;"	p	file:	signature:(int method, int place_cost_type, int num_regions)
comp_delta_td_cost	place.c	/^comp_delta_td_cost(int b_from,$/;"	f	file:	signature:(int b_from, int b_to, int num_of_pins, float *delta_timing, float *delta_delay)
comp_delta_td_cost	place.c	/^static void comp_delta_td_cost(int b_from,$/;"	p	file:	signature:(int b_from, int b_to, int num_of_pins, float *delta_timing, float *delta_delay)
comp_td_costs	place.c	/^comp_td_costs(float *timing_cost,$/;"	f	file:	signature:(float *timing_cost, float *connection_delay_sum)
comp_td_costs	place.c	/^static void comp_td_costs(float *timing_cost,$/;"	p	file:	signature:(float *timing_cost, float *connection_delay_sum)
comp_td_point_to_point_delay	place.c	/^comp_td_point_to_point_delay(int inet,$/;"	f	file:	signature:(int inet, int ipin)
comp_td_point_to_point_delay	place.c	/^static float comp_td_point_to_point_delay(int inet,$/;"	p	file:	signature:(int inet, int ipin)
comp_width	place_and_route.c	/^comp_width(t_chan * chan,$/;"	f	file:	signature:(t_chan * chan, float x, float separation)
comp_width	place_and_route.c	/^static float comp_width(t_chan * chan,$/;"	p	file:	signature:(t_chan * chan, float x, float separation)
compute_delay_lookup_tables	timing_place_lookup.c	/^compute_delay_lookup_tables(struct s_router_opts router_opts,$/;"	f	signature:(struct s_router_opts router_opts, struct s_det_routing_arch det_routing_arch, t_segment_inf * segment_inf, t_timing_inf timing_inf, t_chan_width_dist chan_width_dist, t_subblock_data subblock_data)
compute_delay_lookup_tables	timing_place_lookup.h	/^void compute_delay_lookup_tables(struct s_router_opts router_opts,$/;"	p	signature:(struct s_router_opts router_opts, struct s_det_routing_arch det_routing_arch, t_segment_inf * segment_inf, t_timing_inf timing_inf, t_chan_width_dist chan_width_dist, t_subblock_data subblock_data)
compute_delta_arrays	timing_place_lookup.c	/^compute_delta_arrays(struct s_router_opts router_opts,$/;"	f	file:	signature:(struct s_router_opts router_opts, struct s_det_routing_arch det_routing_arch, t_segment_inf * segment_inf, t_timing_inf timing_inf, int longest_length)
compute_delta_arrays	timing_place_lookup.c	/^static void compute_delta_arrays(struct s_router_opts router_opts,$/;"	p	file:	signature:(struct s_router_opts router_opts, struct s_det_routing_arch det_routing_arch, t_segment_inf * segment_inf, t_timing_inf timing_inf, int longest_length)
compute_delta_fb_to_fb	timing_place_lookup.c	/^compute_delta_fb_to_fb(struct s_router_opts router_opts,$/;"	f	file:	signature:(struct s_router_opts router_opts, struct s_det_routing_arch det_routing_arch, t_segment_inf * segment_inf, t_timing_inf timing_inf, int longest_length)
compute_delta_fb_to_fb	timing_place_lookup.c	/^static void compute_delta_fb_to_fb(struct s_router_opts router_opts,$/;"	p	file:	signature:(struct s_router_opts router_opts, struct s_det_routing_arch det_routing_arch, t_segment_inf * segment_inf, t_timing_inf timing_inf, int longest_length)
compute_delta_fb_to_io	timing_place_lookup.c	/^compute_delta_fb_to_io(struct s_router_opts router_opts,$/;"	f	file:	signature:(struct s_router_opts router_opts, struct s_det_routing_arch det_routing_arch, t_segment_inf * segment_inf, t_timing_inf timing_inf)
compute_delta_fb_to_io	timing_place_lookup.c	/^static void compute_delta_fb_to_io(struct s_router_opts router_opts,$/;"	p	file:	signature:(struct s_router_opts router_opts, struct s_det_routing_arch det_routing_arch, t_segment_inf * segment_inf, t_timing_inf timing_inf)
compute_delta_io_to_fb	timing_place_lookup.c	/^compute_delta_io_to_fb(struct s_router_opts router_opts,$/;"	f	file:	signature:(struct s_router_opts router_opts, struct s_det_routing_arch det_routing_arch, t_segment_inf * segment_inf, t_timing_inf timing_inf)
compute_delta_io_to_fb	timing_place_lookup.c	/^static void compute_delta_io_to_fb(struct s_router_opts router_opts,$/;"	p	file:	signature:(struct s_router_opts router_opts, struct s_det_routing_arch det_routing_arch, t_segment_inf * segment_inf, t_timing_inf timing_inf)
compute_delta_io_to_io	timing_place_lookup.c	/^compute_delta_io_to_io(struct s_router_opts router_opts,$/;"	f	file:	signature:(struct s_router_opts router_opts, struct s_det_routing_arch det_routing_arch, t_segment_inf * segment_inf, t_timing_inf timing_inf)
compute_delta_io_to_io	timing_place_lookup.c	/^static void compute_delta_io_to_io(struct s_router_opts router_opts,$/;"	p	file:	signature:(struct s_router_opts router_opts, struct s_det_routing_arch det_routing_arch, t_segment_inf * segment_inf, t_timing_inf timing_inf)
compute_net_pin_index_values	place.c	/^compute_net_pin_index_values()$/;"	f	file:
compute_net_pin_index_values	place.c	/^static void compute_net_pin_index_values(void);$/;"	p	file:	signature:(void)
compute_net_slacks	path_delay.c	/^compute_net_slacks(float **net_slack)$/;"	f	file:	signature:(float **net_slack)
compute_net_slacks	path_delay.c	/^static void compute_net_slacks(float **net_slack);$/;"	p	file:	signature:(float **net_slack)
constant_net_delay	ReadOptions.h	/^	float constant_net_delay;$/;"	m	struct:s_options	access:public
cont	util.c	/^static int cont;		\/* line continued? *\/$/;"	v	file:
cost	route_common.h	/^    float cost;$/;"	m	struct:s_heap	access:public
cost	vpr_types.h	/^    float cost;$/;"	m	struct:s_place_region	access:public
cost_index	vpr_types.h	/^    short cost_index;$/;"	m	struct:s_rr_node	access:public
cost_methods	place.c	/^enum cost_methods$/;"	g	file:
count	hash.h	/^    int count;$/;"	m	struct:s_hash	access:public
count_bidir_routing_transistors	rr_graph_area.c	/^count_bidir_routing_transistors(int num_switch,$/;"	f	signature:(int num_switch, float R_minW_nmos, float R_minW_pmos)
count_bidir_routing_transistors	rr_graph_area.c	/^static void count_bidir_routing_transistors(int num_switch,$/;"	p	file:	signature:(int num_switch, float R_minW_nmos, float R_minW_pmos)
count_connections	place.c	/^count_connections()$/;"	f	file:
count_connections	place.c	/^static int count_connections(void);$/;"	p	file:	signature:(void)
count_routing_transistors	rr_graph_area.c	/^count_routing_transistors(enum e_directionality directionality,$/;"	f	signature:(enum e_directionality directionality, int num_switch, t_segment_inf * segment_inf, float R_minW_nmos, float R_minW_pmos)
count_routing_transistors	rr_graph_area.h	/^void count_routing_transistors(enum e_directionality directionality,$/;"	p	signature:(enum e_directionality directionality, int num_switch, t_segment_inf * segment_inf, float R_minW_nmos, float R_minW_pmos)
count_unidir_routing_transistors	rr_graph_area.c	/^count_unidir_routing_transistors(t_segment_inf * segment_inf,$/;"	f	signature:(t_segment_inf * segment_inf, float R_minW_nmos, float R_minW_pmos)
count_unidir_routing_transistors	rr_graph_area.c	/^static void count_unidir_routing_transistors(t_segment_inf * segment_inf,$/;"	p	file:	signature:(t_segment_inf * segment_inf, float R_minW_nmos, float R_minW_pmos)
create_button	graphics.c	/^create_button(char *prev_button_text,$/;"	f	signature:(char *prev_button_text, char *button_text, void (*button_func) (void (*drawscreen) (void)))
create_button	graphics.h	/^void create_button(char *prev_button_text,$/;"	p	signature:(char *prev_button_text, char *button_text, void (*button_func) (void (*drawscreen) (void)))
criticality_exp	ReadOptions.h	/^	float criticality_exp;$/;"	m	struct:s_options	access:public
criticality_exp	vpr_types.h	/^    float criticality_exp;$/;"	m	struct:s_router_opts	access:public
cross_count	place.c	/^static const float cross_count[50] = {	\/* [0..49] *\/$/;"	v	file:
cur	ezxml.c	/^    ezxml_t cur;		\/* current xml tree insertion point *\/$/;"	m	struct:ezxml_root	file:	access:public
current_random	util.c	/^static unsigned int current_random = 0;$/;"	v	file:
currentcolor	graphics.c	/^static int currentcolor = BLACK;$/;"	v	file:
currentfontsize	graphics.c	/^static int currentfontsize = 10;$/;"	v	file:
currentlinestyle	graphics.c	/^static int currentlinestyle = SOLID;$/;"	v	file:
currentlinewidth	graphics.c	/^static int currentlinewidth = 0;$/;"	v	file:
data	util.h	/^    int data;$/;"	m	struct:s_linked_int	access:public
data_vptr	util.h	/^    void *data_vptr;$/;"	m	struct:s_linked_vptr	access:public
dc	vpr_types.h	/^    float dc;$/;"	m	struct:s_chan	access:public
default_message	draw.c	/^static char default_message[BUFSIZE];	\/* Default screen message on screen *\/$/;"	v	file:
delayless_switch	vpr_types.h	/^    short delayless_switch;$/;"	m	struct:s_det_routing_arch	access:public
delta_fb_to_fb	timing_place_lookup.c	/^float **delta_fb_to_fb;$/;"	v
delta_fb_to_io	timing_place_lookup.c	/^float **delta_fb_to_io;$/;"	v
delta_io_to_fb	timing_place_lookup.c	/^float **delta_io_to_fb;$/;"	v
delta_io_to_io	timing_place_lookup.c	/^float **delta_io_to_io;$/;"	v
deselect_all	draw.c	/^deselect_all(void)$/;"	f	file:	signature:(void)
deselect_all	draw.c	/^static void deselect_all(void);$/;"	p	file:	signature:(void)
destroy_button	graphics.c	/^destroy_button(char *button_text)$/;"	f	signature:(char *button_text)
destroy_button	graphics.h	/^void destroy_button(char *button_text);$/;"	p	signature:(char *button_text)
directed_search_add_source_to_heap	route_directed_search.c	/^directed_search_add_source_to_heap(int inet,$/;"	f	file:	signature:(int inet, int target_node, float astar_fac)
directed_search_add_source_to_heap	route_directed_search.c	/^static void directed_search_add_source_to_heap(int inet,$/;"	p	file:	signature:(int inet, int target_node, float astar_fac)
directed_search_expand_neighbours	route_directed_search.c	/^directed_search_expand_neighbours(struct s_heap *current,$/;"	f	file:	signature:(struct s_heap *current, int inet, float bend_cost, int target_node, float astar_fac)
directed_search_expand_neighbours	route_directed_search.c	/^static void directed_search_expand_neighbours(struct s_heap *current,$/;"	p	file:	signature:(struct s_heap *current, int inet, float bend_cost, int target_node, float astar_fac)
directed_search_expand_trace_segment	route_directed_search.c	/^directed_search_expand_trace_segment(struct s_trace *start_ptr,$/;"	f	file:	signature:(struct s_trace *start_ptr, int target_node, float astar_fac, int remaining_connections_to_sink)
directed_search_expand_trace_segment	route_directed_search.c	/^static void directed_search_expand_trace_segment(struct s_trace *start_ptr,$/;"	p	file:	signature:(struct s_trace *start_ptr, int target_node, float astar_fac, int remaining_connections_to_sink)
directed_search_route_net	route_directed_search.c	/^directed_search_route_net(int inet,$/;"	f	file:	signature:(int inet, float pres_fac, float astar_fac, float bend_cost, t_mst_edge ** mst)
directed_search_route_net	route_directed_search.c	/^static boolean directed_search_route_net(int inet,$/;"	p	file:	signature:(int inet, float pres_fac, float astar_fac, float bend_cost, t_mst_edge ** mst)
direction	vpr_types.h	/^    enum e_direction direction;	\/* UDSD by AY *\/$/;"	m	struct:s_rr_node	typeref:enum:s_rr_node::e_direction	access:public
direction	vpr_types.h	/^    enum e_direction direction;	\/* UDSD by AY *\/$/;"	m	struct:s_seg_details	typeref:enum:s_seg_details::e_direction	access:public
directionality	vpr_types.h	/^    enum e_directionality directionality;	\/* UDSD by AY *\/$/;"	m	struct:s_det_routing_arch	typeref:enum:s_det_routing_arch::e_directionality	access:public
directionality	vpr_types.h	/^    enum e_directionality directionality;$/;"	m	struct:s_segment_inf	typeref:enum:s_segment_inf::e_directionality	access:public
disp_type	graphics.c	/^static int disp_type;		\/* Selects SCREEN or POSTSCRIPT *\/$/;"	v	file:
display	graphics.c	/^static Display *display;$/;"	v	file:
display_height	graphics.c	/^static unsigned int display_width, display_height;	\/* screen size *\/$/;"	v	file:
display_width	graphics.c	/^static unsigned int display_width, display_height;	\/* screen size *\/$/;"	v	file:
distr	rr_graph.c	/^    int *distr;$/;"	m	struct:s_mux_size_distribution	file:	access:public
do_constant_net_delay_timing_analysis	path_delay.c	/^do_constant_net_delay_timing_analysis(t_timing_inf timing_inf,$/;"	f	signature:(t_timing_inf timing_inf, t_subblock_data subblock_data, float constant_net_delay_value)
do_constant_net_delay_timing_analysis	path_delay.h	/^void do_constant_net_delay_timing_analysis(t_timing_inf timing_inf,$/;"	p	signature:(t_timing_inf timing_inf, t_subblock_data subblock_data, float constant_net_delay_value)
draw_chanx_to_chanx_edge	draw.c	/^draw_chanx_to_chanx_edge(int from_node,$/;"	f	file:	signature:(int from_node, int from_track, int to_node, int to_track, short switch_type)
draw_chanx_to_chanx_edge	draw.c	/^static void draw_chanx_to_chanx_edge(int from_node,$/;"	p	file:	signature:(int from_node, int from_track, int to_node, int to_track, short switch_type)
draw_chanx_to_chany_edge	draw.c	/^draw_chanx_to_chany_edge(int chanx_node,$/;"	f	file:	signature:(int chanx_node, int chanx_track, int chany_node, int chany_track, enum e_edge_dir edge_dir, short switch_type)
draw_chanx_to_chany_edge	draw.c	/^static void draw_chanx_to_chany_edge(int chanx_node,$/;"	p	file:	signature:(int chanx_node, int chanx_track, int chany_node, int chany_track, enum e_edge_dir edge_dir, short switch_type)
draw_chany_to_chany_edge	draw.c	/^draw_chany_to_chany_edge(int from_node,$/;"	f	file:	signature:(int from_node, int from_track, int to_node, int to_track, short switch_type)
draw_chany_to_chany_edge	draw.c	/^static void draw_chany_to_chany_edge(int from_node,$/;"	p	file:	signature:(int from_node, int from_track, int to_node, int to_track, short switch_type)
draw_congestion	draw.c	/^draw_congestion(void)$/;"	f	file:	signature:(void)
draw_congestion	draw.c	/^static void draw_congestion(void);$/;"	p	file:	signature:(void)
draw_message	graphics.c	/^draw_message(void)$/;"	f	signature:(void)
draw_message	graphics.h	/^void draw_message(void);$/;"	p	signature:(void)
draw_pin_to_chan_edge	draw.c	/^draw_pin_to_chan_edge(int pin_node,$/;"	f	file:	signature:(int pin_node, int chan_node)
draw_pin_to_chan_edge	draw.c	/^static void draw_pin_to_chan_edge(int pin_node,$/;"	p	file:	signature:(int pin_node, int chan_node)
draw_route_type	draw.c	/^static enum e_route_type draw_route_type;$/;"	v	typeref:enum:e_route_type	file:
draw_rr	draw.c	/^draw_rr(void)$/;"	f	signature:(void)
draw_rr	draw.c	/^static void draw_rr(void);$/;"	p	file:	signature:(void)
draw_rr_chanx	draw.c	/^draw_rr_chanx(int inode,$/;"	f	file:	signature:(int inode, int itrack)
draw_rr_chanx	draw.c	/^static void draw_rr_chanx(int inode,$/;"	p	file:	signature:(int inode, int itrack)
draw_rr_chany	draw.c	/^draw_rr_chany(int inode,$/;"	f	file:	signature:(int inode, int itrack)
draw_rr_chany	draw.c	/^static void draw_rr_chany(int inode,$/;"	p	file:	signature:(int inode, int itrack)
draw_rr_edges	draw.c	/^draw_rr_edges(int inode)$/;"	f	file:	signature:(int inode)
draw_rr_edges	draw.c	/^static void draw_rr_edges(int from_node);$/;"	p	file:	signature:(int from_node)
draw_rr_pin	draw.c	/^draw_rr_pin(int inode,$/;"	f	file:	signature:(int inode, enum color_types color)
draw_rr_pin	draw.c	/^static void draw_rr_pin(int inode,$/;"	p	file:	signature:(int inode, enum color_types color)
draw_rr_switch	draw.c	/^draw_rr_switch(float from_x,$/;"	f	file:	signature:(float from_x, float from_y, float to_x, float to_y, boolean buffered)
draw_rr_switch	draw.c	/^static void draw_rr_switch(float from_x,$/;"	p	file:	signature:(float from_x, float from_y, float to_x, float to_y, boolean buffered)
draw_rr_toggle	draw.c	/^static enum e_draw_rr_toggle draw_rr_toggle = DRAW_NO_RR;	\/* UDSD by AY *\/$/;"	v	typeref:enum:e_draw_rr_toggle	file:
draw_triangle_along_line	draw.c	/^draw_triangle_along_line(float xend,$/;"	f	file:	signature:(float xend, float yend, float x1, float x2, float y1, float y2)
draw_triangle_along_line	draw.c	/^static void draw_triangle_along_line(float xend,$/;"	p	file:	signature:(float xend, float yend, float x1, float x2, float y1, float y2)
draw_x	draw.c	/^draw_x(float x,$/;"	f	file:	signature:(float x, float y, float size)
draw_x	draw.c	/^static void draw_x(float x,$/;"	p	file:	signature:(float x, float y, float size)
drawarc	graphics.c	/^drawarc(float xc,$/;"	f	signature:(float xc, float yc, float rad, float startang, float angextent)
drawarc	graphics.c	/^drawarc(float xcen,$/;"	f	signature:(float xcen, float ycen, float rad, float startang, float angextent)
drawarc	graphics.h	/^void drawarc(float xcen,$/;"	p	signature:(float xcen, float ycen, float rad, float startang, float angextent)
drawbut	graphics.c	/^drawbut(int bnum)$/;"	f	file:	signature:(int bnum)
drawline	graphics.c	/^drawline(float x1,$/;"	f	signature:(float x1, float y1, float x2, float y2)
drawline	graphics.h	/^void drawline(float x1,$/;"	p	signature:(float x1, float y1, float x2, float y2)
drawmenu	graphics.c	/^drawmenu(void)$/;"	f	file:	signature:(void)
drawnets	draw.c	/^drawnets(void)$/;"	f	file:	signature:(void)
drawnets	draw.c	/^static void drawnets(void);$/;"	p	file:	signature:(void)
drawplace	draw.c	/^drawplace(void)$/;"	f	file:	signature:(void)
drawplace	draw.c	/^static void drawplace(void);$/;"	p	file:	signature:(void)
drawrect	graphics.c	/^drawrect(float x1,$/;"	f	signature:(float x1, float y1, float x2, float y2)
drawrect	graphics.h	/^void drawrect(float x1,$/;"	p	signature:(float x1, float y1, float x2, float y2)
drawroute	draw.c	/^drawroute(enum e_draw_net_type draw_net_type)$/;"	f	file:	signature:(enum e_draw_net_type draw_net_type)
drawroute	draw.c	/^static void drawroute(enum e_draw_net_type draw_net_type);$/;"	p	file:	signature:(enum e_draw_net_type draw_net_type)
drawscreen	draw.c	/^drawscreen()$/;"	f	file:
drawscreen	draw.c	/^static void drawscreen(void);$/;"	p	file:	signature:(void)
drawtext	graphics.c	/^drawtext(float xc,$/;"	f	signature:(float xc, float yc, const char *text, float boundx)
drawtext	graphics.h	/^void drawtext(float xc,$/;"	p	signature:(float xc, float yc, const char *text, float boundx)
drivers	vpr_types.h	/^    enum e_drivers drivers;	\/* UDSD by AY *\/$/;"	m	struct:s_rr_node	typeref:enum:s_rr_node::e_drivers	access:public
drivers	vpr_types.h	/^    enum e_drivers drivers;	\/* UDSD by AY *\/$/;"	m	struct:s_seg_details	typeref:enum:s_seg_details::e_drivers	access:public
dummy_type_descriptors	timing_place_lookup.c	/^static t_type_descriptor dummy_type_descriptors[NUM_TYPES_USED];$/;"	v	file:
dump_rr_graph	rr_graph.c	/^dump_rr_graph(IN const char *file_name)$/;"	f	signature:(IN const char *file_name)
dump_rr_graph	rr_graph.h	/^void dump_rr_graph(IN const char *file_name);$/;"	p	signature:(IN const char *file_name)
dump_seg_details	rr_graph2.c	/^dump_seg_details(t_seg_details * seg_details,$/;"	f	signature:(t_seg_details * seg_details, int nodes_per_chan, char *fname)
dump_seg_details	rr_graph2.h	/^void dump_seg_details(t_seg_details * seg_details,$/;"	p	signature:(t_seg_details * seg_details, int nodes_per_chan, char *fname)
duplicate_pins	place.c	/^static int *duplicate_pins;$/;"	v	file:
e	ezxml.c	/^    char *e;			\/* end of work area *\/$/;"	m	struct:ezxml_root	file:	access:public
e_Fc_type	vpr_types.h	/^enum e_Fc_type$/;"	g
e_OptionArgToken	OptionTokens.h	/^enum e_OptionArgToken$/;"	g
e_OptionBaseToken	OptionTokens.h	/^enum e_OptionBaseToken$/;"	g
e_base_cost_type	vpr_types.h	/^enum e_base_cost_type$/;"	g
e_cost_indices	vpr_types.h	/^enum e_cost_indices$/;"	g
e_direction	vpr_types.h	/^enum e_direction$/;"	g
e_directionality	vpr_types.h	/^enum e_directionality$/;"	g
e_draw_net_type	draw.c	/^enum e_draw_net_type$/;"	g	file:
e_draw_rr_toggle	draw.c	/^enum e_draw_rr_toggle$/;"	g	file:
e_drivers	vpr_types.h	/^enum e_drivers$/;"	g
e_edge_dir	draw.c	/^enum e_edge_dir$/;"	g	file:
e_graph_type	rr_graph.h	/^enum e_graph_type$/;"	g
e_grid_loc_type	vpr_types.h	/^enum e_grid_loc_type$/;"	g
e_operation	vpr_types.h	/^enum e_operation$/;"	g
e_pad_loc_type	vpr_types.h	/^enum e_pad_loc_type$/;"	g
e_pin_type	vpr_types.h	/^enum e_pin_type$/;"	g
e_place_algorithm	vpr_types.h	/^enum e_place_algorithm$/;"	g
e_route_type	vpr_types.h	/^enum e_route_type$/;"	g
e_router_algorithm	vpr_types.h	/^enum e_router_algorithm$/;"	g
e_rr_type	vpr_types.h	/^typedef enum e_rr_type$/;"	g
e_side	vpr_types.h	/^enum e_side$/;"	g
e_stat	vpr_types.h	/^enum e_stat$/;"	g
e_subblock_pin_type	path_delay.c	/^enum e_subblock_pin_type$/;"	g	file:
e_switch_block_type	vpr_types.h	/^enum e_switch_block_type$/;"	g
echo_block_info	ray_block_classify.c	/^void echo_block_info(char* file, int** b2b_connections, int* block_associations) $/;"	f	signature:(char* file, int** b2b_connections, int* block_associations)
echo_block_info	ray_block_classify.h	/^void echo_block_info(char* file, int** b2b_connections, int* block_associations); $/;"	p	signature:(char* file, int** b2b_connections, int* block_associations)
edge	rr_graph_util.h	/^    int edge;$/;"	m	struct:s_linked_edge	access:public
edges	vpr_types.h	/^    int *edges;$/;"	m	struct:s_rr_node	access:public
empty_heap	route_common.c	/^empty_heap(void)$/;"	f	signature:(void)
empty_heap	route_common.h	/^void empty_heap(void);$/;"	p	signature:(void)
enable_timing_computations	vpr_types.h	/^    boolean enable_timing_computations;$/;"	m	struct:s_placer_opts	access:public
end_track	vpr_types.h	/^    int end_track;		\/* UDSD by AY *\/$/;"	m	struct:s_seg_details	access:public
ent	ezxml.c	/^    char **ent;			\/* general entities (ampersand sequences) *\/$/;"	m	struct:ezxml_root	file:	access:public
err	ezxml.c	/^    char err[EZXML_ERRL];	\/* error string *\/$/;"	m	struct:ezxml_root	file:	access:public
event_loop	graphics.c	/^event_loop(void (*act_on_button) (float x,$/;"	f	signature:(void (*act_on_button) (float x, float y), void (*drawscreen) (void))
event_loop	graphics.h	/^void event_loop(void (*act_on_button) (float x,$/;"	p	signature:(void (*act_on_button) (float x, float y), void (*drawscreen) (void))
exit_crit	place.c	/^exit_crit(float t,$/;"	f	file:	signature:(float t, float cost, struct s_annealing_sched annealing_sched)
exit_crit	place.c	/^static int exit_crit(float t,$/;"	p	file:	signature:(float t, float cost, struct s_annealing_sched annealing_sched)
exit_t	vpr_types.h	/^    float exit_t;$/;"	m	struct:s_annealing_sched	access:public
ezxml	ezxml.h	/^    struct ezxml$/;"	s
ezxml::attr	ezxml.h	/^	char **attr;		\/* tag attributes { name, value, name, value, ... NULL } *\/$/;"	m	struct:ezxml	access:public
ezxml::child	ezxml.h	/^	ezxml_t child;		\/* head of sub tag list, NULL if none *\/$/;"	m	struct:ezxml	access:public
ezxml::flags	ezxml.h	/^	short flags;		\/* additional information *\/$/;"	m	struct:ezxml	access:public
ezxml::name	ezxml.h	/^	char *name;		\/* tag name *\/$/;"	m	struct:ezxml	access:public
ezxml::next	ezxml.h	/^	ezxml_t next;		\/* next tag with same name in this section at this depth *\/$/;"	m	struct:ezxml	access:public
ezxml::off	ezxml.h	/^	size_t off;		\/* tag offset from start of parent tag character content *\/$/;"	m	struct:ezxml	access:public
ezxml::ordered	ezxml.h	/^	ezxml_t ordered;	\/* next tag, same section and depth, in original order *\/$/;"	m	struct:ezxml	access:public
ezxml::parent	ezxml.h	/^	ezxml_t parent;		\/* parent tag, NULL if current tag is root tag *\/$/;"	m	struct:ezxml	access:public
ezxml::sibling	ezxml.h	/^	ezxml_t sibling;	\/* next tag with different name in same section and depth *\/$/;"	m	struct:ezxml	access:public
ezxml::txt	ezxml.h	/^	char *txt;		\/* tag character content, empty string if none *\/$/;"	m	struct:ezxml	access:public
ezxml_add_child	ezxml.c	/^ezxml_add_child(ezxml_t xml,$/;"	f	signature:(ezxml_t xml, const char *name, size_t off)
ezxml_add_child	ezxml.h	/^    ezxml_t ezxml_add_child(ezxml_t xml,$/;"	p	signature:(ezxml_t xml, const char *name, size_t off)
ezxml_add_child_d	ezxml.h	139;"	d
ezxml_ampencode	ezxml.c	/^ezxml_ampencode(const char *s,$/;"	f	signature:(const char *s, size_t len, char **dst, size_t * dlen, size_t * max, short a)
ezxml_attr	ezxml.c	/^ezxml_attr(ezxml_t xml,$/;"	f	signature:(ezxml_t xml, const char *attr)
ezxml_attr	ezxml.h	/^    const char *ezxml_attr(ezxml_t xml,$/;"	p	signature:(ezxml_t xml, const char *attr)
ezxml_char_content	ezxml.c	/^ezxml_char_content(ezxml_root_t root,$/;"	f	signature:(ezxml_root_t root, char *s, size_t len, char t)
ezxml_child	ezxml.c	/^ezxml_child(ezxml_t xml,$/;"	f	signature:(ezxml_t xml, const char *name)
ezxml_child	ezxml.h	/^    ezxml_t ezxml_child(ezxml_t xml,$/;"	p	signature:(ezxml_t xml, const char *name)
ezxml_close_tag	ezxml.c	/^ezxml_close_tag(ezxml_root_t root,$/;"	f	signature:(ezxml_root_t root, char *name, char *s)
ezxml_cut	ezxml.c	/^ezxml_cut(ezxml_t xml)$/;"	f	signature:(ezxml_t xml)
ezxml_cut	ezxml.h	/^    ezxml_t ezxml_cut(ezxml_t xml);$/;"	p	signature:(ezxml_t xml)
ezxml_decode	ezxml.c	/^ezxml_decode(char *s,$/;"	f	signature:(char *s, char **ent, char t)
ezxml_ent_ok	ezxml.c	/^ezxml_ent_ok(char *name,$/;"	f	signature:(char *name, char *s, char **ent)
ezxml_err	ezxml.c	/^ezxml_err(ezxml_root_t root,$/;"	f	signature:(ezxml_root_t root, char *s, const char *err, ...)
ezxml_error	ezxml.c	/^ezxml_error(ezxml_t xml)$/;"	f	signature:(ezxml_t xml)
ezxml_error	ezxml.h	/^    const char *ezxml_error(ezxml_t xml);$/;"	p	signature:(ezxml_t xml)
ezxml_free	ezxml.c	/^ezxml_free(ezxml_t xml)$/;"	f	signature:(ezxml_t xml)
ezxml_free	ezxml.h	/^    void ezxml_free(ezxml_t xml);$/;"	p	signature:(ezxml_t xml)
ezxml_free_attr	ezxml.c	/^ezxml_free_attr(char **attr)$/;"	f	signature:(char **attr)
ezxml_get	ezxml.c	/^ezxml_get(ezxml_t xml,$/;"	f	signature:(ezxml_t xml, ...)
ezxml_get	ezxml.h	/^    ezxml_t ezxml_get(ezxml_t xml,$/;"	p	signature:(ezxml_t xml, ...)
ezxml_idx	ezxml.c	/^ezxml_idx(ezxml_t xml,$/;"	f	signature:(ezxml_t xml, int idx)
ezxml_idx	ezxml.h	/^    ezxml_t ezxml_idx(ezxml_t xml,$/;"	p	signature:(ezxml_t xml, int idx)
ezxml_insert	ezxml.c	/^ezxml_insert(ezxml_t xml,$/;"	f	signature:(ezxml_t xml, ezxml_t dest, size_t off)
ezxml_insert	ezxml.h	/^    ezxml_t ezxml_insert(ezxml_t xml,$/;"	p	signature:(ezxml_t xml, ezxml_t dest, size_t off)
ezxml_internal_dtd	ezxml.c	/^ezxml_internal_dtd(ezxml_root_t root,$/;"	f	signature:(ezxml_root_t root, char *s, size_t len)
ezxml_move	ezxml.h	174;"	d
ezxml_name	ezxml.h	93;"	d
ezxml_new	ezxml.c	/^ezxml_new(const char *name)$/;"	f	signature:(const char *name)
ezxml_new	ezxml.h	/^    ezxml_t ezxml_new(const char *name);$/;"	p	signature:(const char *name)
ezxml_new_d	ezxml.h	130;"	d
ezxml_next	ezxml.h	85;"	d
ezxml_open_tag	ezxml.c	/^ezxml_open_tag(ezxml_root_t root,$/;"	f	signature:(ezxml_root_t root, char *name, char **attr)
ezxml_parse_fd	ezxml.c	/^ezxml_parse_fd(int fd)$/;"	f	signature:(int fd)
ezxml_parse_fd	ezxml.h	/^    ezxml_t ezxml_parse_fd(int fd);$/;"	p	signature:(int fd)
ezxml_parse_file	ezxml.c	/^ezxml_parse_file(const char *file)$/;"	f	signature:(const char *file)
ezxml_parse_file	ezxml.h	/^    ezxml_t ezxml_parse_file(const char *file);$/;"	p	signature:(const char *file)
ezxml_parse_fp	ezxml.c	/^ezxml_parse_fp(FILE * fp)$/;"	f	signature:(FILE * fp)
ezxml_parse_fp	ezxml.h	/^    ezxml_t ezxml_parse_fp(FILE * fp);$/;"	p	signature:(FILE * fp)
ezxml_parse_str	ezxml.c	/^ezxml_parse_str(char *s,$/;"	f	signature:(char *s, size_t len)
ezxml_parse_str	ezxml.h	/^    ezxml_t ezxml_parse_str(char *s,$/;"	p	signature:(char *s, size_t len)
ezxml_pi	ezxml.c	/^ezxml_pi(ezxml_t xml,$/;"	f	signature:(ezxml_t xml, const char *target)
ezxml_pi	ezxml.h	/^    const char **ezxml_pi(ezxml_t xml,$/;"	p	signature:(ezxml_t xml, const char *target)
ezxml_proc_inst	ezxml.c	/^ezxml_proc_inst(ezxml_root_t root,$/;"	f	signature:(ezxml_root_t root, char *s, size_t len)
ezxml_remove	ezxml.h	177;"	d
ezxml_root	ezxml.c	/^struct ezxml_root$/;"	s	file:
ezxml_root::attr	ezxml.c	/^    char ***attr;		\/* default attributes *\/$/;"	m	struct:ezxml_root	file:	access:public
ezxml_root::cur	ezxml.c	/^    ezxml_t cur;		\/* current xml tree insertion point *\/$/;"	m	struct:ezxml_root	file:	access:public
ezxml_root::e	ezxml.c	/^    char *e;			\/* end of work area *\/$/;"	m	struct:ezxml_root	file:	access:public
ezxml_root::ent	ezxml.c	/^    char **ent;			\/* general entities (ampersand sequences) *\/$/;"	m	struct:ezxml_root	file:	access:public
ezxml_root::err	ezxml.c	/^    char err[EZXML_ERRL];	\/* error string *\/$/;"	m	struct:ezxml_root	file:	access:public
ezxml_root::len	ezxml.c	/^    size_t len;			\/* length of allocated memory for mmap, -1 for malloc *\/$/;"	m	struct:ezxml_root	file:	access:public
ezxml_root::m	ezxml.c	/^    char *m;			\/* original xml string *\/$/;"	m	struct:ezxml_root	file:	access:public
ezxml_root::pi	ezxml.c	/^    char ***pi;			\/* processing instructions *\/$/;"	m	struct:ezxml_root	file:	access:public
ezxml_root::s	ezxml.c	/^    char *s;			\/* start of work area *\/$/;"	m	struct:ezxml_root	file:	access:public
ezxml_root::standalone	ezxml.c	/^    short standalone;		\/* non-zero if <?xml standalone="yes"?> *\/$/;"	m	struct:ezxml_root	file:	access:public
ezxml_root::u	ezxml.c	/^    char *u;			\/* UTF-8 conversion of string if original was UTF-16 *\/$/;"	m	struct:ezxml_root	file:	access:public
ezxml_root::xml	ezxml.c	/^    struct ezxml xml;		\/* is a super-struct built on top of ezxml struct *\/$/;"	m	struct:ezxml_root	typeref:struct:ezxml_root::ezxml	file:	access:public
ezxml_root_t	ezxml.c	/^typedef struct ezxml_root *ezxml_root_t;$/;"	t	typeref:struct:ezxml_root	file:
ezxml_set_attr	ezxml.c	/^ezxml_set_attr(ezxml_t xml,$/;"	f	signature:(ezxml_t xml, const char *name, const char *value)
ezxml_set_attr	ezxml.h	/^    ezxml_t ezxml_set_attr(ezxml_t xml,$/;"	p	signature:(ezxml_t xml, const char *name, const char *value)
ezxml_set_attr_d	ezxml.h	157;"	d
ezxml_set_flag	ezxml.c	/^ezxml_set_flag(ezxml_t xml,$/;"	f	signature:(ezxml_t xml, short flag)
ezxml_set_flag	ezxml.h	/^    ezxml_t ezxml_set_flag(ezxml_t xml,$/;"	p	signature:(ezxml_t xml, short flag)
ezxml_set_txt	ezxml.c	/^ezxml_set_txt(ezxml_t xml,$/;"	f	signature:(ezxml_t xml, const char *txt)
ezxml_set_txt	ezxml.h	/^    ezxml_t ezxml_set_txt(ezxml_t xml,$/;"	p	signature:(ezxml_t xml, const char *txt)
ezxml_set_txt_d	ezxml.h	147;"	d
ezxml_str2utf8	ezxml.c	/^ezxml_str2utf8(char **s,$/;"	f	signature:(char **s, size_t * len)
ezxml_t	ezxml.h	/^    typedef struct ezxml *ezxml_t;$/;"	t	typeref:struct:ezxml
ezxml_toxml	ezxml.c	/^ezxml_toxml(ezxml_t xml)$/;"	f	signature:(ezxml_t xml)
ezxml_toxml	ezxml.h	/^    char *ezxml_toxml(ezxml_t xml);$/;"	p	signature:(ezxml_t xml)
ezxml_toxml_r	ezxml.c	/^ezxml_toxml_r(ezxml_t xml,$/;"	f	signature:(ezxml_t xml, char **s, size_t * len, size_t * max, size_t start, char ***attr)
ezxml_txt	ezxml.h	96;"	d
ezxml_vget	ezxml.c	/^ezxml_vget(ezxml_t xml,$/;"	f	signature:(ezxml_t xml, va_list ap)
fan_in	vpr_types.h	/^    short fan_in;$/;"	m	struct:s_rr_node	access:public
fc	place_and_route.h	/^    int fc;			\/* at this fc *\/$/;"	m	struct:s_fmap_cell	access:public
fcn	graphics.c	/^    void (*fcn) (void (*drawscreen) (void));$/;"	m	struct:__anon5	file:	access:public
feasible_routing	route_common.c	/^feasible_routing(void)$/;"	f	signature:(void)
feasible_routing	route_export.h	/^boolean feasible_routing(void);$/;"	p	signature:(void)
fillarc	graphics.c	/^fillarc(float xc,$/;"	f	signature:(float xc, float yc, float rad, float startang, float angextent)
fillarc	graphics.c	/^fillarc(float xcen,$/;"	f	signature:(float xcen, float ycen, float rad, float startang, float angextent)
fillarc	graphics.h	/^void fillarc(float xcen,$/;"	p	signature:(float xcen, float ycen, float rad, float startang, float angextent)
fillpoly	graphics.c	/^fillpoly(t_point * points,$/;"	f	signature:(t_point * points, int npoints)
fillpoly	graphics.h	/^void fillpoly(t_point * points,$/;"	p	signature:(t_point * points, int npoints)
fillrect	graphics.c	/^fillrect(float x1,$/;"	f	signature:(float x1, float y1, float x2, float y2)
fillrect	graphics.h	/^void fillrect(float x1,$/;"	p	signature:(float x1, float y1, float x2, float y2)
find_affected_nets	place.c	/^find_affected_nets(int *nets_to_update,$/;"	f	file:	signature:(int *nets_to_update, int *net_block_moved, int b_from, int b_to, int num_of_pins)
find_affected_nets	place.c	/^static int find_affected_nets(int *nets_to_update,$/;"	p	file:	signature:(int *nets_to_update, int *net_block_moved, int b_from, int b_to, int num_of_pins)
find_label_of_track	rr_graph2.c	/^find_label_of_track(int *wire_mux_on_track,$/;"	f	file:	signature:(int *wire_mux_on_track, int num_wire_muxes, int from_track)
find_label_of_track	rr_graph2.c	/^static int find_label_of_track(int *wire_mux_on_track,$/;"	p	file:	signature:(int *wire_mux_on_track, int num_wire_muxes, int from_track)
find_to	place.c	/^find_to(int x_from,$/;"	f	file:	signature:(int x_from, int y_from, t_type_ptr type, float rlim, int *x_lookup, int *x_to, int *y_to)
find_to	place.c	/^static boolean find_to(int x_from,$/;"	p	file:	signature:(int x_from, int y_from, t_type_ptr type, float rlim, int *x_lookup, int *x_to, int *y_to)
find_type_col	SetupVPR.c	/^find_type_col(IN int x)$/;"	f	file:	signature:(IN int x)
find_type_col	SetupVPR.c	/^static t_type_ptr find_type_col(IN int x);$/;"	p	file:	signature:(IN int x)
first_iter_pres_fac	ReadOptions.h	/^	float first_iter_pres_fac;$/;"	m	struct:s_options	access:public
first_iter_pres_fac	vpr_types.h	/^    float first_iter_pres_fac;$/;"	m	struct:s_router_opts	access:public
fixed_channel_width	vpr_types.h	/^    int fixed_channel_width;$/;"	m	struct:s_router_opts	access:public
flags	ezxml.h	/^	short flags;		\/* additional information *\/$/;"	m	struct:ezxml	access:public
flushinput	graphics.c	/^flushinput(void)$/;"	f	signature:(void)
flushinput	graphics.h	/^void flushinput(void);		\/* Empties event queue *\/$/;"	p	signature:(void)
font_info	graphics.c	/^static XFontStruct *font_info[MAX_FONT_SIZE + 1];	\/* Data for each size *\/$/;"	v	file:
font_is_loaded	graphics.c	/^static int font_is_loaded[MAX_FONT_SIZE + 1];	\/* 1: loaded, 0: not  *\/$/;"	v	file:
force_setcolor	graphics.c	/^force_setcolor(int cindex)$/;"	f	file:	signature:(int cindex)
force_setfontsize	graphics.c	/^force_setfontsize(int pointsize)$/;"	f	file:	signature:(int pointsize)
force_setlinestyle	graphics.c	/^force_setlinestyle(int linestyle)$/;"	f	file:	signature:(int linestyle)
force_setlinewidth	graphics.c	/^force_setlinewidth(int linewidth)$/;"	f	file:	signature:(int linewidth)
fptr	vpr_types.h	/^    float *fptr;$/;"	m	struct:s_linked_f_pointer	access:public
frac_cb	vpr_types.h	/^    float frac_cb;$/;"	m	struct:s_segment_inf	access:public
frac_sb	vpr_types.h	/^    float frac_sb;$/;"	m	struct:s_segment_inf	access:public
freeArch	main.c	/^static void freeArch(t_arch* Arch)$/;"	f	file:	signature:(t_arch* Arch)
freeArch	main.c	/^static void freeArch(t_arch* Arch);$/;"	p	file:	signature:(t_arch* Arch)
freeGrid	SetupVPR.c	/^freeGrid()$/;"	f	file:
freeGrid	SetupVPR.c	/^static void freeGrid();$/;"	p	file:
free_and_reset_internal_structures	timing_place_lookup.c	/^free_and_reset_internal_structures(struct s_net *original_net,$/;"	f	file:	signature:(struct s_net *original_net, struct s_block *original_block, int original_num_nets, int original_num_blocks)
free_and_reset_internal_structures	timing_place_lookup.c	/^static void free_and_reset_internal_structures(struct s_net *original_net,$/;"	p	file:	signature:(struct s_net *original_net, struct s_block *original_block, int original_num_nets, int original_num_blocks)
free_chunk_memory	util.c	/^free_chunk_memory(struct s_linked_vptr *chunk_ptr_head)$/;"	f	signature:(struct s_linked_vptr *chunk_ptr_head)
free_chunk_memory	util.h	/^void free_chunk_memory(struct s_linked_vptr *chunk_ptr_head);$/;"	p	signature:(struct s_linked_vptr *chunk_ptr_head)
free_crit	timing_place.c	/^free_crit(struct s_linked_vptr **chunk_list_head_ptr)$/;"	f	file:	signature:(struct s_linked_vptr **chunk_list_head_ptr)
free_crit	timing_place.c	/^static void free_crit(struct s_linked_vptr **chunk_list_head_ptr);$/;"	p	file:	signature:(struct s_linked_vptr **chunk_list_head_ptr)
free_delta_arrays	timing_place_lookup.c	/^free_delta_arrays(void)$/;"	f	file:	signature:(void)
free_delta_arrays	timing_place_lookup.c	/^static void free_delta_arrays(void);$/;"	p	file:	signature:(void)
free_edge_list_head	rr_graph2.c	/^t_linked_edge *free_edge_list_head = NULL;$/;"	v
free_fanout_counts	path_delay.c	/^free_fanout_counts(int **num_uses_of_fb_ipin,$/;"	f	file:	signature:(int **num_uses_of_fb_ipin, int ***num_uses_of_sblk_opin)
free_fanout_counts	path_delay.c	/^static void free_fanout_counts(int **num_uses_of_fb_ipin,$/;"	p	file:	signature:(int **num_uses_of_fb_ipin, int ***num_uses_of_sblk_opin)
free_fast_cost_update_structs	place.c	/^free_fast_cost_update_structs(void)$/;"	f	file:	signature:(void)
free_fast_cost_update_structs	place.c	/^static void free_fast_cost_update_structs(void);$/;"	p	file:	signature:(void)
free_hash_table	hash.c	/^free_hash_table(struct s_hash **hash_table)$/;"	f	signature:(struct s_hash **hash_table)
free_hash_table	hash.h	/^void free_hash_table(struct s_hash **hash_table);$/;"	p	signature:(struct s_hash **hash_table)
free_heap_data	route_common.c	/^free_heap_data(struct s_heap *hptr)$/;"	f	signature:(struct s_heap *hptr)
free_heap_data	route_common.h	/^void free_heap_data(struct s_heap *hptr);$/;"	p	signature:(struct s_heap *hptr)
free_int_list	util.c	/^free_int_list(t_linked_int ** int_list_head_ptr)$/;"	f	signature:(t_linked_int ** int_list_head_ptr)
free_int_list	util.h	/^void free_int_list(t_linked_int ** int_list_head_ptr);$/;"	p	signature:(t_linked_int ** int_list_head_ptr)
free_ivec_matrix	util.c	/^free_ivec_matrix(struct s_ivec **ivec_matrix,$/;"	f	signature:(struct s_ivec **ivec_matrix, int nrmin, int nrmax, int ncmin, int ncmax)
free_ivec_matrix	util.h	/^void free_ivec_matrix(struct s_ivec **ivec_matrix,$/;"	p	signature:(struct s_ivec **ivec_matrix, int nrmin, int nrmax, int ncmin, int ncmax)
free_ivec_matrix3	util.c	/^free_ivec_matrix3(struct s_ivec ***ivec_matrix3,$/;"	f	signature:(struct s_ivec ***ivec_matrix3, int nrmin, int nrmax, int ncmin, int ncmax, int ndmin, int ndmax)
free_ivec_matrix3	util.h	/^void free_ivec_matrix3(struct s_ivec ***ivec_matrix3,$/;"	p	signature:(struct s_ivec ***ivec_matrix3, int nrmin, int nrmax, int ncmin, int ncmax, int ndmin, int ndmax)
free_ivec_vector	util.c	/^free_ivec_vector(struct s_ivec *ivec_vector,$/;"	f	signature:(struct s_ivec *ivec_vector, int nrmin, int nrmax)
free_ivec_vector	util.h	/^void free_ivec_vector(struct s_ivec *ivec_vector,$/;"	p	signature:(struct s_ivec *ivec_vector, int nrmin, int nrmax)
free_linked_edge_soft	rr_graph_util.h	/^void free_linked_edge_soft(t_linked_edge * edge_ptr,$/;"	p	signature:(t_linked_edge * edge_ptr, t_linked_edge ** free_list_head_ptr)
free_linked_rc_edge	net_delay.c	/^free_linked_rc_edge(t_linked_rc_edge * rc_edge,$/;"	f	file:	signature:(t_linked_rc_edge * rc_edge, t_linked_rc_edge ** rc_edge_free_list_ptr)
free_linked_rc_edge	net_delay.c	/^static void free_linked_rc_edge(t_linked_rc_edge * rc_edge,$/;"	p	file:	signature:(t_linked_rc_edge * rc_edge, t_linked_rc_edge ** rc_edge_free_list_ptr)
free_linked_rt_edge	route_tree_timing.c	/^free_linked_rt_edge(t_linked_rt_edge * rt_edge)$/;"	f	file:	signature:(t_linked_rt_edge * rt_edge)
free_linked_rt_edge	route_tree_timing.c	/^static void free_linked_rt_edge(t_linked_rt_edge * rt_edge);$/;"	p	file:	signature:(t_linked_rt_edge * rt_edge)
free_lookups_and_criticalities	timing_place.c	/^free_lookups_and_criticalities(float ***net_delay,$/;"	f	signature:(float ***net_delay, float ***net_slack)
free_lookups_and_criticalities	timing_place.h	/^void free_lookups_and_criticalities(float ***net_delay,$/;"	p	signature:(float ***net_delay, float ***net_slack)
free_matrix	util.c	/^free_matrix(void *vptr,$/;"	f	signature:(void *vptr, int nrmin, int nrmax, int ncmin, size_t elsize)
free_matrix	util.h	/^void free_matrix(void *vptr,$/;"	p	signature:(void *vptr, int nrmin, int nrmax, int ncmin, size_t elsize)
free_matrix3	util.c	/^free_matrix3(void *vptr,$/;"	f	signature:(void *vptr, int nrmin, int nrmax, int ncmin, int ncmax, int ndmin, size_t elsize)
free_matrix3	util.h	/^void free_matrix3(void *vptr,$/;"	p	signature:(void *vptr, int nrmin, int nrmax, int ncmin, int ncmax, int ndmin, size_t elsize)
free_matrix4	util.c	/^free_matrix4(void *vptr,$/;"	f	signature:(void *vptr, int nrmin, int nrmax, int ncmin, int ncmax, int ndmin, int ndmax, int nemin, size_t elsize)
free_matrix4	util.h	/^void free_matrix4(void *vptr,$/;"	p	signature:(void *vptr, int nrmin, int nrmax, int ncmin, int ncmax, int ndmin, int ndmax, int nemin, size_t elsize)
free_net_delay	net_delay.c	/^free_net_delay(float **net_delay,$/;"	f	signature:(float **net_delay, struct s_linked_vptr **chunk_list_head_ptr)
free_net_delay	net_delay.h	/^void free_net_delay(float **net_delay,$/;"	p	signature:(float **net_delay, struct s_linked_vptr **chunk_list_head_ptr)
free_pin_mappings	path_delay.c	/^free_pin_mappings(int **block_pin_to_tnode,$/;"	f	file:	signature:(int **block_pin_to_tnode, int ****snode_block_pin_to_tnode, int *num_subblocks_per_block)
free_pin_mappings	path_delay.c	/^static void free_pin_mappings(int **block_pin_to_tnode,$/;"	p	file:	signature:(int **block_pin_to_tnode, int ****snode_block_pin_to_tnode, int *num_subblocks_per_block)
free_place_lookup_structs	timing_place_lookup.c	/^free_place_lookup_structs(void)$/;"	f	signature:(void)
free_place_lookup_structs	timing_place_lookup.h	/^void free_place_lookup_structs(void);$/;"	p	signature:(void)
free_place_regions	place.c	/^free_place_regions(int num_regions)$/;"	f	file:	signature:(int num_regions)
free_place_regions	place.c	/^static void free_place_regions(int num_regions);$/;"	p	file:	signature:(int num_regions)
free_placement_structs	place.c	/^free_placement_structs(int place_cost_type,$/;"	f	file:	signature:(int place_cost_type, int num_regions, float **old_region_occ_x, float **old_region_occ_y, struct s_placer_opts placer_opts)
free_placement_structs	place.c	/^static void free_placement_structs(int place_cost_type,$/;"	p	file:	signature:(int place_cost_type, int num_regions, float **old_region_occ_x, float **old_region_occ_y, struct s_placer_opts placer_opts)
free_rc_edge_free_list	net_delay.c	/^free_rc_edge_free_list(t_linked_rc_edge * rc_edge_free_list)$/;"	f	file:	signature:(t_linked_rc_edge * rc_edge_free_list)
free_rc_edge_free_list	net_delay.c	/^static void free_rc_edge_free_list(t_linked_rc_edge * rc_edge_free_list);$/;"	p	file:	signature:(t_linked_rc_edge * rc_edge_free_list)
free_rc_node	net_delay.c	/^free_rc_node(t_rc_node * rc_node,$/;"	f	file:	signature:(t_rc_node * rc_node, t_rc_node ** rc_node_free_list_ptr)
free_rc_node	net_delay.c	/^static void free_rc_node(t_rc_node * rc_node,$/;"	p	file:	signature:(t_rc_node * rc_node, t_rc_node ** rc_node_free_list_ptr)
free_rc_node_free_list	net_delay.c	/^free_rc_node_free_list(t_rc_node * rc_node_free_list)$/;"	f	file:	signature:(t_rc_node * rc_node_free_list)
free_rc_node_free_list	net_delay.c	/^static void free_rc_node_free_list(t_rc_node * rc_node_free_list);$/;"	p	file:	signature:(t_rc_node * rc_node_free_list)
free_rc_tree	net_delay.c	/^free_rc_tree(t_rc_node * rc_root,$/;"	f	file:	signature:(t_rc_node * rc_root, t_rc_node ** rc_node_free_list_ptr, t_linked_rc_edge ** rc_edge_free_list_ptr)
free_rc_tree	net_delay.c	/^static void free_rc_tree(t_rc_node * rc_root,$/;"	p	file:	signature:(t_rc_node * rc_root, t_rc_node ** rc_node_free_list_ptr, t_linked_rc_edge ** rc_edge_free_list_ptr)
free_route_structs	route_common.c	/^free_route_structs(t_ivec ** fb_opins_used_locally)$/;"	f	signature:(t_ivec ** fb_opins_used_locally)
free_route_structs	route_export.h	/^void free_route_structs(t_ivec ** fb_opins_used_locally);$/;"	p	signature:(t_ivec ** fb_opins_used_locally)
free_route_tree	route_tree_timing.c	/^free_route_tree(t_rt_node * rt_node)$/;"	f	signature:(t_rt_node * rt_node)
free_route_tree	route_tree_timing.h	/^void free_route_tree(t_rt_node * rt_node);$/;"	p	signature:(t_rt_node * rt_node)
free_route_tree_timing_structs	route_tree_timing.c	/^free_route_tree_timing_structs(void)$/;"	f	signature:(void)
free_route_tree_timing_structs	route_tree_timing.h	/^void free_route_tree_timing_structs(void);$/;"	p	signature:(void)
free_routing_structs	timing_place_lookup.c	/^free_routing_structs(struct s_router_opts router_opts,$/;"	f	file:	signature:(struct s_router_opts router_opts, struct s_det_routing_arch det_routing_arch, t_segment_inf * segment_inf, t_timing_inf timing_inf)
free_routing_structs	timing_place_lookup.c	/^static void free_routing_structs(struct s_router_opts router_opts,$/;"	p	file:	signature:(struct s_router_opts router_opts, struct s_det_routing_arch det_routing_arch, t_segment_inf * segment_inf, t_timing_inf timing_inf)
free_rr_graph	rr_graph.c	/^free_rr_graph(void)$/;"	f	signature:(void)
free_rr_graph	rr_graph.h	/^void free_rr_graph(void);$/;"	p	signature:(void)
free_rr_node_indices	rr_graph2.c	/^free_rr_node_indices(IN t_ivec *** rr_node_indices)$/;"	f	signature:(IN t_ivec *** rr_node_indices)
free_rr_node_indices	rr_graph2.h	/^void free_rr_node_indices(IN t_ivec *** rr_node_indices);$/;"	p	signature:(IN t_ivec *** rr_node_indices)
free_rr_node_route_structs	route_common.c	/^free_rr_node_route_structs(void)$/;"	f	signature:(void)
free_rr_node_route_structs	route_common.h	/^void free_rr_node_route_structs(void);$/;"	p	signature:(void)
free_rt_node	route_tree_timing.c	/^free_rt_node(t_rt_node * rt_node)$/;"	f	file:	signature:(t_rt_node * rt_node)
free_rt_node	route_tree_timing.c	/^static void free_rt_node(t_rt_node * rt_node);$/;"	p	file:	signature:(t_rt_node * rt_node)
free_saved_routing	route_common.c	/^free_saved_routing(struct s_trace **best_routing,$/;"	f	signature:(struct s_trace **best_routing, t_ivec ** saved_clb_opins_used_locally)
free_saved_routing	route_export.h	/^void free_saved_routing(struct s_trace **best_routing,$/;"	p	signature:(struct s_trace **best_routing, t_ivec ** saved_clb_opins_used_locally)
free_sblock_pattern_lookup	rr_graph2.c	/^free_sblock_pattern_lookup(INOUT short *****sblock_pattern)$/;"	f	signature:(INOUT short *****sblock_pattern)
free_sblock_pattern_lookup	rr_graph2.h	/^void free_sblock_pattern_lookup(INOUT short *****sblock_pattern);$/;"	p	signature:(INOUT short *****sblock_pattern)
free_seg_details	rr_graph2.c	/^free_seg_details(t_seg_details * seg_details,$/;"	f	signature:(t_seg_details * seg_details, int nodes_per_chan)
free_seg_details	rr_graph2.h	/^void free_seg_details(t_seg_details * seg_details,$/;"	p	signature:(t_seg_details * seg_details, int nodes_per_chan)
free_subblock_data	place_and_route.c	/^free_subblock_data(t_subblock_data * subblock_data_ptr)$/;"	f	signature:(t_subblock_data * subblock_data_ptr)
free_subblock_data	place_and_route.c	/^void free_subblock_data(t_subblock_data * subblock_data_ptr);$/;"	p	file:	signature:(t_subblock_data * subblock_data_ptr)
free_switch_block_conn	rr_graph_sbox.c	/^free_switch_block_conn(struct s_ivec ***switch_block_conn,$/;"	f	signature:(struct s_ivec ***switch_block_conn, int nodes_per_chan)
free_switch_block_conn	rr_graph_sbox.h	/^void free_switch_block_conn(struct s_ivec ***switch_block_conn,$/;"	p	signature:(struct s_ivec ***switch_block_conn, int nodes_per_chan)
free_timing_driven_route_structs	route_timing.c	/^free_timing_driven_route_structs(float *pin_criticality,$/;"	f	signature:(float *pin_criticality, int *sink_order, t_rt_node ** rt_node_of_sink)
free_timing_driven_route_structs	route_timing.h	/^void free_timing_driven_route_structs(float *pin_criticality,$/;"	p	signature:(float *pin_criticality, int *sink_order, t_rt_node ** rt_node_of_sink)
free_timing_graph	path_delay.c	/^free_timing_graph(float **net_slack)$/;"	f	signature:(float **net_slack)
free_timing_graph	path_delay.h	/^void free_timing_graph(float **net_slack);$/;"	p	signature:(float **net_slack)
free_trace_data	route_common.c	/^free_trace_data(struct s_trace *tptr)$/;"	f	file:	signature:(struct s_trace *tptr)
free_trace_data	route_common.c	/^static void free_trace_data(struct s_trace *tptr);$/;"	p	file:	signature:(struct s_trace *tptr)
free_trace_structs	route_common.c	/^free_trace_structs(void)$/;"	f	signature:(void)
free_trace_structs	route_common.h	/^void free_trace_structs(void);$/;"	p	signature:(void)
free_traceback	route_common.c	/^free_traceback(int inet)$/;"	f	signature:(int inet)
free_traceback	route_common.h	/^void free_traceback(int inet);$/;"	p	signature:(int inet)
free_type_pin_to_track_map	rr_graph.c	/^free_type_pin_to_track_map(int***** ipin_to_track_map, t_type_ptr types, int* fc_in)$/;"	f	file:	signature:(int***** ipin_to_track_map, t_type_ptr types, int* fc_in)
free_type_pin_to_track_map	rr_graph.c	/^static void free_type_pin_to_track_map(int***** ipin_to_track_map, t_type_ptr types, int* fc_in);$/;"	p	file:	signature:(int***** ipin_to_track_map, t_type_ptr types, int* fc_in)
free_type_track_to_ipin_map	rr_graph.c	/^free_type_track_to_ipin_map(struct s_ivec**** track_to_pin_map, t_type_ptr types, int nodes_per_chan)$/;"	f	file:	signature:(struct s_ivec**** track_to_pin_map, t_type_ptr types, int nodes_per_chan)
free_type_track_to_ipin_map	rr_graph.c	/^static void free_type_track_to_ipin_map(struct s_ivec**** track_to_pin_map, t_type_ptr types, int nodes_per_chan);$/;"	p	file:	signature:(struct s_ivec**** track_to_pin_map, t_type_ptr types, int nodes_per_chan)
free_unique_pin_list	place.c	/^free_unique_pin_list(void)$/;"	f	file:	signature:(void)
free_unique_pin_list	place.c	/^static void free_unique_pin_list(void);$/;"	p	file:	signature:(void)
frequency	vpr_types.h	/^    int frequency;$/;"	m	struct:s_segment_inf	access:public
from_node	mst.h	/^    unsigned short int from_node;$/;"	m	struct:s_mst_edge	access:public
fs	place_and_route.h	/^    int fs;			\/* at this fs *\/$/;"	m	struct:s_fmap_cell	access:public
full_stats	vpr_types.h	/^	boolean full_stats;$/;"	m	struct:s_router_opts	access:public
gc	graphics.c	/^static GC gc, gcxor, gc_menus;$/;"	v	file:
gc_menus	graphics.c	/^static GC gc, gcxor, gc_menus;$/;"	v	file:
gcxor	graphics.c	/^static GC gc, gcxor, gc_menus;$/;"	v	file:
generic_compute_matrix	timing_place_lookup.c	/^generic_compute_matrix(float ***matrix_ptr,$/;"	f	file:	signature:(float ***matrix_ptr, t_type_ptr source_type, t_type_ptr sink_type, int source_x, int source_y, int start_x, int end_x, int start_y, int end_y, struct s_router_opts router_opts, struct s_det_routing_arch det_routing_arch, t_segment_inf * segment_inf, t_timing_inf timing_inf)
generic_compute_matrix	timing_place_lookup.c	/^static void generic_compute_matrix(float ***matrix_ptr,$/;"	p	file:	signature:(float ***matrix_ptr, t_type_ptr source_type, t_type_ptr sink_type, int source_x, int source_y, int start_x, int end_x, int start_y, int end_y, struct s_router_opts router_opts, struct s_det_routing_arch det_routing_arch, t_segment_inf * segment_inf, t_timing_inf timing_inf)
get_adj_opins	rr_graph.c	/^static int *get_adj_opins(IN int i,$/;"	p	file:	signature:(IN int i, IN int j, OUT int *num_pins, IN t_ivec *** rr_node_indices, IN enum e_rr_type chan_type)
get_average_opin_delay	rr_graph_indexed_data.c	/^get_average_opin_delay(t_ivec *** rr_node_indices,$/;"	f	file:	signature:(t_ivec *** rr_node_indices, int nodes_per_chan)
get_average_opin_delay	rr_graph_indexed_data.c	/^static float get_average_opin_delay(t_ivec *** rr_node_indices,$/;"	p	file:	signature:(t_ivec *** rr_node_indices, int nodes_per_chan)
get_bb_from_scratch	place.c	/^get_bb_from_scratch(int inet,$/;"	f	file:	signature:(int inet, struct s_bb *coords, struct s_bb *num_on_edges)
get_bb_from_scratch	place.c	/^static void get_bb_from_scratch(int inet,$/;"	p	file:	signature:(int inet, struct s_bb *coords, struct s_bb *num_on_edges)
get_bidir_opin_connections	rr_graph2.c	/^get_bidir_opin_connections(IN int i,$/;"	f	signature:(IN int i, IN int j, IN int ipin, IN struct s_linked_edge **edge_list, IN int *****opin_to_track_map, IN int Fc, IN boolean * rr_edge_done, IN t_ivec *** rr_node_indices, IN t_seg_details * seg_details)
get_bidir_opin_connections	rr_graph2.h	/^int get_bidir_opin_connections(IN int i,$/;"	p	signature:(IN int i, IN int j, IN int ipin, IN struct s_linked_edge **edge_list, IN int *****opin_to_track_map, IN int Fc, IN boolean * rr_edge_done, IN t_ivec *** rr_node_indices, IN t_seg_details * seg_details)
get_bidir_track_to_chan_seg	rr_graph2.c	/^get_bidir_track_to_chan_seg(IN struct s_ivec conn_tracks,$/;"	f	file:	signature:(IN struct s_ivec conn_tracks, IN t_ivec *** rr_node_indices, IN int to_chan, IN int to_seg, IN int to_sb, IN t_rr_type to_type, IN t_seg_details * seg_details, IN boolean from_is_sbox, IN int from_switch, INOUT boolean * rr_edge_done, IN enum e_directionality directionality, INOUT struct s_linked_edge **edge_list)
get_bidir_track_to_chan_seg	rr_graph2.c	/^static int get_bidir_track_to_chan_seg(IN struct s_ivec conn_tracks,$/;"	p	file:	signature:(IN struct s_ivec conn_tracks, IN t_ivec *** rr_node_indices, IN int to_chan, IN int to_seg, IN int to_sb, IN t_rr_type to_type, IN t_seg_details * seg_details, IN boolean from_is_sbox, IN int from_switch, INOUT boolean * rr_edge_done, IN enum e_directionality directionality, INOUT struct s_linked_edge **edge_list)
get_block_center	draw.c	/^get_block_center(int bnum,$/;"	f	file:	signature:(int bnum, float *x, float *y)
get_block_center	draw.c	/^static void get_block_center(int bnum,$/;"	p	file:	signature:(int bnum, float *x, float *y)
get_cblock_trans	rr_graph_area.c	/^get_cblock_trans(int *num_inputs_to_cblock,$/;"	f	file:	signature:(int *num_inputs_to_cblock, int max_inputs_to_cblock, float trans_cblock_to_lblock_buf, float trans_sram_bit)
get_cblock_trans	rr_graph_area.c	/^static float get_cblock_trans(int *num_inputs_to_cblock,$/;"	p	file:	signature:(int *num_inputs_to_cblock, int max_inputs_to_cblock, float trans_cblock_to_lblock_buf, float trans_sram_bit)
get_channel_occupancy_stats	stats.c	/^get_channel_occupancy_stats(void)$/;"	f	file:	signature:(void)
get_channel_occupancy_stats	stats.c	/^static void get_channel_occupancy_stats(void);$/;"	p	file:	signature:(void)
get_class_range_for_block	vpr_utils.c	/^get_class_range_for_block(IN int iblk,$/;"	f	signature:(IN int iblk, OUT int *class_low, OUT int *class_high)
get_class_range_for_block	vpr_utils.h	/^void get_class_range_for_block(IN int iblk,$/;"	p	signature:(IN int iblk, OUT int *class_low, OUT int *class_high)
get_delay_normalization_fac	rr_graph_indexed_data.c	/^get_delay_normalization_fac(int nodes_per_chan,$/;"	f	file:	signature:(int nodes_per_chan, t_ivec *** rr_node_indices)
get_delay_normalization_fac	rr_graph_indexed_data.c	/^static float get_delay_normalization_fac(int nodes_per_chan,$/;"	p	file:	signature:(int nodes_per_chan, t_ivec *** rr_node_indices)
get_directed_search_expected_cost	route_directed_search.c	/^get_directed_search_expected_cost(int inode,$/;"	f	file:	signature:(int inode, int target_node)
get_directed_search_expected_cost	route_directed_search.c	/^static float get_directed_search_expected_cost(int inode,$/;"	p	file:	signature:(int inode, int target_node)
get_expected_segs_to_target	route_directed_search.c	/^get_expected_segs_to_target(int inode,$/;"	f	file:	signature:(int inode, int target_node, int *num_segs_ortho_dir_ptr)
get_expected_segs_to_target	route_directed_search.c	/^static int get_expected_segs_to_target(int inode,$/;"	p	file:	signature:(int inode, int target_node, int *num_segs_ortho_dir_ptr)
get_expected_segs_to_target	route_timing.c	/^get_expected_segs_to_target(int inode,$/;"	f	file:	signature:(int inode, int target_node, int *num_segs_ortho_dir_ptr)
get_expected_segs_to_target	route_timing.c	/^static int get_expected_segs_to_target(int inode,$/;"	p	file:	signature:(int inode, int target_node, int *num_segs_ortho_dir_ptr)
get_first_pin	timing_place_lookup.c	/^get_first_pin(enum e_pin_type pintype,$/;"	f	file:	signature:(enum e_pin_type pintype, t_type_ptr type)
get_first_pin	timing_place_lookup.c	/^static int get_first_pin(enum e_pin_type pintype,$/;"	p	file:	signature:(enum e_pin_type pintype, t_type_ptr type)
get_hash_entry	hash.c	/^get_hash_entry(struct s_hash **hash_table,$/;"	f	signature:(struct s_hash **hash_table, char *name)
get_hash_entry	hash.h	/^struct s_hash *get_hash_entry(struct s_hash **hash_table,$/;"	p	signature:(struct s_hash **hash_table, char *name)
get_heap_head	route_common.c	/^get_heap_head(void)$/;"	f	signature:(void)
get_heap_head	route_common.h	/^struct s_heap *get_heap_head(void);$/;"	p	signature:(void)
get_length_and_bends_stats	stats.c	/^get_length_and_bends_stats(void)$/;"	f	file:	signature:(void)
get_length_and_bends_stats	stats.c	/^static void get_length_and_bends_stats(void);$/;"	p	file:	signature:(void)
get_longest_segment_length	timing_place_lookup.c	/^get_longest_segment_length(struct s_det_routing_arch det_routing_arch,$/;"	f	file:	signature:(struct s_det_routing_arch det_routing_arch, t_segment_inf * segment_inf)
get_longest_segment_length	timing_place_lookup.c	/^static int get_longest_segment_length(struct s_det_routing_arch$/;"	p	file:	signature:(struct s_det_routing_arch det_routing_arch, t_segment_inf * segment_inf)
get_max_pins_per_net	route_timing.c	/^get_max_pins_per_net(void)$/;"	f	file:	signature:(void)
get_max_pins_per_net	route_timing.c	/^static int get_max_pins_per_net(void);$/;"	p	file:	signature:(void)
get_mst_of_net	mst.c	/^get_mst_of_net(int inet)$/;"	f	signature:(int inet)
get_mst_of_net	mst.h	/^t_mst_edge *get_mst_of_net(int inet);$/;"	p	signature:(int inet)
get_net_cost	place.c	/^get_net_cost(int inet,$/;"	f	file:	signature:(int inet, struct s_bb *bbptr)
get_net_cost	place.c	/^static float get_net_cost(int inet,$/;"	p	file:	signature:(int inet, struct s_bb *bb_ptr)
get_net_wirelength_estimate	place.c	/^get_net_wirelength_estimate(int inet,$/;"	f	file:	signature:(int inet, struct s_bb *bbptr)
get_net_wirelength_estimate	place.c	/^static double get_net_wirelength_estimate(int inet,$/;"	p	file:	signature:(int inet, struct s_bb *bbptr)
get_next_hash	hash.c	/^get_next_hash(struct s_hash **hash_table,$/;"	f	signature:(struct s_hash **hash_table, struct s_hash_iterator *hash_iterator)
get_next_hash	hash.h	/^struct s_hash *get_next_hash(struct s_hash **hash_table,$/;"	p	signature:(struct s_hash **hash_table, struct s_hash_iterator *hash_iterator)
get_non_updateable_bb	place.c	/^get_non_updateable_bb(int inet,$/;"	f	file:	signature:(int inet, struct s_bb *bb_coord_new)
get_non_updateable_bb	place.c	/^static void get_non_updateable_bb(int inet,$/;"	p	file:	signature:(int inet, struct s_bb *bb_coord_new)
get_num_bends_and_length	stats.c	/^get_num_bends_and_length(int inet,$/;"	f	file:	signature:(int inet, int *bends_ptr, int *len_ptr, int *segments_ptr)
get_num_bends_and_length	stats.c	/^static void get_num_bends_and_length(int inet,$/;"	p	file:	signature:(int inet, int *bends, int *length, int *segments)
get_num_conn	check_netlist.c	/^get_num_conn(int bnum)$/;"	f	file:	signature:(int bnum)
get_num_conn	check_netlist.c	/^static int get_num_conn(int bnum);$/;"	p	file:	signature:(int bnum)
get_rr_cong_cost	route_common.c	/^get_rr_cong_cost(int inode)$/;"	f	signature:(int inode)
get_rr_cong_cost	route_common.h	/^float get_rr_cong_cost(int inode);$/;"	p	signature:(int inode)
get_rr_node_index	rr_graph2.c	/^get_rr_node_index(int x,$/;"	f	signature:(int x, int y, t_rr_type rr_type, int ptc, t_ivec *** rr_node_indices)
get_rr_node_index	rr_graph2.h	/^int get_rr_node_index(int x,$/;"	p	signature:(int x, int y, t_rr_type rr_type, int ptc, t_ivec *** rr_node_indices)
get_rr_pin_draw_coords	draw.c	/^get_rr_pin_draw_coords(int inode,$/;"	f	file:	signature:(int inode, int iside, int ioff, float *xcen, float *ycen)
get_rr_pin_draw_coords	draw.c	/^static void get_rr_pin_draw_coords(int inode,$/;"	p	file:	signature:(int inode, int iside, int ioff, float *xcen, float *ycen)
get_sbox_side	rr_graph_sbox.c	/^static enum e_side get_sbox_side(IN int get_i,$/;"	p	file:	signature:(IN int get_i, IN int get_j, IN t_rr_type get_type, IN int comp_i, IN int comp_j)
get_seg_end	rr_graph2.c	/^get_seg_end(IN t_seg_details * seg_details,$/;"	f	signature:(IN t_seg_details * seg_details, IN int itrack, IN int istart, IN int chan_num, IN int seg_max)
get_seg_end	rr_graph2.h	/^int get_seg_end(IN t_seg_details * seg_details,$/;"	p	signature:(IN t_seg_details * seg_details, IN int itrack, IN int istart, IN int chan_num, IN int seg_max)
get_seg_start	rr_graph2.c	/^get_seg_start(IN t_seg_details * seg_details,$/;"	f	signature:(IN t_seg_details * seg_details, IN int itrack, IN int chan_num, IN int seg_num)
get_seg_start	rr_graph2.h	/^int get_seg_start(IN t_seg_details * seg_details,$/;"	p	signature:(IN t_seg_details * seg_details, IN int itrack, IN int chan_num, IN int seg_num)
get_seg_track_counts	rr_graph2.c	/^get_seg_track_counts(IN int num_sets,$/;"	f	file:	signature:(IN int num_sets, IN int num_seg_types, IN t_segment_inf * segment_inf, IN boolean use_full_seg_groups)
get_seg_track_counts	rr_graph2.c	/^static int *get_seg_track_counts(IN int num_sets,$/;"	p	file:	signature:(IN int num_sets, IN int num_seg_types, IN t_segment_inf * segment_inf, IN boolean use_full_seg_groups)
get_segment_usage_stats	segment_stats.c	/^get_segment_usage_stats(int num_segment,$/;"	f	signature:(int num_segment, t_segment_inf * segment_inf)
get_segment_usage_stats	segment_stats.h	/^void get_segment_usage_stats(int num_segment,$/;"	p	signature:(int num_segment, t_segment_inf * segment_inf)
get_serial_num	route_common.c	/^get_serial_num(void)$/;"	f	signature:(void)
get_serial_num	route_export.h	/^void get_serial_num(void);$/;"	p	signature:(void)
get_simple_switch_block_track	rr_graph_sbox.c	/^get_simple_switch_block_track(IN enum e_side from_side,$/;"	f	signature:(IN enum e_side from_side, IN enum e_side to_side, IN int from_track, IN enum e_switch_block_type switch_block_type, IN int nodes_per_chan)
get_simple_switch_block_track	rr_graph_sbox.c	/^int get_simple_switch_block_track(IN enum e_side from_side,$/;"	p	file:	signature:(IN enum e_side from_side, IN enum e_side to_side, IN int from_track, IN enum e_switch_block_type switch_block_type, IN int nodes_per_chan)
get_simple_switch_block_track	rr_graph_sbox.h	/^int get_simple_switch_block_track(enum e_side from_side,$/;"	p	signature:(enum e_side from_side, enum e_side to_side, int from_track, enum e_switch_block_type switch_block_type, int nodes_per_chan)
get_std_dev	place.c	/^get_std_dev(int n,$/;"	f	file:	signature:(int n, double sum_x_squared, double av_x)
get_std_dev	place.c	/^static double get_std_dev(int n,$/;"	p	file:	signature:(int n, double sum_x_squared, double av_x)
get_switch_box_tracks	rr_graph_sbox.h	/^struct s_ivec get_switch_box_tracks(IN int from_i,$/;"	p	signature:(IN int from_i, IN int from_j, IN int from_track, IN t_rr_type from_type, IN int to_i, IN int to_j, IN t_rr_type to_type, IN struct s_ivec ***switch_block_conn)
get_switch_type	rr_graph2.c	/^get_switch_type(boolean is_from_sbox,$/;"	f	file:	signature:(boolean is_from_sbox, boolean is_to_sbox, short from_node_switch, short to_node_switch, short switch_types[2])
get_switch_type	rr_graph2.c	/^static void get_switch_type(boolean is_from_sbox,$/;"	p	file:	signature:(boolean is_from_sbox, boolean is_to_sbox, short from_node_switch, short to_node_switch, short switch_types[2])
get_timing_driven_expected_cost	route_timing.c	/^get_timing_driven_expected_cost(int inode,$/;"	f	file:	signature:(int inode, int target_node, float criticality_fac, float R_upstream)
get_timing_driven_expected_cost	route_timing.c	/^static float get_timing_driven_expected_cost(int inode,$/;"	p	file:	signature:(int inode, int target_node, float criticality_fac, float R_upstream)
get_tnode_block_and_output_net	path_delay.c	/^get_tnode_block_and_output_net(int inode,$/;"	f	signature:(int inode, int *iblk_ptr, int *inet_ptr)
get_tnode_block_and_output_net	path_delay.h	/^void get_tnode_block_and_output_net(int inode,$/;"	p	signature:(int inode, int *iblk_ptr, int *inet_ptr)
get_top_of_heap_index	heapsort.c	/^get_top_of_heap_index(int *heap,$/;"	f	file:	signature:(int *heap, float *sort_values, int heap_tail)
get_top_of_heap_index	heapsort.c	/^static int get_top_of_heap_index(int *heap,$/;"	p	file:	signature:(int *heap, float *sort_values, int heap_tail)
get_track_num	draw.c	/^get_track_num(int inode,$/;"	f	file:	signature:(int inode, int **chanx_track, int **chany_track)
get_track_num	draw.c	/^static int get_track_num(int inode,$/;"	p	file:	signature:(int inode, int **chanx_track, int **chany_track)
get_track_to_ipins	rr_graph2.c	/^get_track_to_ipins(int seg,$/;"	f	signature:(int seg, int chan, int track, t_linked_edge ** edge_list_ptr, t_ivec *** rr_node_indices, struct s_ivec ****track_to_ipin_lookup, t_seg_details * seg_details, enum e_rr_type chan_type, int chan_length, int wire_to_ipin_switch, enum e_directionality directionality)
get_track_to_ipins	rr_graph2.h	/^int get_track_to_ipins(int seg,$/;"	p	signature:(int seg, int chan, int track, t_linked_edge ** edge_list_ptr, t_ivec *** rr_node_indices, struct s_ivec ****track_to_ipin_lookup, t_seg_details * seg_details, enum e_rr_type chan_type, int chan_length, int wire_to_ipin_switch, enum e_directionality directionality)
get_track_to_tracks	rr_graph2.c	/^get_track_to_tracks(IN int from_chan,$/;"	f	signature:(IN int from_chan, IN int from_seg, IN int from_track, IN t_rr_type from_type, IN int to_seg, IN t_rr_type to_type, IN int chan_len, IN int nodes_per_chan, IN int *opin_mux_size, IN int Fs_per_side, IN short *****sblock_pattern, INOUT struct s_linked_edge **edge_list, IN t_seg_details * seg_details, IN enum e_directionality directionality, IN t_ivec *** rr_node_indices, INOUT boolean * rr_edge_done, IN struct s_ivec ***switch_block_conn)
get_track_to_tracks	rr_graph2.h	/^int get_track_to_tracks(IN int from_chan,$/;"	p	signature:(IN int from_chan, IN int from_seg, IN int from_track, IN t_rr_type from_type, IN int to_seg, IN t_rr_type to_type, IN int chan_len, IN int nodes_per_chan, IN int *opin_mux_size, IN int Fs_per_side, IN short *****sblock_pattern, INOUT struct s_linked_edge **edge_list, IN t_seg_details * seg_details, IN enum e_directionality directionality, IN t_ivec *** rr_node_indices, INOUT boolean * rr_edge_done, IN struct s_ivec ***switch_block_conn)
get_type_by_name	read_netlist.c	/^get_type_by_name(IN const char *name,$/;"	f	file:	signature:(IN const char *name, IN int num_types, IN const struct s_type_descriptor block_types[], IN t_type_ptr IO_type, IN const char *net_file, IN int line, OUT enum special_blk *overide)
get_type_by_name	read_netlist.c	/^static t_type_ptr get_type_by_name(IN const char *name,$/;"	p	file:	signature:(IN const char *name, IN int num_types, IN const struct s_type_descriptor block_types[], IN t_type_ptr IO_type, IN const char *net_file, IN int line, OUT enum special_blk *overide)
get_unidir_opin_connections	rr_graph2.c	/^get_unidir_opin_connections(IN int chan,$/;"	f	signature:(IN int chan, IN int seg, IN int Fc, IN t_rr_type chan_type, IN t_seg_details * seg_details, INOUT t_linked_edge ** edge_list_ptr, INOUT int **Fc_ofs, INOUT boolean * rr_edge_done, IN int max_len, IN int nodes_per_chan, IN t_ivec *** rr_node_indices, OUT boolean * Fc_clipped)
get_unidir_opin_connections	rr_graph2.h	/^int get_unidir_opin_connections(IN int chan,$/;"	p	signature:(IN int chan, IN int seg, IN int Fc, IN t_rr_type chan_type, IN t_seg_details * seg_details, INOUT t_linked_edge ** edge_list_ptr, INOUT int **Fc_ofs, INOUT boolean * rr_edge_done, IN int max_len, IN int nodes_per_chan, IN t_ivec *** rr_node_indices, OUT boolean * Fc_clipped)
get_unidir_track_to_chan_seg	rr_graph2.c	/^get_unidir_track_to_chan_seg(IN boolean is_end_sb,$/;"	f	file:	signature:(IN boolean is_end_sb, IN int from_track, IN int to_chan, IN int to_seg, IN int to_sb, IN t_rr_type to_type, IN int nodes_per_chan, IN int nx, IN int ny, IN enum e_side from_side, IN enum e_side to_side, IN int Fs_per_side, IN int *opin_mux_size, IN short *****sblock_pattern, IN t_ivec *** rr_node_indices, IN t_seg_details * seg_details, INOUT boolean * rr_edge_done, OUT boolean * Fs_clipped, INOUT struct s_linked_edge **edge_list)
get_unidir_track_to_chan_seg	rr_graph2.c	/^static int get_unidir_track_to_chan_seg(IN boolean is_end_sb,$/;"	p	file:	signature:(IN boolean is_end_sb, IN int from_track, IN int to_chan, IN int to_seg, IN int to_sb, IN t_rr_type to_type, IN int nodes_per_chan, IN int nx, IN int ny, IN enum e_side from_side, IN enum e_side to_side, IN int Fs_per_side, IN int *opin_mux_size, IN short *****sblock_pattern, IN t_ivec *** rr_node_indices, IN t_seg_details * seg_details, INOUT boolean * rr_edge_done, OUT boolean * Fs_clipped, INOUT struct s_linked_edge **edge_list)
global_route_switch	vpr_types.h	/^    short global_route_switch;$/;"	m	struct:s_det_routing_arch	access:public
gr_automode	draw.c	/^static int gr_automode;		\/* Need user input after: 0: each t,   *$/;"	v	file:
grid	globals_declare.h	/^struct s_grid_tile **grid;$/;"	v	typeref:struct:s_grid_tile
grid	main.c	/^struct s_grid_tile **grid = NULL;	\/* [0..(nx+1)][0..(ny+1)] Physical block list *\/$/;"	v	typeref:struct:s_grid_tile
grid_backup	timing_place_lookup.c	/^static struct s_grid_tile **grid_backup;$/;"	v	typeref:struct:s_grid_tile	file:
grid_loc_def	vpr_types.h	/^    struct s_grid_loc_def *grid_loc_def;	\/* [0..num_def-1] *\/$/;"	m	struct:s_type_descriptor	typeref:struct:s_type_descriptor::s_grid_loc_def	access:public
grid_loc_type	vpr_types.h	/^    enum e_grid_loc_type grid_loc_type;$/;"	m	struct:s_grid_loc_def	typeref:enum:s_grid_loc_def::e_grid_loc_type	access:public
grid_logic_tile_area	main.c	/^float grid_logic_tile_area = 0;$/;"	v
grid_logic_tile_area	xml_arch.h	/^     float grid_logic_tile_area;$/;"	m	struct:s_arch	access:public
group_size	vpr_types.h	/^    int group_size;$/;"	m	struct:s_seg_details	access:public
group_start	vpr_types.h	/^    int group_start;$/;"	m	struct:s_seg_details	access:public
h_ptr	hash.h	/^    struct s_hash *h_ptr;$/;"	m	struct:s_hash_iterator	typeref:struct:s_hash_iterator::s_hash	access:public
hash_value	hash.c	/^hash_value(char *name)$/;"	f	file:	signature:(char *name)
hash_value	hash.c	/^static int hash_value(char *name);$/;"	p	file:	signature:(char *name)
heap	route_common.c	/^static struct s_heap **heap;	\/* Indexed from [1..heap_size] *\/$/;"	v	typeref:struct:s_heap	file:
heap_free_head	route_common.c	/^static struct s_heap *heap_free_head = NULL;$/;"	v	typeref:struct:s_heap	file:
heap_size	route_common.c	/^static int heap_size;		\/* Number of slots in the heap array *\/$/;"	v	file:
heap_tail	route_common.c	/^static int heap_tail;		\/* Index of first unused slot in the heap array *\/$/;"	v	file:
heapsort	heapsort.c	/^heapsort(int *sort_index,$/;"	f	signature:(int *sort_index, float *sort_values, int nelem)
heapsort	heapsort.h	/^void heapsort(int *sort_index,$/;"	p	signature:(int *sort_index, float *sort_values, int nelem)
height	graphics.c	/^    int height;$/;"	m	struct:__anon5	file:	access:public
height	vpr_types.h	/^    int height;$/;"	m	struct:s_type_descriptor	access:public
highlight_blocks	draw.c	/^highlight_blocks(float x,$/;"	f	file:	signature:(float x, float y)
highlight_blocks	draw.c	/^static void highlight_blocks(float x,$/;"	p	file:	signature:(float x, float y)
highlight_crit_path	draw.c	/^highlight_crit_path(void (*drawscreen_ptr) (void))$/;"	f	file:	signature:(void (*drawscreen_ptr) (void))
highlight_crit_path	draw.c	/^static void highlight_crit_path(void (*drawscreen_ptr) (void));$/;"	p	file:	signature:(void (*drawscreen_ptr) (void))
i	hash.h	/^    int i;$/;"	m	struct:s_hash_iterator	access:public
iblk	path_delay2.h	/^    int iblk;$/;"	m	struct:__anon9	access:public
index	hash.h	/^    int index;$/;"	m	struct:s_hash	access:public
index	route_common.h	/^    int index;$/;"	m	struct:s_heap	access:public
index	vpr_types.h	/^    int index;			\/* index of type descriptor in array (allows for index referencing) *\/$/;"	m	struct:s_type_descriptor	access:public
index	vpr_types.h	/^    int index;$/;"	m	struct:s_seg_details	access:public
index	vpr_types.h	/^    int index;$/;"	m	struct:s_trace	access:public
init_chan	place_and_route.c	/^init_chan(int cfactor,$/;"	f	signature:(int cfactor, t_chan_width_dist chan_width_dist)
init_chan	place_and_route.h	/^void init_chan(int cfactor,$/;"	p	signature:(int cfactor, t_chan_width_dist chan_width_dist)
init_draw_coords	draw.c	/^init_draw_coords(float width_val)$/;"	f	signature:(float width_val)
init_draw_coords	draw.h	/^void init_draw_coords(float clb_width);$/;"	p	signature:(float clb_width)
init_graphics	graphics.c	/^init_graphics(char *window_name)$/;"	f	signature:(char *window_name)
init_graphics	graphics.h	/^void init_graphics(char *window_name);	\/* Initializes X display *\/$/;"	p	signature:(char *window_name)
init_postscript	graphics.c	/^init_postscript(char *fname)$/;"	f	signature:(char *fname)
init_postscript	graphics.h	/^int init_postscript(char *fname);	\/* Returns 1 if successful *\/$/;"	p	signature:(char *fname)
init_route_structs	route_common.c	/^init_route_structs(int bb_factor)$/;"	f	signature:(int bb_factor)
init_route_structs	route_common.h	/^void init_route_structs(int bb_factor);$/;"	p	signature:(int bb_factor)
init_route_tree_to_source	route_tree_timing.c	/^init_route_tree_to_source(int inet)$/;"	f	signature:(int inet)
init_route_tree_to_source	route_tree_timing.h	/^t_rt_node *init_route_tree_to_source(int inet);$/;"	p	signature:(int inet)
init_t	vpr_types.h	/^    float init_t;$/;"	m	struct:s_annealing_sched	access:public
init_world	graphics.c	/^init_world(float x1,$/;"	f	signature:(float x1, float y1, float x2, float y2)
init_world	graphics.c	/^init_world(float xl,$/;"	f	signature:(float xl, float yt, float xr, float yb)
init_world	graphics.h	/^void init_world(float xl,$/;"	p	signature:(float xl, float yt, float xr, float yb)
initial_placement	place.c	/^initial_placement(enum e_pad_loc_type pad_loc_type,$/;"	f	file:	signature:(enum e_pad_loc_type pad_loc_type, char *pad_loc_file)
initial_placement	place.c	/^static void initial_placement(enum e_pad_loc_type pad_loc_type,$/;"	p	file:	signature:(enum e_pad_loc_type pad_loc_type, char *pad_loc_file)
initial_pres_fac	ReadOptions.h	/^	float initial_pres_fac;$/;"	m	struct:s_options	access:public
initial_pres_fac	vpr_types.h	/^    float initial_pres_fac;$/;"	m	struct:s_router_opts	access:public
inner_loop_recompute_divider	ReadOptions.h	/^	int inner_loop_recompute_divider;$/;"	m	struct:s_options	access:public
inner_loop_recompute_divider	vpr_types.h	/^    int inner_loop_recompute_divider;$/;"	m	struct:s_placer_opts	access:public
inner_num	vpr_types.h	/^    float inner_num;$/;"	m	struct:s_annealing_sched	access:public
inode	net_delay.c	/^    int inode;$/;"	m	struct:s_rc_node	file:	access:public
inode	route_tree_timing.h	/^    int inode;$/;"	m	struct:s_rt_node	access:public
inputs	vpr_types.h	/^    int *inputs;$/;"	m	struct:s_subblock	access:public
insert_in_edge_list	rr_graph_util.c	/^insert_in_edge_list(IN t_linked_edge * head,$/;"	f	signature:(IN t_linked_edge * head, IN int edge, IN short iswitch)
insert_in_edge_list	rr_graph_util.h	/^t_linked_edge *insert_in_edge_list(t_linked_edge * head,$/;"	p	signature:(t_linked_edge * head, int edge, short iswitch)
insert_in_hash_table	hash.c	/^insert_in_hash_table(struct s_hash **hash_table,$/;"	f	signature:(struct s_hash **hash_table, char *name, int next_free_index)
insert_in_hash_table	hash.h	/^struct s_hash *insert_in_hash_table(struct s_hash **hash_table,$/;"	p	signature:(struct s_hash **hash_table, char *name, int next_free_index)
insert_in_int_list	util.c	/^insert_in_int_list(t_linked_int * head,$/;"	f	signature:(t_linked_int * head, int data, t_linked_int ** free_list_head_ptr)
insert_in_int_list	util.h	/^t_linked_int *insert_in_int_list(t_linked_int * head,$/;"	p	signature:(t_linked_int * head, int data, t_linked_int ** free_list_head_ptr)
insert_in_vptr_list	util.c	/^insert_in_vptr_list(struct s_linked_vptr *head,$/;"	f	signature:(struct s_linked_vptr *head, void *vptr_to_add)
insert_in_vptr_list	util.h	/^struct s_linked_vptr *insert_in_vptr_list(struct s_linked_vptr *head,$/;"	p	signature:(struct s_linked_vptr *head, void *vptr_to_add)
inv_capacity	vpr_types.h	/^    float inv_capacity;$/;"	m	struct:s_place_region	access:public
inv_length	vpr_types.h	/^    float inv_length;$/;"	m	struct:s_rr_indexed_data	access:public
invalidate_heap_entries	route_common.c	/^invalidate_heap_entries(int sink_node,$/;"	f	signature:(int sink_node, int ipin_node)
invalidate_heap_entries	route_common.h	/^void invalidate_heap_entries(int sink_node,$/;"	p	signature:(int sink_node, int ipin_node)
ipin	path_delay2.h	/^    short ipin;$/;"	m	struct:__anon9	access:public
ipin_mux_trans_size	main.c	/^float ipin_mux_trans_size = 0;$/;"	v
ipin_mux_trans_size	xml_arch.h	/^     float ipin_mux_trans_size;$/;"	m	struct:s_arch	access:public
is_Fc_frac	vpr_types.h	/^    boolean is_Fc_frac;$/;"	m	struct:s_type_descriptor	access:public
is_Fc_out_full_flex	vpr_types.h	/^    boolean is_Fc_out_full_flex;$/;"	m	struct:s_type_descriptor	access:public
is_cbox	rr_graph2.c	/^is_cbox(IN int chan,$/;"	f	signature:(IN int chan, IN int seg, IN int track, IN t_seg_details * seg_details, IN enum e_directionality directionality)
is_cbox	rr_graph2.h	/^boolean is_cbox(IN int chan,$/;"	p	signature:(IN int chan, IN int seg, IN int track, IN t_seg_details * seg_details, IN enum e_directionality directionality)
is_empty_heap	route_common.c	/^is_empty_heap(void)$/;"	f	signature:(void)
is_empty_heap	route_common.h	/^boolean is_empty_heap(void);$/;"	p	signature:(void)
is_global	globals_declare.h	/^boolean *is_global;$/;"	v
is_global	vpr_types.h	/^    boolean is_global;$/;"	m	struct:s_net	access:public
is_global_clock	path_delay.c	/^is_global_clock(int iblk,$/;"	f	file:	signature:(int iblk, int sub, int subpin, int *num_subblocks_per_block, t_subblock ** subblock_inf)
is_global_clock	path_delay.c	/^static boolean is_global_clock(int iblk,$/;"	p	file:	signature:(int iblk, int sub, int subpin, int *num_subblocks_per_block, t_subblock ** subblock_inf)
is_global_pin	vpr_types.h	/^    boolean *is_global_pin;	\/* [0..num_pins-1] *\/$/;"	m	struct:s_type_descriptor	access:public
is_opin	vpr_utils.c	/^is_opin(int ipin,$/;"	f	signature:(int ipin, t_type_ptr type)
is_opin	vpr_utils.h	/^boolean is_opin(int ipin,$/;"	p	signature:(int ipin, t_type_ptr type)
is_sbox	rr_graph2.c	/^is_sbox(IN int chan,$/;"	f	signature:(IN int chan, IN int wire_seg, IN int sb_seg, IN int track, IN t_seg_details * seg_details, IN enum e_directionality directionality)
is_sbox	rr_graph2.h	/^boolean is_sbox(IN int chan,$/;"	p	signature:(IN int chan, IN int wire_seg, IN int sb_seg, IN int track, IN t_seg_details * seg_details, IN enum e_directionality directionality)
ispoly	graphics.c	/^    int ispoly;$/;"	m	struct:__anon5	file:	access:public
ispressed	graphics.c	/^    int ispressed;$/;"	m	struct:__anon5	file:	access:public
istext	graphics.c	/^    int istext;$/;"	m	struct:__anon5	file:	access:public
isubblk	path_delay2.h	/^    short isubblk;$/;"	m	struct:__anon9	access:public
iswitch	net_delay.c	/^    short iswitch;$/;"	m	struct:s_linked_rc_edge	file:	access:public
iswitch	route_tree_timing.h	/^    short iswitch;$/;"	m	struct:s_linked_rt_edge	access:public
iswitch	rr_graph_util.h	/^    short iswitch;$/;"	m	struct:s_linked_edge	access:public
iswitch	vpr_types.h	/^    short iswitch;$/;"	m	struct:s_trace	access:public
label_incoming_wires	rr_graph2.c	/^label_incoming_wires(IN int chan_num,$/;"	f	file:	signature:(IN int chan_num, IN int seg_num, IN int sb_seg, IN t_seg_details * seg_details, IN int max_len, IN enum e_direction dir, IN int nodes_per_chan, OUT int *num_incoming_wires, OUT int *num_ending_wires)
label_incoming_wires	rr_graph2.c	/^static int *label_incoming_wires(IN int chan_num,$/;"	p	file:	signature:(IN int chan_num, IN int seg_num, IN int sb_seg, IN t_seg_details * seg_details, IN int max_len, IN enum e_direction dir, IN int nodes_per_chan, OUT int *num_incoming_wires, OUT int *num_ending_wires)
label_wire_muxes	rr_graph2.c	/^label_wire_muxes(IN int chan_num,$/;"	f	file:	signature:(IN int chan_num, IN int seg_num, IN t_seg_details * seg_details, IN int max_len, IN enum e_direction dir, IN int nodes_per_chan, OUT int *num_wire_muxes)
label_wire_muxes	rr_graph2.c	/^static int *label_wire_muxes(IN int chan_num,$/;"	p	file:	signature:(IN int chan_num, IN int seg_num, IN t_seg_details * seg_details, IN int max_len, IN enum e_direction dir, IN int nodes_per_chan, OUT int *num_wire_muxes)
label_wire_muxes_for_balance	rr_graph2.c	/^label_wire_muxes_for_balance(IN int chan_num,$/;"	f	file:	signature:(IN int chan_num, IN int seg_num, IN t_seg_details * seg_details, IN int max_len, IN enum e_direction direction, IN int nodes_per_chan, IN int *num_wire_muxes, IN t_rr_type chan_type, IN int *opin_mux_size, IN t_ivec *** rr_node_indices)
label_wire_muxes_for_balance	rr_graph2.c	/^static int *label_wire_muxes_for_balance(IN int chan_num,$/;"	p	file:	signature:(IN int chan_num, IN int seg_num, IN t_seg_details * seg_details, IN int max_len, IN enum e_direction direction, IN int nodes_per_chan, IN int *num_wire_muxes, IN t_rr_type chan_type, IN int *opin_mux_size, IN t_ivec *** rr_node_indices)
len	ezxml.c	/^    size_t len;			\/* length of allocated memory for mmap, -1 for malloc *\/$/;"	m	struct:ezxml_root	file:	access:public
length	vpr_types.h	/^    int length;$/;"	m	struct:s_seg_details	access:public
length	vpr_types.h	/^    int length;$/;"	m	struct:s_segment_inf	access:public
limit_value	util.c	/^limit_value(int cur,$/;"	f	signature:(int cur, int max, const char *name)
limit_value	util.h	/^int limit_value(int cur,$/;"	p	signature:(int cur, int max, const char *name)
line_types	graphics.h	/^enum line_types$/;"	g
linenum	util.c	/^int linenum;			\/* Line in file being parsed. *\/$/;"	v
linked_f_pointer_free_head	route_common.c	/^static struct s_linked_f_pointer *linked_f_pointer_free_head = NULL;$/;"	v	typeref:struct:s_linked_f_pointer	file:
list	util.h	/^    int *list;$/;"	m	struct:s_ivec	access:public
load_chan_rr_indices	rr_graph2.c	/^load_chan_rr_indices(IN int nodes_per_chan,$/;"	f	file:	signature:(IN int nodes_per_chan, IN int chan_len, IN int num_chans, IN t_rr_type type, IN t_seg_details * seg_details, INOUT int *index, INOUT t_ivec *** indices)
load_chan_rr_indices	rr_graph2.c	/^static void load_chan_rr_indices(IN int nodes_per_chan,$/;"	p	file:	signature:(IN int nodes_per_chan, IN int chan_len, IN int num_chans, IN t_rr_type type, IN t_seg_details * seg_details, INOUT int *index, INOUT t_ivec *** indices)
load_channel_occupancies	stats.c	/^load_channel_occupancies(int **chanx_occ,$/;"	f	file:	signature:(int **chanx_occ, int **chany_occ)
load_channel_occupancies	stats.c	/^static void load_channel_occupancies(int **chanx_occ,$/;"	p	file:	signature:(int **chanx_occ, int **chany_occ)
load_constant_net_delay	net_delay.c	/^load_constant_net_delay(float **net_delay,$/;"	f	signature:(float **net_delay, float delay_value)
load_constant_net_delay	net_delay.h	/^void load_constant_net_delay(float **net_delay,$/;"	p	signature:(float **net_delay, float delay_value)
load_criticalities	timing_place.c	/^load_criticalities(struct s_placer_opts placer_opts,$/;"	f	signature:(struct s_placer_opts placer_opts, float **net_slack, float d_max, float crit_exponent)
load_criticalities	timing_place.h	/^void load_criticalities(struct s_placer_opts placer_opts,$/;"	p	signature:(struct s_placer_opts placer_opts, float **net_slack, float d_max, float crit_exponent)
load_font	graphics.c	/^load_font(int pointsize)$/;"	f	file:	signature:(int pointsize)
load_net_delay_from_routing	net_delay.c	/^load_net_delay_from_routing(float **net_delay)$/;"	f	signature:(float **net_delay)
load_net_delay_from_routing	net_delay.h	/^void load_net_delay_from_routing(float **net_delay);$/;"	p	signature:(float **net_delay)
load_net_rr_terminals	rr_graph.c	/^load_net_rr_terminals(t_ivec *** rr_node_indices)$/;"	f	signature:(t_ivec *** rr_node_indices)
load_net_rr_terminals	rr_graph.h	/^void load_net_rr_terminals(t_ivec *** rr_node_indices);$/;"	p	signature:(t_ivec *** rr_node_indices)
load_net_slack	path_delay.c	/^load_net_slack(float **net_slack,$/;"	f	signature:(float **net_slack, float target_cycle_time)
load_net_slack	path_delay.h	/^float load_net_slack(float **net_slack,$/;"	p	signature:(float **net_slack, float target_cycle_time)
load_new_path_R_upstream	route_tree_timing.c	/^load_new_path_R_upstream(t_rt_node * start_of_new_path_rt_node)$/;"	f	file:	signature:(t_rt_node * start_of_new_path_rt_node)
load_new_path_R_upstream	route_tree_timing.c	/^static void load_new_path_R_upstream(t_rt_node * start_of_new_path_rt_node);$/;"	p	file:	signature:(t_rt_node * start_of_new_path_rt_node)
load_one_constant_net_delay	net_delay.c	/^load_one_constant_net_delay(float **net_delay,$/;"	f	file:	signature:(float **net_delay, int inet, float delay_value)
load_one_constant_net_delay	net_delay.c	/^static void load_one_constant_net_delay(float **net_delay,$/;"	p	file:	signature:(float **net_delay, int inet, float delay_value)
load_one_fb_fanout_count	vpr_utils.c	/^load_one_fb_fanout_count(t_subblock * subblock_inf,$/;"	f	signature:(t_subblock * subblock_inf, int num_subblocks, int *num_uses_of_fb_ipin, int **num_uses_of_sblk_opin, int iblk)
load_one_fb_fanout_count	vpr_utils.h	/^void load_one_fb_fanout_count(t_subblock * subblock_inf,$/;"	p	signature:(t_subblock * subblock_inf, int num_subblocks, int *num_uses_of_fb_ipin, int **num_uses_of_sblk_opin, int iblk)
load_one_net_delay	net_delay.c	/^load_one_net_delay(float **net_delay,$/;"	f	file:	signature:(float **net_delay, int inet, t_linked_rc_ptr * rr_node_to_rc_node)
load_one_net_delay	net_delay.c	/^static void load_one_net_delay(float **net_delay,$/;"	p	file:	signature:(float **net_delay, int inet, t_linked_rc_ptr * rr_node_to_rc_node)
load_perturbed_switch_pattern	rr_graph.c	/^load_perturbed_switch_pattern(IN t_type_ptr type,$/;"	f	file:	signature:(IN t_type_ptr type, INOUT int ****tracks_connected_to_pin, IN int num_phys_pins, IN int *pin_num_ordering, IN int *side_ordering, IN int *offset_ordering, IN int nodes_per_chan, IN int Fc, enum e_directionality directionality)
load_perturbed_switch_pattern	rr_graph.c	/^static void load_perturbed_switch_pattern(IN t_type_ptr type,$/;"	p	file:	signature:(IN t_type_ptr type, INOUT int ****tracks_connected_to_pin, IN int num_phys_pins, IN int *pin_num_ordering, IN int *side_ordering, IN int *offset_ordering, IN int nodes_per_chan, IN int Fc, IN enum e_directionality directionality)
load_place_regions	place.c	/^load_place_regions(int num_regions)$/;"	f	file:	signature:(int num_regions)
load_place_regions	place.c	/^static void load_place_regions(int num_regions);$/;"	p	file:	signature:(int num_regions)
load_rc_tree_C	net_delay.c	/^load_rc_tree_C(t_rc_node * rc_node)$/;"	f	file:	signature:(t_rc_node * rc_node)
load_rc_tree_C	net_delay.c	/^static float load_rc_tree_C(t_rc_node * rc_node);$/;"	p	file:	signature:(t_rc_node * rc_node)
load_rc_tree_T	net_delay.c	/^load_rc_tree_T(t_rc_node * rc_node,$/;"	f	file:	signature:(t_rc_node * rc_node, float T_arrival)
load_rc_tree_T	net_delay.c	/^static void load_rc_tree_T(t_rc_node * rc_node,$/;"	p	file:	signature:(t_rc_node * rc_node, float T_arrival)
load_route_bb	route_common.c	/^load_route_bb(int bb_factor)$/;"	f	file:	signature:(int bb_factor)
load_route_bb	route_common.c	/^static void load_route_bb(int bb_factor);$/;"	p	file:	signature:(int bb_factor)
load_rr_indexed_data_T_values	rr_graph_indexed_data.c	/^load_rr_indexed_data_T_values(int index_start,$/;"	f	file:	signature:(int index_start, int num_indices_to_load, t_rr_type rr_type, int nodes_per_chan, t_ivec *** rr_node_indices, t_segment_inf * segment_inf)
load_rr_indexed_data_T_values	rr_graph_indexed_data.c	/^static void load_rr_indexed_data_T_values(int index_start,$/;"	p	file:	signature:(int index_start, int num_indices_to_load, t_rr_type rr_type, int nodes_per_chan, t_ivec *** rr_node_indices, t_segment_inf * segment_inf)
load_rr_indexed_data_base_costs	rr_graph_indexed_data.c	/^load_rr_indexed_data_base_costs(int nodes_per_chan,$/;"	f	file:	signature:(int nodes_per_chan, t_ivec *** rr_node_indices, enum e_base_cost_type base_cost_type, int wire_to_ipin_switch)
load_rr_indexed_data_base_costs	rr_graph_indexed_data.c	/^static void load_rr_indexed_data_base_costs(int nodes_per_chan,$/;"	p	file:	signature:(int nodes_per_chan, t_ivec *** rr_node_indices, enum e_base_cost_type base_cost_type, int wire_to_ipin_switch)
load_rt_subtree_Tdel	route_tree_timing.c	/^load_rt_subtree_Tdel(t_rt_node * subtree_rt_root,$/;"	f	file:	signature:(t_rt_node * subtree_rt_root, float Tarrival)
load_rt_subtree_Tdel	route_tree_timing.c	/^static void load_rt_subtree_Tdel(t_rt_node * subtree_rt_root,$/;"	p	file:	signature:(t_rt_node * subtree_rt_root, float Tarrival)
load_sblock_pattern_lookup	rr_graph2.c	/^load_sblock_pattern_lookup(IN int i,$/;"	f	signature:(IN int i, IN int j, IN int nodes_per_chan, IN t_seg_details * seg_details, IN int Fs, IN enum e_switch_block_type switch_block_type, INOUT short *****sblock_pattern)
load_sblock_pattern_lookup	rr_graph2.h	/^void load_sblock_pattern_lookup(IN int i,$/;"	p	signature:(IN int i, IN int j, IN int nodes_per_chan, IN t_seg_details * seg_details, IN int Fs, IN enum e_switch_block_type switch_block_type, INOUT short *****sblock_pattern)
load_simplified_device	timing_place_lookup.c	/^load_simplified_device(void)$/;"	f	file:	signature:(void)
load_simplified_device	timing_place_lookup.c	/^static void load_simplified_device(void);$/;"	p	file:	signature:(void)
load_subblock_info_to_type	SetupVPR.c	/^load_subblock_info_to_type(INOUT t_subblock_data * subblocks,$/;"	f	file:	signature:(INOUT t_subblock_data * subblocks, INOUT t_type_ptr type)
load_subblock_info_to_type	SetupVPR.c	/^static void load_subblock_info_to_type(INOUT t_subblock_data * subblocks,$/;"	p	file:	signature:(INOUT t_subblock_data * subblocks, INOUT t_type_ptr type)
load_timing_graph_net_delays	path_delay.c	/^load_timing_graph_net_delays(float **net_delay)$/;"	f	signature:(float **net_delay)
load_timing_graph_net_delays	path_delay.h	/^void load_timing_graph_net_delays(float **net_delay);$/;"	p	signature:(float **net_delay)
load_uniform_opin_switch_pattern_paired	rr_graph.c	/^load_uniform_opin_switch_pattern_paired(IN int *Fc_out,$/;"	f	file:	signature:(IN int *Fc_out, IN int num_pins, IN int *pins_in_chan_seg, IN int num_wire_inc_muxes, IN int num_wire_dec_muxes, IN int *wire_inc_muxes, IN int *wire_dec_muxes, INOUT t_rr_node * rr_node, INOUT boolean * rr_edge_done, IN t_seg_details * seg_details, OUT boolean * Fc_clipped)
load_uniform_opin_switch_pattern_paired	rr_graph.c	/^static void load_uniform_opin_switch_pattern_paired(IN int *Fc_out,$/;"	p	file:	signature:(IN int *Fc_out, IN int num_pins, IN int *pins_in_chan_seg, IN int num_wire_inc_muxes, IN int num_wire_dec_muxes, IN int *wire_inc_muxes, IN int *wire_dec_muxes, INOUT t_rr_node * rr_node, INOUT boolean * rr_edge_done, IN t_seg_details * seg_details, OUT boolean * Fc_clipped)
load_uniform_switch_pattern	rr_graph.c	/^load_uniform_switch_pattern(IN t_type_ptr type,$/;"	f	file:	signature:(IN t_type_ptr type, INOUT int ****tracks_connected_to_pin, IN int num_phys_pins, IN int *pin_num_ordering, IN int *side_ordering, IN int *offset_ordering, IN int nodes_per_chan, IN int Fc, enum e_directionality directionality)
load_uniform_switch_pattern	rr_graph.c	/^static void load_uniform_switch_pattern(IN t_type_ptr type,$/;"	p	file:	signature:(IN t_type_ptr type, INOUT int ****tracks_connected_to_pin, IN int num_phys_pins, IN int *pin_num_ordering, IN int *side_ordering, IN int *offset_ordering, IN int nodes_per_chan, IN int Fc, IN enum e_directionality directionality)
longline	vpr_types.h	/^    boolean longline;$/;"	m	struct:s_seg_details	access:public
longline	vpr_types.h	/^    boolean longline;$/;"	m	struct:s_segment_inf	access:public
lookup_dump	timing_place_lookup.c	/^static FILE *lookup_dump;	\/* If debugging mode is on, print out to$/;"	v	file:
m	ezxml.c	/^    char *m;			\/* original xml string *\/$/;"	m	struct:ezxml_root	file:	access:public
main	ezxml.c	/^main(int argc,$/;"	f	signature:(int argc, char **argv)
main	main.c	/^main(int argc,$/;"	f	signature:(int argc, char **argv)
main	testing.c	/^main()$/;"	f
map_button	graphics.c	/^map_button(int bnum)$/;"	f	file:	signature:(int bnum)
map_button	graphics.c	/^static void map_button(int bnum);$/;"	p	file:	signature:(int bnum)
mark_ends	route_common.c	/^mark_ends(int inet)$/;"	f	signature:(int inet)
mark_ends	route_common.h	/^void mark_ends(int inet);$/;"	p	signature:(int inet)
max	graphics.c	84;"	d	file:
max	util.h	31;"	d
max_criticality	ReadOptions.h	/^	float max_criticality;$/;"	m	struct:s_options	access:public
max_criticality	vpr_types.h	/^    float max_criticality;$/;"	m	struct:s_router_opts	access:public
max_index	rr_graph.c	/^    int max_index;$/;"	m	struct:s_mux_size_distribution	file:	access:public
max_router_iterations	ReadOptions.h	/^	int max_router_iterations;$/;"	m	struct:s_options	access:public
max_router_iterations	vpr_types.h	/^    int max_router_iterations;$/;"	m	struct:s_router_opts	access:public
max_subblock_inputs	vpr_types.h	/^    int max_subblock_inputs;$/;"	m	struct:s_type_descriptor	access:public
max_subblock_outputs	vpr_types.h	/^    int max_subblock_outputs;$/;"	m	struct:s_type_descriptor	access:public
max_subblocks	vpr_types.h	/^    int max_subblocks;$/;"	m	struct:s_type_descriptor	access:public
menu	graphics.c	/^static Window toplevel, menu, textarea;	\/* various windows *\/$/;"	v	file:
menu_font_size	graphics.c	/^static const int menu_font_size = 14;	\/* Font for menus and dialog boxes. *\/$/;"	v	file:
menutext	graphics.c	/^menutext(Window win,$/;"	f	file:	signature:(Window win, int xc, int yc, char *text)
message	graphics.c	/^static char message[BUFSIZE] = "\\0";	\/* User message to display *\/$/;"	v	file:
min	graphics.c	85;"	d	file:
min	util.h	32;"	d
min_dist_from_mst	mst.c	/^min_dist_from_mst(int node_outside,$/;"	f	file:	signature:(int node_outside, int inet, boolean * in_mst, int *node_inside)
min_dist_from_mst	mst.c	/^static int min_dist_from_mst(int node_outside,$/;"	p	file:	signature:(int node_outside, int inet, boolean * in_mst, int *node_inside)
mux_count	rr_graph.c	/^    int mux_count;$/;"	m	struct:s_mux_size_distribution	file:	access:public
mux_trans_size	vpr_types.h	/^    float mux_trans_size;$/;"	m	struct:s_switch_inf	access:public
my_atoi	util.c	/^my_atoi(const char *str)$/;"	f	signature:(const char *str)
my_atoi	util.h	/^int my_atoi(const char *str);$/;"	p	signature:(const char *str)
my_calloc	util.c	/^my_calloc(size_t nelem,$/;"	f	signature:(size_t nelem, size_t size)
my_calloc	util.h	/^void *my_calloc(size_t nelem,$/;"	p	signature:(size_t nelem, size_t size)
my_chunk_malloc	util.c	/^my_chunk_malloc(size_t size,$/;"	f	signature:(size_t size, struct s_linked_vptr **chunk_ptr_head, int *mem_avail_ptr, char **next_mem_loc_ptr)
my_chunk_malloc	util.h	/^void *my_chunk_malloc(size_t size,$/;"	p	signature:(size_t size, struct s_linked_vptr **chunk_ptr_head, int *mem_avail_ptr, char **next_mem_loc_ptr)
my_fgets	util.c	/^my_fgets(char *buf,$/;"	f	signature:(char *buf, int max_size, FILE * fp)
my_fgets	util.h	/^char *my_fgets(char *buf,$/;"	p	signature:(char *buf, int max_size, FILE * fp)
my_fopen	util.c	/^my_fopen(const char *fname,$/;"	f	signature:(const char *fname, const char *flag)
my_fopen	util.h	/^FILE *my_fopen(const char *fname,$/;"	p	signature:(const char *fname, const char *flag)
my_frand	util.c	/^my_frand(void)$/;"	f	signature:(void)
my_frand	util.h	/^float my_frand(void);$/;"	p	signature:(void)
my_irand	util.c	/^my_irand(int imax)$/;"	f	signature:(int imax)
my_irand	util.h	/^int my_irand(int imax);$/;"	p	signature:(int imax)
my_malloc	util.c	/^my_malloc(size_t size)$/;"	f	signature:(size_t size)
my_malloc	util.h	/^void *my_malloc(size_t size);$/;"	p	signature:(size_t size)
my_realloc	util.c	/^my_realloc(void *ptr,$/;"	f	signature:(void *ptr, size_t size)
my_realloc	util.h	/^void *my_realloc(void *ptr,$/;"	p	signature:(void *ptr, size_t size)
my_srandom	util.c	/^my_srandom(int seed)$/;"	f	signature:(int seed)
my_srandom	util.h	/^void my_srandom(int seed);$/;"	p	signature:(int seed)
my_strdup	util.c	/^my_strdup(const char *str)$/;"	f	signature:(const char *str)
my_strdup	util.h	/^char *my_strdup(const char *str);$/;"	p	signature:(const char *str)
my_strncpy	util.c	/^my_strncpy(char *dest,$/;"	f	signature:(char *dest, const char *src, size_t size)
my_strncpy	util.h	/^char *my_strncpy(char *dest,$/;"	p	signature:(char *dest, const char *src, size_t size)
my_strtok	util.c	/^my_strtok(char *ptr,$/;"	f	signature:(char *ptr, char *tokens, FILE * fp, char *buf)
my_strtok	util.h	/^char *my_strtok(char *ptr,$/;"	p	signature:(char *ptr, char *tokens, FILE * fp, char *buf)
name	ezxml.h	/^	char *name;		\/* tag name *\/$/;"	m	struct:ezxml	access:public
name	hash.h	/^    char *name;$/;"	m	struct:s_hash	access:public
name	vpr_types.h	/^    char *name;$/;"	m	struct:s_block	access:public
name	vpr_types.h	/^    char *name;$/;"	m	struct:s_net	access:public
name	vpr_types.h	/^    char *name;$/;"	m	struct:s_subblock	access:public
name	vpr_types.h	/^    char *name;$/;"	m	struct:s_switch_inf	access:public
name	vpr_types.h	/^    const char *name;$/;"	m	struct:s_type_descriptor	access:public
nelem	util.h	/^    int nelem;$/;"	m	struct:s_ivec	access:public
net	globals_declare.h	/^struct s_net *net;$/;"	v	typeref:struct:s_net
net	main.c	/^struct s_net *net = NULL;$/;"	v	typeref:struct:s_net
net_color	draw.c	/^static enum color_types *net_color, *block_color;$/;"	v	typeref:enum:color_types	file:
net_cost	place.c	/^static float *net_cost = NULL, *temp_net_cost = NULL;	\/* [0..num_nets-1] *\/$/;"	v	file:
net_delay	timing_place_lookup.c	/^static float **net_delay;$/;"	v	file:
net_delay_chunk_list_head	timing_place.c	/^static struct s_linked_vptr *net_delay_chunk_list_head;$/;"	v	typeref:struct:s_linked_vptr	file:
net_pin_index	place.c	/^static int **net_pin_index = NULL;$/;"	v	file:
net_rr_terminals	globals_declare.h	/^int **net_rr_terminals;		\/* [0..num_nets-1][0..num_pins-1] *\/$/;"	v
net_rr_terminals	main.c	/^int **net_rr_terminals = NULL;	\/* [0..num_nets-1][0..num_pins-1] *\/$/;"	v
net_slack	timing_place_lookup.c	/^static float **net_slack;$/;"	v	file:
net_to_driver_tnode	path_delay2.c	/^int *net_to_driver_tnode;$/;"	v
netlist_info_stat	ray_block_classify.c	/^void netlist_info_stat(int** b2b_connections, int* block_associations)$/;"	f	signature:(int** b2b_connections, int* block_associations)
netlist_info_stat	ray_block_classify.h	/^void netlist_info_stat(int** b2b_connections, int* block_associations);$/;"	p	signature:(int** b2b_connections, int* block_associations)
nets	vpr_types.h	/^    int *nets;$/;"	m	struct:s_block	access:public
next	ezxml.h	/^	ezxml_t next;		\/* next tag with same name in this section at this depth *\/$/;"	m	struct:ezxml	access:public
next	hash.h	/^    struct s_hash *next;$/;"	m	struct:s_hash	typeref:struct:s_hash::s_hash	access:public
next	net_delay.c	/^	struct s_rc_node *next;$/;"	m	union:s_rc_node::__anon4	typeref:struct:s_rc_node::__anon4::s_rc_node	file:	access:public
next	net_delay.c	/^    struct s_linked_rc_edge *next;$/;"	m	struct:s_linked_rc_edge	typeref:struct:s_linked_rc_edge::s_linked_rc_edge	file:	access:public
next	net_delay.c	/^    struct s_linked_rc_ptr *next;$/;"	m	struct:s_linked_rc_ptr	typeref:struct:s_linked_rc_ptr::s_linked_rc_ptr	file:	access:public
next	place_and_route.h	/^    struct s_fmap_cell *next;$/;"	m	struct:s_fmap_cell	typeref:struct:s_fmap_cell::s_fmap_cell	access:public
next	route_common.h	/^	struct s_heap *next;$/;"	m	union:s_heap::__anon1	typeref:struct:s_heap::__anon1::s_heap	access:public
next	route_tree_timing.h	/^	struct s_rt_node *next;$/;"	m	union:s_rt_node::__anon10	typeref:struct:s_rt_node::__anon10::s_rt_node	access:public
next	route_tree_timing.h	/^    struct s_linked_rt_edge *next;$/;"	m	struct:s_linked_rt_edge	typeref:struct:s_linked_rt_edge::s_linked_rt_edge	access:public
next	rr_graph.c	/^    struct s_mux *next;$/;"	m	struct:s_mux	typeref:struct:s_mux::s_mux	file:	access:public
next	rr_graph.c	/^    struct s_mux_size_distribution *next;$/;"	m	struct:s_mux_size_distribution	typeref:struct:s_mux_size_distribution::s_mux_size_distribution	file:	access:public
next	rr_graph_util.h	/^    struct s_linked_edge *next;$/;"	m	struct:s_linked_edge	typeref:struct:s_linked_edge::s_linked_edge	access:public
next	util.h	/^    struct s_linked_int *next;$/;"	m	struct:s_linked_int	typeref:struct:s_linked_int::s_linked_int	access:public
next	util.h	/^    struct s_linked_vptr *next;$/;"	m	struct:s_linked_vptr	typeref:struct:s_linked_vptr::s_linked_vptr	access:public
next	vpr_types.h	/^    struct s_linked_f_pointer *next;$/;"	m	struct:s_linked_f_pointer	typeref:struct:s_linked_f_pointer::s_linked_f_pointer	access:public
next	vpr_types.h	/^    struct s_trace *next;$/;"	m	struct:s_trace	typeref:struct:s_trace::s_trace	access:public
nint	util.h	34;"	d
node_block	vpr_types.h	/^    int *node_block;$/;"	m	struct:s_net	access:public
node_block_pin	vpr_types.h	/^    int *node_block_pin;$/;"	m	struct:s_net	access:public
node_to_heap	route_common.c	/^node_to_heap(int inode,$/;"	f	signature:(int inode, float cost, int prev_node, int prev_edge, float backward_path_cost, float R_upstream)
node_to_heap	route_common.h	/^void node_to_heap(int inode,$/;"	p	signature:(int inode, float cost, int prev_node, int prev_edge, float backward_path_cost, float R_upstream)
nonlinear_cong_cost	place.c	/^nonlinear_cong_cost(int num_regions)$/;"	f	file:	signature:(int num_regions)
nonlinear_cong_cost	place.c	/^static float nonlinear_cong_cost(int num_regions);$/;"	p	file:	signature:(int num_regions)
num_blocks	globals_declare.h	/^int num_nets, num_blocks;$/;"	v
num_blocks	main.c	/^int num_blocks = 0;$/;"	v
num_buttons	graphics.c	/^static int num_buttons;		\/* Number of menu buttons *\/$/;"	v	file:
num_class	vpr_types.h	/^    int num_class;$/;"	m	struct:s_type_descriptor	access:public
num_const_gen	vpr_types.h	/^    int num_const_gen;$/;"	m	struct:s_subblock_data	access:public
num_drivers	vpr_types.h	/^    int num_drivers;$/;"	m	struct:s_type_descriptor	access:public
num_edges	path_delay2.h	/^    int num_edges;$/;"	m	struct:__anon7	access:public
num_edges	vpr_types.h	/^    short num_edges;$/;"	m	struct:s_rr_node	access:public
num_ff	vpr_types.h	/^    int num_ff;$/;"	m	struct:s_subblock_data	access:public
num_grid_loc_def	vpr_types.h	/^    int num_grid_loc_def;$/;"	m	struct:s_type_descriptor	access:public
num_heap_allocated	route_common.c	/^static int num_heap_allocated = 0;$/;"	v	file:
num_linked_f_pointer_allocated	route_common.c	/^static int num_linked_f_pointer_allocated = 0;$/;"	v	file:
num_nets	globals_declare.h	/^int num_nets, num_blocks;$/;"	v
num_nets	main.c	/^int num_nets = 0;$/;"	v
num_opin_drivers	vpr_types.h	/^    int num_opin_drivers;	\/* UDSD by WMF (could use "short") *\/$/;"	m	struct:s_rr_node	access:public
num_pins	vpr_types.h	/^    int num_pins;$/;"	m	struct:s_class	access:public
num_pins	vpr_types.h	/^    int num_pins;$/;"	m	struct:s_type_descriptor	access:public
num_receivers	vpr_types.h	/^    int num_receivers;$/;"	m	struct:s_type_descriptor	access:public
num_regions	vpr_types.h	/^    int num_regions;$/;"	m	struct:s_placer_opts	access:public
num_rp	place_stats.c	/^    int num_rp[MAX_LEN];$/;"	m	struct:relapos_rec_s	file:	access:public
num_rr_indexed_data	globals_declare.h	/^int num_rr_indexed_data;$/;"	v
num_rr_indexed_data	main.c	/^int num_rr_indexed_data = 0;$/;"	v
num_rr_nodes	globals_declare.h	/^int num_rr_nodes;$/;"	v
num_rr_nodes	main.c	/^int num_rr_nodes = 0;$/;"	v
num_segment	vpr_types.h	/^    int num_segment;$/;"	m	struct:s_det_routing_arch	access:public
num_segments	xml_arch.h	/^     int num_segments;$/;"	m	struct:s_arch	access:public
num_sinks	vpr_types.h	/^    int num_sinks;$/;"	m	struct:s_net	access:public
num_subblocks_per_block	vpr_types.h	/^    int *num_subblocks_per_block;$/;"	m	struct:s_subblock_data	access:public
num_switch	vpr_types.h	/^    short num_switch;$/;"	m	struct:s_det_routing_arch	access:public
num_switches	xml_arch.h	/^     int num_switches;$/;"	m	struct:s_arch	access:public
num_tnode_levels	path_delay2.c	/^int num_tnode_levels;		\/* Number of levels in the timing graph. *\/$/;"	v
num_tnodes	path_delay2.c	/^int num_tnodes;			\/* Number of nodes (pins) in the timing graph *\/$/;"	v
num_trace_allocated	route_common.c	/^static int num_trace_allocated = 0;	\/* To watch for memory leaks. *\/$/;"	v	file:
num_types	main.c	/^int num_types = 0;$/;"	v
num_types_backup	timing_place_lookup.c	/^static int num_types_backup;$/;"	v	file:
num_wire_drivers	vpr_types.h	/^    int num_wire_drivers;	\/* UDSD by WMF *\/$/;"	m	struct:s_rr_node	access:public
nx	globals_declare.h	/^int nx, ny;$/;"	v
nx	main.c	/^int nx = 0;$/;"	v
ny	globals_declare.h	/^int nx, ny;$/;"	v
ny	main.c	/^int ny = 0;$/;"	v
occ	vpr_types.h	/^    short occ;$/;"	m	struct:s_rr_node	access:public
occupancy	vpr_types.h	/^    float occupancy;$/;"	m	struct:s_place_region	access:public
off	ezxml.h	/^	size_t off;		\/* tag offset from start of parent tag character content *\/$/;"	m	struct:ezxml	access:public
offset	vpr_types.h	/^    int offset;$/;"	m	struct:s_grid_tile	access:public
open	ezxml.c	58;"	d	file:
opin_switch	vpr_types.h	/^    short opin_switch;$/;"	m	struct:s_seg_details	access:public
opin_switch	vpr_types.h	/^    short opin_switch;$/;"	m	struct:s_segment_inf	access:public
ordered	ezxml.h	/^	ezxml_t ordered;	\/* next tag, same section and depth, in original order *\/$/;"	m	struct:ezxml	access:public
ortho_cost_index	vpr_types.h	/^    int ortho_cost_index;$/;"	m	struct:s_rr_indexed_data	access:public
out_edges	path_delay2.h	/^    t_tedge *out_edges;$/;"	m	struct:__anon7	access:public
outputs	vpr_types.h	/^    int *outputs;$/;"	m	struct:s_subblock	access:public
pad_loc_file	vpr_types.h	/^    char *pad_loc_file;$/;"	m	struct:s_placer_opts	access:public
pad_loc_type	vpr_types.h	/^    enum e_pad_loc_type pad_loc_type;$/;"	m	struct:s_placer_opts	typeref:enum:s_placer_opts::e_pad_loc_type	access:public
parent	ezxml.h	/^	ezxml_t parent;		\/* parent tag, NULL if current tag is root tag *\/$/;"	m	struct:ezxml	access:public
parent_node	route_tree_timing.h	/^    struct s_rt_node *parent_node;$/;"	m	struct:s_rt_node	typeref:struct:s_rt_node::s_rt_node	access:public
parent_switch	route_tree_timing.h	/^    short parent_switch;$/;"	m	struct:s_rt_node	access:public
path_cost	route_common.h	/^    float path_cost;$/;"	m	struct:__anon2	access:public
pathfinder_update_cost	route_common.c	/^pathfinder_update_cost(float pres_fac,$/;"	f	signature:(float pres_fac, float acc_fac)
pathfinder_update_cost	route_common.h	/^void pathfinder_update_cost(float pres_fac,$/;"	p	signature:(float pres_fac, float acc_fac)
pathfinder_update_one_cost	route_common.c	/^pathfinder_update_one_cost(struct s_trace *route_segment_start,$/;"	f	signature:(struct s_trace *route_segment_start, int add_or_sub, float pres_fac)
pathfinder_update_one_cost	route_common.h	/^void pathfinder_update_one_cost(struct s_trace *route_segment_start,$/;"	p	signature:(struct s_trace *route_segment_start, int add_or_sub, float pres_fac)
peak	vpr_types.h	/^    float peak;$/;"	m	struct:s_chan	access:public
pfreq	vpr_types.h	/^enum pfreq$/;"	g
pi	ezxml.c	/^    char ***pi;			\/* processing instructions *\/$/;"	m	struct:ezxml_root	file:	access:public
pic_on_screen	draw.c	/^static enum pic_type pic_on_screen = NO_PICTURE;	\/* What do I draw? *\/$/;"	v	typeref:enum:pic_type	file:
pic_type	vpr_types.h	/^enum pic_type$/;"	g
pin_and_chan_adjacent	check_route.c	/^pin_and_chan_adjacent(int pin_node,$/;"	f	file:	signature:(int pin_node, int chan_node)
pin_and_chan_adjacent	check_route.c	/^static int pin_and_chan_adjacent(int pin_node,$/;"	p	file:	signature:(int pin_node, int chan_node)
pin_class	vpr_types.h	/^    int *pin_class;		\/* [0..num_pins-1] *\/$/;"	m	struct:s_type_descriptor	access:public
pin_criticality	timing_place_lookup.c	/^static float *pin_criticality;$/;"	v	file:
pin_size	draw.c	/^static float tile_width, pin_size;$/;"	v	file:
pinlist	vpr_types.h	/^    int *pinlist;$/;"	m	struct:s_class	access:public
pinlist_str	read_netlist.c	/^static char *pinlist_str = "pinlist:";$/;"	v	file:
pinloc	vpr_types.h	/^    int ***pinloc;		\/* [0..height-1][0..3][0..num_pins-1] *\/$/;"	m	struct:s_type_descriptor	access:public
place_algorithm	vpr_types.h	/^    enum e_place_algorithm place_algorithm;$/;"	m	struct:s_placer_opts	typeref:enum:s_placer_opts::e_place_algorithm	access:public
place_and_route	place_and_route.c	/^place_and_route(enum e_operation operation,$/;"	f	signature:(enum e_operation operation, struct s_placer_opts placer_opts, char *place_file, char *net_file, char *arch_file, char *route_file, struct s_annealing_sched annealing_sched, struct s_router_opts router_opts, struct s_det_routing_arch det_routing_arch, t_segment_inf * segment_inf, t_timing_inf timing_inf, t_subblock_data * subblock_data_ptr, t_chan_width_dist chan_width_dist)
place_and_route	place_and_route.h	/^void place_and_route(enum e_operation operation,$/;"	p	signature:(enum e_operation operation, struct s_placer_opts placer_opts, char *place_file, char *net_file, char *arch_file, char *route_file, struct s_annealing_sched annealing_sched, struct s_router_opts router_opts, struct s_det_routing_arch det_routing_arch, t_segment_inf * segment_inf, t_timing_inf timing_inf, t_subblock_data * subblock_data_ptr, t_chan_width_dist chan_width_dist)
place_c_types	vpr_types.h	/^enum place_c_types$/;"	g
place_chan_width	vpr_types.h	/^    int place_chan_width;$/;"	m	struct:s_placer_opts	access:public
place_cost_exp	ReadOptions.h	/^	float place_cost_exp;$/;"	m	struct:s_options	access:public
place_cost_exp	vpr_types.h	/^    float place_cost_exp;$/;"	m	struct:s_placer_opts	access:public
place_cost_type	vpr_types.h	/^    enum place_c_types place_cost_type;$/;"	m	struct:s_placer_opts	typeref:enum:s_placer_opts::place_c_types	access:public
place_exp_first	ReadOptions.h	/^	float place_exp_first;$/;"	m	struct:s_options	access:public
place_exp_last	ReadOptions.h	/^	float place_exp_last;$/;"	m	struct:s_options	access:public
place_freq	vpr_types.h	/^    enum pfreq place_freq;$/;"	m	struct:s_placer_opts	typeref:enum:s_placer_opts::pfreq	access:public
place_region_bounds_x	place.c	/^static float *place_region_bounds_x, *place_region_bounds_y;$/;"	v	file:
place_region_bounds_y	place.c	/^static float *place_region_bounds_x, *place_region_bounds_y;$/;"	v	file:
place_region_x	place.c	/^static struct s_place_region **place_region_x, **place_region_y;$/;"	v	typeref:struct:s_place_region	file:
place_region_y	place.c	/^static struct s_place_region **place_region_x, **place_region_y;$/;"	v	typeref:struct:	file:
point_to_point_delay_cost	place.c	/^static float **point_to_point_delay_cost = NULL;$/;"	v	file:
point_to_point_timing_cost	place.c	/^static float **point_to_point_timing_cost = NULL;$/;"	v	file:
poly	graphics.c	/^    int poly[3][2];$/;"	m	struct:__anon5	file:	access:public
post_place_sync	place_and_route.c	/^post_place_sync(IN int num_blocks,$/;"	f	signature:(IN int num_blocks, INOUT const struct s_block block_list[], INOUT t_subblock_data * subblock_data_ptr)
post_place_sync	place_and_route.c	/^void post_place_sync(IN int num_blocks,$/;"	p	file:	signature:(IN int num_blocks, INOUT const struct s_block block_list[], INOUT t_subblock_data * subblock_data_ptr)
postscript	graphics.c	/^postscript(void (*drawscreen) (void))$/;"	f	file:	signature:(void (*drawscreen) (void))
postscript	graphics.c	/^static void postscript(void (*drawscreen) (void));$/;"	p	file:	signature:(void (*drawscreen) (void))
pres_cost	route_common.h	/^    float pres_cost;$/;"	m	struct:__anon2	access:public
pres_fac_mult	ReadOptions.h	/^	float pres_fac_mult;$/;"	m	struct:s_options	access:public
pres_fac_mult	vpr_types.h	/^    float pres_fac_mult;$/;"	m	struct:s_router_opts	access:public
prev_edge	route_common.h	/^    int prev_edge;$/;"	m	struct:s_heap	access:public
prev_edge	route_common.h	/^    short prev_edge;$/;"	m	struct:__anon2	access:public
prev_node	route_common.h	/^	int prev_node;$/;"	m	union:s_heap::__anon1	access:public
prev_node	route_common.h	/^    int prev_node;$/;"	m	struct:__anon2	access:public
print_array	timing_place_lookup.c	/^print_array(float **array_to_print,$/;"	f	file:	signature:(float **array_to_print, int x1, int x2, int y1, int y2)
print_array	timing_place_lookup.c	/^static void print_array(float **array_to_print,$/;"	p	file:	signature:(float **array_to_print, int x1, int x2, int y1, int y2)
print_critical_path	path_delay.c	/^print_critical_path(char *fname,$/;"	f	signature:(char *fname, t_subblock_data subblock_data)
print_critical_path	path_delay.h	/^void print_critical_path(char *fname,$/;"	p	signature:(char *fname, t_subblock_data subblock_data)
print_critical_path_node	path_delay2.c	/^print_critical_path_node(FILE * fp,$/;"	f	signature:(FILE * fp, t_linked_int * critical_path_node, t_subblock_data subblock_data)
print_critical_path_node	path_delay2.h	/^float print_critical_path_node(FILE * fp,$/;"	p	signature:(FILE * fp, t_linked_int * critical_path_node, t_subblock_data subblock_data)
print_distribution	rr_graph.c	/^print_distribution(FILE * fptr,$/;"	f	file:	signature:(FILE * fptr, t_mux_size_distribution * distr_struct)
print_distribution	rr_graph.c	/^static void print_distribution(FILE * fptr,$/;"	p	file:	signature:(FILE * fptr, t_mux_size_distribution * distr_struct)
print_int_matrix3	util.c	/^print_int_matrix3(int ***vptr,$/;"	f	signature:(int ***vptr, int nrmin, int nrmax, int ncmin, int ncmax, int ndmin, int ndmax, char *file)
print_int_matrix3	util.h	/^void print_int_matrix3(int ***vptr,$/;"	p	signature:(int ***vptr, int nrmin, int nrmax, int ncmin, int ncmax, int ndmin, int ndmax, char *file)
print_lambda	stats.c	/^print_lambda(void)$/;"	f	signature:(void)
print_lambda	stats.h	/^void print_lambda(void);$/;"	p	signature:(void)
print_net_delay	net_delay.c	/^print_net_delay(float **net_delay,$/;"	f	signature:(float **net_delay, char *fname)
print_net_delay	net_delay.h	/^void print_net_delay(float **net_delay,$/;"	p	signature:(float **net_delay, char *fname)
print_net_slack	path_delay.c	/^print_net_slack(char *fname,$/;"	f	signature:(char *fname, float **net_slack)
print_net_slack	path_delay.h	/^void print_net_slack(char *fname,$/;"	p	signature:(char *fname, float **net_slack)
print_netlist	print_netlist.c	/^print_netlist(char *foutput,$/;"	f	signature:(char *foutput, char *net_file, t_subblock_data subblock_data)
print_netlist	print_netlist.h	/^void print_netlist(char *foutput,$/;"	p	signature:(char *foutput, char *net_file, t_subblock_data subblock_data)
print_pinnum	print_netlist.c	/^print_pinnum(FILE * fp,$/;"	f	file:	signature:(FILE * fp, int pinnum)
print_pinnum	print_netlist.c	/^static void print_pinnum(FILE * fp,$/;"	p	file:	signature:(FILE * fp, int pinnum)
print_place	read_place.c	/^print_place(char *place_file,$/;"	f	signature:(char *place_file, char *net_file, char *arch_file)
print_place	read_place.h	/^void print_place(IN char *place_file,$/;"	p	signature:(IN char *place_file, IN char *net_file, IN char *arch_file)
print_relative_pos_distr	place_stats.c	/^print_relative_pos_distr(void)$/;"	f	signature:(void)
print_relative_pos_distr	place_stats.h	/^void print_relative_pos_distr(void);$/;"	p	signature:(void)
print_route	route_common.c	/^print_route(char *route_file)$/;"	f	signature:(char *route_file)
print_route	route_export.h	/^void print_route(char *name);$/;"	p	signature:(char *name)
print_rr_indexed_data	rr_graph.c	/^print_rr_indexed_data(FILE * fp,$/;"	f	signature:(FILE * fp, int index)
print_rr_indexed_data	rr_graph.h	/^void print_rr_indexed_data(FILE * fp,$/;"	p	signature:(FILE * fp, int index)
print_rr_node	rr_graph.c	/^print_rr_node(FILE * fp,$/;"	f	file:	signature:(FILE * fp, t_rr_node * rr_node, int inode)
print_rr_node	rr_graph.c	/^static void print_rr_node(FILE * fp,$/;"	p	file:	signature:(FILE * fp, t_rr_node * rr_node, int inode)
print_sink_delays	timing_place.c	/^print_sink_delays(char *fname)$/;"	f	signature:(char *fname)
print_timing_graph	path_delay.c	/^print_timing_graph(char *fname)$/;"	f	signature:(char *fname)
print_timing_graph	path_delay.h	/^void print_timing_graph(char *fname);$/;"	p	signature:(char *fname)
print_wirelen_prob_dist	stats.c	/^print_wirelen_prob_dist(void)$/;"	f	signature:(void)
print_wirelen_prob_dist	stats.h	/^void print_wirelen_prob_dist(void);$/;"	p	signature:(void)
priority	vpr_types.h	/^    int priority;$/;"	m	struct:s_grid_loc_def	access:public
private_cmap	graphics.c	/^static Colormap private_cmap;	\/* "None" unless a private cmap was allocated. *\/$/;"	v	file:
proc_time	place_and_route.h	/^    int proc_time;$/;"	m	struct:s_fmap_cell	access:public
proceed	graphics.c	/^proceed(void (*drawscreen) (void))$/;"	f	file:	signature:(void (*drawscreen) (void))
proceed	graphics.c	/^static void proceed(void (*drawscreen) (void));$/;"	p	file:	signature:(void (*drawscreen) (void))
ps	graphics.c	/^static FILE *ps;$/;"	v	file:
ps_bot	graphics.c	/^static float ps_left, ps_right, ps_top, ps_bot;	\/* Figure boundaries for *$/;"	v	file:
ps_left	graphics.c	/^static float ps_left, ps_right, ps_top, ps_bot;	\/* Figure boundaries for *$/;"	v	file:
ps_right	graphics.c	/^static float ps_left, ps_right, ps_top, ps_bot;	\/* Figure boundaries for *$/;"	v	file:
ps_top	graphics.c	/^static float ps_left, ps_right, ps_top, ps_bot;	\/* Figure boundaries for *$/;"	v	file:
ps_xmult	graphics.c	/^static float ps_xmult, ps_ymult;	\/* Transformation for PostScript. *\/$/;"	v	file:
ps_ymult	graphics.c	/^static float ps_xmult, ps_ymult;	\/* Transformation for PostScript. *\/$/;"	v	file:
ptc_num	vpr_types.h	/^    short ptc_num;$/;"	m	struct:s_rr_node	access:public
quit	graphics.c	/^quit(void (*drawscreen) (void))$/;"	f	file:	signature:(void (*drawscreen) (void))
quit	graphics.c	/^static void quit(void (*drawscreen) (void));$/;"	p	file:	signature:(void (*drawscreen) (void))
rc_node	net_delay.c	/^    struct s_rc_node *rc_node;$/;"	m	struct:s_linked_rc_ptr	typeref:struct:s_linked_rc_ptr::s_rc_node	file:	access:public
re_expand	route_tree_timing.h	/^    short re_expand;$/;"	m	struct:s_rt_node	access:public
read	ezxml.c	59;"	d	file:
read_netlist	read_netlist.c	/^read_netlist(IN const char *net_file,$/;"	f	signature:(IN const char *net_file, IN int num_types, IN const struct s_type_descriptor block_types[], IN t_type_ptr IO_type, IN int io_ipin, IN int io_opin, OUT t_subblock_data * subblock_data_ptr, OUT int *num_blocks, OUT struct s_block *block_list[], OUT int *num_nets, OUT struct s_net *net_list[])
read_netlist	read_netlist.h	/^void read_netlist(IN const char *net_file,$/;"	p	signature:(IN const char *net_file, IN int num_types, IN const struct s_type_descriptor block_types[], IN t_type_ptr IO_type, IN int io_ipin, IN int io_opin, OUT t_subblock_data * subblock_data_ptr, OUT int *num_blocks, OUT struct s_block *block_list[], OUT int *num_nets, OUT struct s_net *net_list[])
read_place	read_place.c	/^read_place(IN const char *place_file,$/;"	f	signature:(IN const char *place_file, IN const char *arch_file, IN const char *net_file, IN int nx, IN int ny, IN int num_blocks, INOUT struct s_block block_list[])
read_place	read_place.h	/^void read_place(IN const char *place_file,$/;"	p	signature:(IN const char *place_file, IN const char *arch_file, IN const char *net_file, IN int nx, IN int ny, IN int num_blocks, INOUT struct s_block block_list[])
read_user_pad_loc	read_place.c	/^read_user_pad_loc(char *pad_loc_file)$/;"	f	signature:(char *pad_loc_file)
read_user_pad_loc	read_place.h	/^void read_user_pad_loc(IN char *pad_loc_file);$/;"	p	signature:(IN char *pad_loc_file)
recompute_bb_cost	place.c	/^recompute_bb_cost(int place_cost_type,$/;"	f	file:	signature:(int place_cost_type, int num_regions)
recompute_bb_cost	place.c	/^static float recompute_bb_cost(int place_cost_type,$/;"	p	file:	signature:(int place_cost_type, int num_regions)
recompute_crit_iter	vpr_types.h	/^    int recompute_crit_iter;$/;"	m	struct:s_placer_opts	access:public
recompute_occupancy_from_scratch	check_route.c	/^recompute_occupancy_from_scratch(t_ivec ** fb_opins_used_locally)$/;"	f	file:	signature:(t_ivec ** fb_opins_used_locally)
recompute_occupancy_from_scratch	check_route.c	/^static void recompute_occupancy_from_scratch(t_ivec ** fb_opins_used_locally);$/;"	p	file:	signature:(t_ivec ** fb_opins_used_locally)
rect_off_screen	graphics.c	/^rect_off_screen(float x1,$/;"	f	file:	signature:(float x1, float y1, float x2, float y2)
redraw_screen	draw.c	/^redraw_screen()$/;"	f	file:
redraw_screen	draw.c	/^static void redraw_screen(void);$/;"	p	file:	signature:(void)
relapos_rec_s	place_stats.c	/^typedef struct relapos_rec_s$/;"	s	file:
relapos_rec_s::num_rp	place_stats.c	/^    int num_rp[MAX_LEN];$/;"	m	struct:relapos_rec_s	file:	access:public
relapos_rec_t	place_stats.c	/^relapos_rec_t;$/;"	t	typeref:struct:relapos_rec_s	file:
repeat	vpr_types.h	/^    int repeat;$/;"	m	struct:s_grid_loc_def	access:public
reserve_locally_used_opins	route_common.c	/^reserve_locally_used_opins(float pres_fac,$/;"	f	signature:(float pres_fac, boolean rip_up_local_opins, t_ivec ** fb_opins_used_locally)
reserve_locally_used_opins	route_common.h	/^void reserve_locally_used_opins(float pres_fac,$/;"	p	signature:(float pres_fac, boolean rip_up_local_opins, t_ivec ** fb_opins_used_locally)
reset_flags	check_route.c	/^reset_flags(int inet,$/;"	f	file:	signature:(int inet, boolean * connected_to_route)
reset_flags	check_route.c	/^static void reset_flags(int inet,$/;"	p	file:	signature:(int inet, boolean * connected_to_route)
reset_path_costs	route_common.c	/^reset_path_costs(void)$/;"	f	signature:(void)
reset_path_costs	route_common.h	/^void reset_path_costs(void);$/;"	p	signature:(void)
reset_placement	timing_place_lookup.c	/^reset_placement(void)$/;"	f	file:	signature:(void)
reset_placement	timing_place_lookup.c	/^static void reset_placement(void);$/;"	p	file:	signature:(void)
reset_rr_node_to_rc_node	net_delay.c	/^reset_rr_node_to_rc_node(t_linked_rc_ptr * rr_node_to_rc_node,$/;"	f	file:	signature:(t_linked_rc_ptr * rr_node_to_rc_node, int inet)
reset_rr_node_to_rc_node	net_delay.c	/^static void reset_rr_node_to_rc_node(t_linked_rc_ptr * rr_node_to_rc_node,$/;"	p	file:	signature:(t_linked_rc_ptr * rr_node_to_rc_node, int inet)
restore_original_device	timing_place_lookup.c	/^restore_original_device(void)$/;"	f	file:	signature:(void)
restore_original_device	timing_place_lookup.c	/^static void restore_original_device(void);$/;"	p	file:	signature:(void)
restore_region_occ	place.c	/^restore_region_occ(float **old_region_occ_x,$/;"	f	file:	signature:(float **old_region_occ_x, float **old_region_occ_y, int num_regions)
restore_region_occ	place.c	/^static void restore_region_occ(float **old_region_occ_x,$/;"	p	file:	signature:(float **old_region_occ_x, float **old_region_occ_y, int num_regions)
restore_routing	route_common.c	/^restore_routing(struct s_trace **best_routing,$/;"	f	signature:(struct s_trace **best_routing, t_ivec ** fb_opins_used_locally, t_ivec ** saved_clb_opins_used_locally)
restore_routing	route_export.h	/^void restore_routing(struct s_trace **best_routing,$/;"	p	signature:(struct s_trace **best_routing, t_ivec ** fb_opins_used_locally, t_ivec ** saved_clb_opins_used_locally)
route_bb	route_common.c	/^struct s_bb *route_bb = NULL;	\/* [0..num_nets-1]. Limits area in which each  *\/$/;"	v	typeref:struct:s_bb
route_type	vpr_types.h	/^    enum e_route_type route_type;$/;"	m	struct:s_router_opts	typeref:enum:s_router_opts::e_route_type	access:public
router_algorithm	vpr_types.h	/^    enum e_router_algorithm router_algorithm;$/;"	m	struct:s_router_opts	typeref:enum:s_router_opts::e_router_algorithm	access:public
routing_stats	stats.c	/^routing_stats(boolean full_stats,$/;"	f	signature:(boolean full_stats, enum e_route_type route_type, int num_switch, t_segment_inf * segment_inf, int num_segment, float R_minW_nmos, float R_minW_pmos, enum e_directionality directionality, boolean timing_analysis_enabled, float **net_slack, float **net_delay, t_subblock_data subblock_data)
routing_stats	stats.h	/^void routing_stats(boolean full_stats,$/;"	p	signature:(boolean full_stats, enum e_route_type route_type, int num_switch, t_segment_inf * segment_inf, int num_segment, float R_minW_nmos, float R_minW_pmos, enum e_directionality directionality, boolean timing_analysis_enabled, float **net_slack, float **net_delay, t_subblock_data subblock_data)
rr_blk_source	globals_declare.h	/^int **rr_blk_source;		\/* [0..num_blocks-1][0..num_class-1] *\/$/;"	v
rr_blk_source	main.c	/^int **rr_blk_source = NULL;	\/* [0..(num_blocks-1)][0..(num_class-1)] *\/$/;"	v
rr_edge_done	rr_graph2.c	/^boolean *rr_edge_done;$/;"	v
rr_graph_error	check_rr_graph.c	/^static boolean rr_graph_error;$/;"	v	file:
rr_graph_externals	rr_graph.c	/^rr_graph_externals( t_timing_inf timing_inf,$/;"	f	file:	signature:( t_timing_inf timing_inf, t_segment_inf * segment_inf, int num_seg_types, int nodes_per_chan, int wire_to_ipin_switch, enum e_base_cost_type base_cost_type)
rr_graph_externals	rr_graph.c	/^static void rr_graph_externals($/;"	p	file:	signature:( t_timing_inf timing_inf, t_segment_inf * segment_inf, int num_seg_types, int nodes_per_chan, int wire_to_ipin_switch, enum e_base_cost_type base_cost_type)
rr_graph_warn	check_rr_graph.c	/^static boolean rr_graph_warn;$/;"	v	file:
rr_indexed_data	globals_declare.h	/^t_rr_indexed_data *rr_indexed_data;	\/* [0 .. num_rr_indexed_data-1] *\/$/;"	v
rr_indexed_data	main.c	/^t_rr_indexed_data *rr_indexed_data = NULL;	\/* [0..(num_rr_indexed_data-1)] *\/$/;"	v
rr_mem_chunk_list_head	rr_graph.c	/^static struct s_linked_vptr *rr_mem_chunk_list_head = NULL;$/;"	v	typeref:struct:s_linked_vptr	file:
rr_modified_head	route_common.c	/^static struct s_linked_f_pointer *rr_modified_head = NULL;$/;"	v	typeref:struct:s_linked_f_pointer	file:
rr_node	globals_declare.h	/^t_rr_node *rr_node;		\/* [0..num_rr_nodes-1]          *\/$/;"	v
rr_node	main.c	/^t_rr_node *rr_node = NULL;	\/* [0..(num_rr_nodes-1)] *\/$/;"	v
rr_node_indices	globals_declare.h	/^t_ivec ***rr_node_indices;$/;"	v
rr_node_indices	main.c	/^t_ivec ***rr_node_indices = NULL;$/;"	v
rr_node_is_global_clb_ipin	check_rr_graph.c	/^rr_node_is_global_clb_ipin(int inode)$/;"	f	file:	signature:(int inode)
rr_node_is_global_clb_ipin	check_rr_graph.c	/^static boolean rr_node_is_global_clb_ipin(int inode);$/;"	p	file:	signature:(int inode)
rr_node_route_inf	route_common.c	/^t_rr_node_route_inf *rr_node_route_inf = NULL;	\/* [0..num_rr_nodes-1] *\/$/;"	v
rr_node_to_rt_node	route_tree_timing.c	/^static t_rt_node **rr_node_to_rt_node = NULL;	\/* [0..num_rr_nodes-1] *\/$/;"	v	file:
rt_edge_free_list	route_tree_timing.c	/^static t_linked_rt_edge *rt_edge_free_list = NULL;$/;"	v	file:
rt_node_free_list	route_tree_timing.c	/^static t_rt_node *rt_node_free_list = NULL;$/;"	v	file:
rt_node_of_sink	timing_place_lookup.c	/^static t_rt_node **rt_node_of_sink;$/;"	v	file:
run_block_classify	ray_block_classify.c	/^void run_block_classify() $/;"	f
run_block_classify	ray_block_classify.h	/^void run_block_classify();$/;"	p	signature:()
s	ezxml.c	/^    char *s;			\/* start of work area *\/$/;"	m	struct:ezxml_root	file:	access:public
s_T_subblock	vpr_types.h	/^typedef struct s_T_subblock$/;"	s
s_T_subblock::T_comb	vpr_types.h	/^    float **T_comb;$/;"	m	struct:s_T_subblock	access:public
s_T_subblock::T_seq_in	vpr_types.h	/^    float *T_seq_in;$/;"	m	struct:s_T_subblock	access:public
s_T_subblock::T_seq_out	vpr_types.h	/^    float *T_seq_out;$/;"	m	struct:s_T_subblock	access:public
s_TokenPair	vpr_types.h	/^struct s_TokenPair$/;"	s
s_TokenPair::Enum	vpr_types.h	/^    int Enum;$/;"	m	struct:s_TokenPair	access:public
s_TokenPair::Str	vpr_types.h	/^    char *Str;$/;"	m	struct:s_TokenPair	access:public
s_annealing_sched	vpr_types.h	/^struct s_annealing_sched$/;"	s
s_annealing_sched::alpha_t	vpr_types.h	/^    float alpha_t;$/;"	m	struct:s_annealing_sched	access:public
s_annealing_sched::exit_t	vpr_types.h	/^    float exit_t;$/;"	m	struct:s_annealing_sched	access:public
s_annealing_sched::init_t	vpr_types.h	/^    float init_t;$/;"	m	struct:s_annealing_sched	access:public
s_annealing_sched::inner_num	vpr_types.h	/^    float inner_num;$/;"	m	struct:s_annealing_sched	access:public
s_annealing_sched::type	vpr_types.h	/^    enum sched_type type;$/;"	m	struct:s_annealing_sched	typeref:enum:s_annealing_sched::sched_type	access:public
s_arch	xml_arch.h	/^struct s_arch$/;"	s
s_arch::C_ipin_cblock	xml_arch.h	/^     float C_ipin_cblock;$/;"	m	struct:s_arch	access:public
s_arch::Chans	xml_arch.h	/^    t_chan_width_dist Chans;$/;"	m	struct:s_arch	access:public
s_arch::Fs	xml_arch.h	/^     int Fs;$/;"	m	struct:s_arch	access:public
s_arch::K	xml_arch.h	/^     int K;			\/* LUT size *\/$/;"	m	struct:s_arch	access:public
s_arch::N	xml_arch.h	/^    int N;			\/* Cluster size *\/$/;"	m	struct:s_arch	access:public
s_arch::R_minW_nmos	xml_arch.h	/^     float R_minW_nmos;$/;"	m	struct:s_arch	access:public
s_arch::R_minW_pmos	xml_arch.h	/^     float R_minW_pmos;$/;"	m	struct:s_arch	access:public
s_arch::SBType	xml_arch.h	/^     enum e_switch_block_type SBType;$/;"	m	struct:s_arch	typeref:enum:s_arch::e_switch_block_type	access:public
s_arch::Segments	xml_arch.h	/^     t_segment_inf * Segments;$/;"	m	struct:s_arch	access:public
s_arch::Switches	xml_arch.h	/^     struct s_switch_inf *Switches;$/;"	m	struct:s_arch	typeref:struct:s_arch::s_switch_inf	access:public
s_arch::T_ipin_cblock	xml_arch.h	/^     float T_ipin_cblock;$/;"	m	struct:s_arch	access:public
s_arch::clb_grid	xml_arch.h	/^     struct s_clb_grid clb_grid;$/;"	m	struct:s_arch	typeref:struct:s_arch::s_clb_grid	access:public
s_arch::grid_logic_tile_area	xml_arch.h	/^     float grid_logic_tile_area;$/;"	m	struct:s_arch	access:public
s_arch::ipin_mux_trans_size	xml_arch.h	/^     float ipin_mux_trans_size;$/;"	m	struct:s_arch	access:public
s_arch::num_segments	xml_arch.h	/^     int num_segments;$/;"	m	struct:s_arch	access:public
s_arch::num_switches	xml_arch.h	/^     int num_switches;$/;"	m	struct:s_arch	access:public
s_bb	vpr_types.h	/^struct s_bb$/;"	s
s_bb::xmax	vpr_types.h	/^    int xmax;$/;"	m	struct:s_bb	access:public
s_bb::xmin	vpr_types.h	/^    int xmin;$/;"	m	struct:s_bb	access:public
s_bb::ymax	vpr_types.h	/^    int ymax;$/;"	m	struct:s_bb	access:public
s_bb::ymin	vpr_types.h	/^    int ymin;$/;"	m	struct:s_bb	access:public
s_block	vpr_types.h	/^struct s_block$/;"	s
s_block::name	vpr_types.h	/^    char *name;$/;"	m	struct:s_block	access:public
s_block::nets	vpr_types.h	/^    int *nets;$/;"	m	struct:s_block	access:public
s_block::type	vpr_types.h	/^    t_type_ptr type;$/;"	m	struct:s_block	access:public
s_block::x	vpr_types.h	/^    int x;$/;"	m	struct:s_block	access:public
s_block::y	vpr_types.h	/^    int y;$/;"	m	struct:s_block	access:public
s_block::z	vpr_types.h	/^    int z;$/;"	m	struct:s_block	access:public
s_chan	vpr_types.h	/^typedef struct s_chan$/;"	s
s_chan::dc	vpr_types.h	/^    float dc;$/;"	m	struct:s_chan	access:public
s_chan::peak	vpr_types.h	/^    float peak;$/;"	m	struct:s_chan	access:public
s_chan::type	vpr_types.h	/^    enum e_stat type;$/;"	m	struct:s_chan	typeref:enum:s_chan::e_stat	access:public
s_chan::width	vpr_types.h	/^    float width;$/;"	m	struct:s_chan	access:public
s_chan::xpeak	vpr_types.h	/^    float xpeak;$/;"	m	struct:s_chan	access:public
s_chan_width_dist	vpr_types.h	/^typedef struct s_chan_width_dist$/;"	s
s_chan_width_dist::chan_width_io	vpr_types.h	/^    float chan_width_io;$/;"	m	struct:s_chan_width_dist	access:public
s_chan_width_dist::chan_x_dist	vpr_types.h	/^    t_chan chan_x_dist;$/;"	m	struct:s_chan_width_dist	access:public
s_chan_width_dist::chan_y_dist	vpr_types.h	/^    t_chan chan_y_dist;$/;"	m	struct:s_chan_width_dist	access:public
s_class	vpr_types.h	/^struct s_class$/;"	s
s_class::num_pins	vpr_types.h	/^    int num_pins;$/;"	m	struct:s_class	access:public
s_class::pinlist	vpr_types.h	/^    int *pinlist;$/;"	m	struct:s_class	access:public
s_class::type	vpr_types.h	/^    enum e_pin_type type;$/;"	m	struct:s_class	typeref:enum:s_class::e_pin_type	access:public
s_clb_grid	xml_arch.h	/^    struct s_clb_grid$/;"	s
s_clb_grid::Aspect	xml_arch.h	/^    float Aspect;$/;"	m	struct:s_clb_grid	access:public
s_clb_grid::H	xml_arch.h	/^     int H;$/;"	m	struct:s_clb_grid	access:public
s_clb_grid::IsAuto	xml_arch.h	/^    boolean IsAuto;$/;"	m	struct:s_clb_grid	access:public
s_clb_grid::W	xml_arch.h	/^     int W;$/;"	m	struct:s_clb_grid	access:public
s_det_routing_arch	vpr_types.h	/^struct s_det_routing_arch$/;"	s
s_det_routing_arch::Fs	vpr_types.h	/^    int Fs;$/;"	m	struct:s_det_routing_arch	access:public
s_det_routing_arch::R_minW_nmos	vpr_types.h	/^    float R_minW_nmos;$/;"	m	struct:s_det_routing_arch	access:public
s_det_routing_arch::R_minW_pmos	vpr_types.h	/^    float R_minW_pmos;$/;"	m	struct:s_det_routing_arch	access:public
s_det_routing_arch::delayless_switch	vpr_types.h	/^    short delayless_switch;$/;"	m	struct:s_det_routing_arch	access:public
s_det_routing_arch::directionality	vpr_types.h	/^    enum e_directionality directionality;	\/* UDSD by AY *\/$/;"	m	struct:s_det_routing_arch	typeref:enum:s_det_routing_arch::e_directionality	access:public
s_det_routing_arch::global_route_switch	vpr_types.h	/^    short global_route_switch;$/;"	m	struct:s_det_routing_arch	access:public
s_det_routing_arch::num_segment	vpr_types.h	/^    int num_segment;$/;"	m	struct:s_det_routing_arch	access:public
s_det_routing_arch::num_switch	vpr_types.h	/^    short num_switch;$/;"	m	struct:s_det_routing_arch	access:public
s_det_routing_arch::switch_block_type	vpr_types.h	/^    enum e_switch_block_type switch_block_type;$/;"	m	struct:s_det_routing_arch	typeref:enum:s_det_routing_arch::e_switch_block_type	access:public
s_det_routing_arch::wire_to_ipin_switch	vpr_types.h	/^    short wire_to_ipin_switch;$/;"	m	struct:s_det_routing_arch	access:public
s_fmap_cell	place_and_route.h	/^typedef struct s_fmap_cell$/;"	s
s_fmap_cell::fc	place_and_route.h	/^    int fc;			\/* at this fc *\/$/;"	m	struct:s_fmap_cell	access:public
s_fmap_cell::fs	place_and_route.h	/^    int fs;			\/* at this fs *\/$/;"	m	struct:s_fmap_cell	access:public
s_fmap_cell::next	place_and_route.h	/^    struct s_fmap_cell *next;$/;"	m	struct:s_fmap_cell	typeref:struct:s_fmap_cell::s_fmap_cell	access:public
s_fmap_cell::proc_time	place_and_route.h	/^    int proc_time;$/;"	m	struct:s_fmap_cell	access:public
s_fmap_cell::wirelength	place_and_route.h	/^    int wirelength;		\/* corresponding wirelength of successful routing at wneed *\/$/;"	m	struct:s_fmap_cell	access:public
s_fmap_cell::wneed	place_and_route.h	/^    int wneed;			\/* need wneed to route *\/$/;"	m	struct:s_fmap_cell	access:public
s_grid_loc_def	vpr_types.h	/^struct s_grid_loc_def$/;"	s
s_grid_loc_def::col_rel	vpr_types.h	/^    float col_rel;$/;"	m	struct:s_grid_loc_def	access:public
s_grid_loc_def::grid_loc_type	vpr_types.h	/^    enum e_grid_loc_type grid_loc_type;$/;"	m	struct:s_grid_loc_def	typeref:enum:s_grid_loc_def::e_grid_loc_type	access:public
s_grid_loc_def::priority	vpr_types.h	/^    int priority;$/;"	m	struct:s_grid_loc_def	access:public
s_grid_loc_def::repeat	vpr_types.h	/^    int repeat;$/;"	m	struct:s_grid_loc_def	access:public
s_grid_loc_def::start_col	vpr_types.h	/^    int start_col;$/;"	m	struct:s_grid_loc_def	access:public
s_grid_tile	vpr_types.h	/^struct s_grid_tile$/;"	s
s_grid_tile::blocks	vpr_types.h	/^    int *blocks;$/;"	m	struct:s_grid_tile	access:public
s_grid_tile::offset	vpr_types.h	/^    int offset;$/;"	m	struct:s_grid_tile	access:public
s_grid_tile::type	vpr_types.h	/^    t_type_ptr type;$/;"	m	struct:s_grid_tile	access:public
s_grid_tile::usage	vpr_types.h	/^    int usage;$/;"	m	struct:s_grid_tile	access:public
s_hash	hash.h	/^struct s_hash$/;"	s
s_hash::count	hash.h	/^    int count;$/;"	m	struct:s_hash	access:public
s_hash::index	hash.h	/^    int index;$/;"	m	struct:s_hash	access:public
s_hash::name	hash.h	/^    char *name;$/;"	m	struct:s_hash	access:public
s_hash::next	hash.h	/^    struct s_hash *next;$/;"	m	struct:s_hash	typeref:struct:s_hash::s_hash	access:public
s_hash_iterator	hash.h	/^struct s_hash_iterator$/;"	s
s_hash_iterator::h_ptr	hash.h	/^    struct s_hash *h_ptr;$/;"	m	struct:s_hash_iterator	typeref:struct:s_hash_iterator::s_hash	access:public
s_hash_iterator::i	hash.h	/^    int i;$/;"	m	struct:s_hash_iterator	access:public
s_heap	route_common.h	/^struct s_heap$/;"	s
s_heap::R_upstream	route_common.h	/^    float R_upstream;$/;"	m	struct:s_heap	access:public
s_heap::__anon1::next	route_common.h	/^	struct s_heap *next;$/;"	m	union:s_heap::__anon1	typeref:struct:s_heap::__anon1::s_heap	access:public
s_heap::__anon1::prev_node	route_common.h	/^	int prev_node;$/;"	m	union:s_heap::__anon1	access:public
s_heap::backward_path_cost	route_common.h	/^    float backward_path_cost;$/;"	m	struct:s_heap	access:public
s_heap::cost	route_common.h	/^    float cost;$/;"	m	struct:s_heap	access:public
s_heap::index	route_common.h	/^    int index;$/;"	m	struct:s_heap	access:public
s_heap::prev_edge	route_common.h	/^    int prev_edge;$/;"	m	struct:s_heap	access:public
s_heap::u	route_common.h	/^    u;$/;"	m	struct:s_heap	typeref:union:s_heap::__anon1	access:public
s_ivec	util.h	/^struct s_ivec$/;"	s
s_ivec::list	util.h	/^    int *list;$/;"	m	struct:s_ivec	access:public
s_ivec::nelem	util.h	/^    int nelem;$/;"	m	struct:s_ivec	access:public
s_linked_edge	rr_graph_util.h	/^struct s_linked_edge$/;"	s
s_linked_edge::edge	rr_graph_util.h	/^    int edge;$/;"	m	struct:s_linked_edge	access:public
s_linked_edge::iswitch	rr_graph_util.h	/^    short iswitch;$/;"	m	struct:s_linked_edge	access:public
s_linked_edge::next	rr_graph_util.h	/^    struct s_linked_edge *next;$/;"	m	struct:s_linked_edge	typeref:struct:s_linked_edge::s_linked_edge	access:public
s_linked_f_pointer	vpr_types.h	/^struct s_linked_f_pointer$/;"	s
s_linked_f_pointer::fptr	vpr_types.h	/^    float *fptr;$/;"	m	struct:s_linked_f_pointer	access:public
s_linked_f_pointer::next	vpr_types.h	/^    struct s_linked_f_pointer *next;$/;"	m	struct:s_linked_f_pointer	typeref:struct:s_linked_f_pointer::s_linked_f_pointer	access:public
s_linked_int	util.h	/^struct s_linked_int$/;"	s
s_linked_int::data	util.h	/^    int data;$/;"	m	struct:s_linked_int	access:public
s_linked_int::next	util.h	/^    struct s_linked_int *next;$/;"	m	struct:s_linked_int	typeref:struct:s_linked_int::s_linked_int	access:public
s_linked_rc_edge	net_delay.c	/^struct s_linked_rc_edge$/;"	s	file:
s_linked_rc_edge::child	net_delay.c	/^    struct s_rc_node *child;$/;"	m	struct:s_linked_rc_edge	typeref:struct:s_linked_rc_edge::s_rc_node	file:	access:public
s_linked_rc_edge::iswitch	net_delay.c	/^    short iswitch;$/;"	m	struct:s_linked_rc_edge	file:	access:public
s_linked_rc_edge::next	net_delay.c	/^    struct s_linked_rc_edge *next;$/;"	m	struct:s_linked_rc_edge	typeref:struct:s_linked_rc_edge::s_linked_rc_edge	file:	access:public
s_linked_rc_ptr	net_delay.c	/^struct s_linked_rc_ptr$/;"	s	file:
s_linked_rc_ptr::next	net_delay.c	/^    struct s_linked_rc_ptr *next;$/;"	m	struct:s_linked_rc_ptr	typeref:struct:s_linked_rc_ptr::s_linked_rc_ptr	file:	access:public
s_linked_rc_ptr::rc_node	net_delay.c	/^    struct s_rc_node *rc_node;$/;"	m	struct:s_linked_rc_ptr	typeref:struct:s_linked_rc_ptr::s_rc_node	file:	access:public
s_linked_rt_edge	route_tree_timing.h	/^struct s_linked_rt_edge$/;"	s
s_linked_rt_edge::child	route_tree_timing.h	/^    struct s_rt_node *child;$/;"	m	struct:s_linked_rt_edge	typeref:struct:s_linked_rt_edge::s_rt_node	access:public
s_linked_rt_edge::iswitch	route_tree_timing.h	/^    short iswitch;$/;"	m	struct:s_linked_rt_edge	access:public
s_linked_rt_edge::next	route_tree_timing.h	/^    struct s_linked_rt_edge *next;$/;"	m	struct:s_linked_rt_edge	typeref:struct:s_linked_rt_edge::s_linked_rt_edge	access:public
s_linked_vptr	util.h	/^struct s_linked_vptr$/;"	s
s_linked_vptr::data_vptr	util.h	/^    void *data_vptr;$/;"	m	struct:s_linked_vptr	access:public
s_linked_vptr::next	util.h	/^    struct s_linked_vptr *next;$/;"	m	struct:s_linked_vptr	typeref:struct:s_linked_vptr::s_linked_vptr	access:public
s_mst_edge	mst.h	/^typedef struct s_mst_edge$/;"	s
s_mst_edge::from_node	mst.h	/^    unsigned short int from_node;$/;"	m	struct:s_mst_edge	access:public
s_mst_edge::to_node	mst.h	/^    unsigned short int to_node;$/;"	m	struct:s_mst_edge	access:public
s_mux	rr_graph.c	/^typedef struct s_mux$/;"	s	file:
s_mux::next	rr_graph.c	/^    struct s_mux *next;$/;"	m	struct:s_mux	typeref:struct:s_mux::s_mux	file:	access:public
s_mux::size	rr_graph.c	/^    int size;$/;"	m	struct:s_mux	file:	access:public
s_mux_size_distribution	rr_graph.c	/^typedef struct s_mux_size_distribution$/;"	s	file:
s_mux_size_distribution::distr	rr_graph.c	/^    int *distr;$/;"	m	struct:s_mux_size_distribution	file:	access:public
s_mux_size_distribution::max_index	rr_graph.c	/^    int max_index;$/;"	m	struct:s_mux_size_distribution	file:	access:public
s_mux_size_distribution::mux_count	rr_graph.c	/^    int mux_count;$/;"	m	struct:s_mux_size_distribution	file:	access:public
s_mux_size_distribution::next	rr_graph.c	/^    struct s_mux_size_distribution *next;$/;"	m	struct:s_mux_size_distribution	typeref:struct:s_mux_size_distribution::s_mux_size_distribution	file:	access:public
s_net	vpr_types.h	/^struct s_net$/;"	s
s_net::is_global	vpr_types.h	/^    boolean is_global;$/;"	m	struct:s_net	access:public
s_net::name	vpr_types.h	/^    char *name;$/;"	m	struct:s_net	access:public
s_net::node_block	vpr_types.h	/^    int *node_block;$/;"	m	struct:s_net	access:public
s_net::node_block_pin	vpr_types.h	/^    int *node_block_pin;$/;"	m	struct:s_net	access:public
s_net::num_sinks	vpr_types.h	/^    int num_sinks;$/;"	m	struct:s_net	access:public
s_options	ReadOptions.h	/^struct s_options$/;"	s
s_options::ArchFile	ReadOptions.h	/^    char *ArchFile;$/;"	m	struct:s_options	access:public
s_options::Count	ReadOptions.h	/^    int Count[OT_BASE_UNKNOWN];$/;"	m	struct:s_options	access:public
s_options::GraphPause	ReadOptions.h	/^	int GraphPause;$/;"	m	struct:s_options	access:public
s_options::NetFile	ReadOptions.h	/^    char *NetFile;$/;"	m	struct:s_options	access:public
s_options::OutFilePrefix	ReadOptions.h	/^    char *OutFilePrefix;$/;"	m	struct:s_options	access:public
s_options::PinFile	ReadOptions.h	/^    char *PinFile;$/;"	m	struct:s_options	access:public
s_options::PlaceAlgorithm	ReadOptions.h	/^    enum e_place_algorithm PlaceAlgorithm;$/;"	m	struct:s_options	typeref:enum:s_options::e_place_algorithm	access:public
s_options::PlaceAlphaT	ReadOptions.h	/^    float PlaceAlphaT;$/;"	m	struct:s_options	access:public
s_options::PlaceChanWidth	ReadOptions.h	/^    int PlaceChanWidth;$/;"	m	struct:s_options	access:public
s_options::PlaceCostType	ReadOptions.h	/^    enum place_c_types PlaceCostType;$/;"	m	struct:s_options	typeref:enum:s_options::place_c_types	access:public
s_options::PlaceExitT	ReadOptions.h	/^    float PlaceExitT;$/;"	m	struct:s_options	access:public
s_options::PlaceFile	ReadOptions.h	/^    char *PlaceFile;$/;"	m	struct:s_options	access:public
s_options::PlaceInitT	ReadOptions.h	/^    float PlaceInitT;$/;"	m	struct:s_options	access:public
s_options::PlaceInnerNum	ReadOptions.h	/^    float PlaceInnerNum;$/;"	m	struct:s_options	access:public
s_options::PlaceNonlinearRegions	ReadOptions.h	/^    int PlaceNonlinearRegions;$/;"	m	struct:s_options	access:public
s_options::PlaceTimingTradeoff	ReadOptions.h	/^	float PlaceTimingTradeoff;$/;"	m	struct:s_options	access:public
s_options::RecomputeCritIter	ReadOptions.h	/^	int RecomputeCritIter;$/;"	m	struct:s_options	access:public
s_options::RouteChanWidth	ReadOptions.h	/^	int RouteChanWidth;$/;"	m	struct:s_options	access:public
s_options::RouteFile	ReadOptions.h	/^    char *RouteFile;$/;"	m	struct:s_options	access:public
s_options::RouteType	ReadOptions.h	/^    enum e_route_type RouteType;$/;"	m	struct:s_options	typeref:enum:s_options::e_route_type	access:public
s_options::RouterAlgorithm	ReadOptions.h	/^    enum e_router_algorithm RouterAlgorithm;$/;"	m	struct:s_options	typeref:enum:s_options::e_router_algorithm	access:public
s_options::Seed	ReadOptions.h	/^    int Seed;$/;"	m	struct:s_options	access:public
s_options::ShowPlaceTiming	ReadOptions.h	/^    boolean ShowPlaceTiming;$/;"	m	struct:s_options	access:public
s_options::TimingAnalysis	ReadOptions.h	/^    boolean TimingAnalysis;$/;"	m	struct:s_options	access:public
s_options::acc_fac	ReadOptions.h	/^	float acc_fac;$/;"	m	struct:s_options	access:public
s_options::astar_fac	ReadOptions.h	/^	float astar_fac;$/;"	m	struct:s_options	access:public
s_options::base_cost_type	ReadOptions.h	/^	enum e_base_cost_type base_cost_type;$/;"	m	struct:s_options	typeref:enum:s_options::e_base_cost_type	access:public
s_options::bb_factor	ReadOptions.h	/^	int bb_factor;$/;"	m	struct:s_options	access:public
s_options::bend_cost	ReadOptions.h	/^	float bend_cost;$/;"	m	struct:s_options	access:public
s_options::block_dist	ReadOptions.h	/^    int block_dist;$/;"	m	struct:s_options	access:public
s_options::constant_net_delay	ReadOptions.h	/^	float constant_net_delay;$/;"	m	struct:s_options	access:public
s_options::criticality_exp	ReadOptions.h	/^	float criticality_exp;$/;"	m	struct:s_options	access:public
s_options::first_iter_pres_fac	ReadOptions.h	/^	float first_iter_pres_fac;$/;"	m	struct:s_options	access:public
s_options::initial_pres_fac	ReadOptions.h	/^	float initial_pres_fac;$/;"	m	struct:s_options	access:public
s_options::inner_loop_recompute_divider	ReadOptions.h	/^	int inner_loop_recompute_divider;$/;"	m	struct:s_options	access:public
s_options::max_criticality	ReadOptions.h	/^	float max_criticality;$/;"	m	struct:s_options	access:public
s_options::max_router_iterations	ReadOptions.h	/^	int max_router_iterations;$/;"	m	struct:s_options	access:public
s_options::place_cost_exp	ReadOptions.h	/^	float place_cost_exp;$/;"	m	struct:s_options	access:public
s_options::place_exp_first	ReadOptions.h	/^	float place_exp_first;$/;"	m	struct:s_options	access:public
s_options::place_exp_last	ReadOptions.h	/^	float place_exp_last;$/;"	m	struct:s_options	access:public
s_options::pres_fac_mult	ReadOptions.h	/^	float pres_fac_mult;$/;"	m	struct:s_options	access:public
s_place_region	vpr_types.h	/^struct s_place_region$/;"	s
s_place_region::capacity	vpr_types.h	/^    float capacity;$/;"	m	struct:s_place_region	access:public
s_place_region::cost	vpr_types.h	/^    float cost;$/;"	m	struct:s_place_region	access:public
s_place_region::inv_capacity	vpr_types.h	/^    float inv_capacity;$/;"	m	struct:s_place_region	access:public
s_place_region::occupancy	vpr_types.h	/^    float occupancy;$/;"	m	struct:s_place_region	access:public
s_placer_opts	vpr_types.h	/^struct s_placer_opts$/;"	s
s_placer_opts::block_dist	vpr_types.h	/^    int block_dist;$/;"	m	struct:s_placer_opts	access:public
s_placer_opts::enable_timing_computations	vpr_types.h	/^    boolean enable_timing_computations;$/;"	m	struct:s_placer_opts	access:public
s_placer_opts::inner_loop_recompute_divider	vpr_types.h	/^    int inner_loop_recompute_divider;$/;"	m	struct:s_placer_opts	access:public
s_placer_opts::num_regions	vpr_types.h	/^    int num_regions;$/;"	m	struct:s_placer_opts	access:public
s_placer_opts::pad_loc_file	vpr_types.h	/^    char *pad_loc_file;$/;"	m	struct:s_placer_opts	access:public
s_placer_opts::pad_loc_type	vpr_types.h	/^    enum e_pad_loc_type pad_loc_type;$/;"	m	struct:s_placer_opts	typeref:enum:s_placer_opts::e_pad_loc_type	access:public
s_placer_opts::place_algorithm	vpr_types.h	/^    enum e_place_algorithm place_algorithm;$/;"	m	struct:s_placer_opts	typeref:enum:s_placer_opts::e_place_algorithm	access:public
s_placer_opts::place_chan_width	vpr_types.h	/^    int place_chan_width;$/;"	m	struct:s_placer_opts	access:public
s_placer_opts::place_cost_exp	vpr_types.h	/^    float place_cost_exp;$/;"	m	struct:s_placer_opts	access:public
s_placer_opts::place_cost_type	vpr_types.h	/^    enum place_c_types place_cost_type;$/;"	m	struct:s_placer_opts	typeref:enum:s_placer_opts::place_c_types	access:public
s_placer_opts::place_freq	vpr_types.h	/^    enum pfreq place_freq;$/;"	m	struct:s_placer_opts	typeref:enum:s_placer_opts::pfreq	access:public
s_placer_opts::recompute_crit_iter	vpr_types.h	/^    int recompute_crit_iter;$/;"	m	struct:s_placer_opts	access:public
s_placer_opts::seed	vpr_types.h	/^    int seed;$/;"	m	struct:s_placer_opts	access:public
s_placer_opts::td_place_exp_first	vpr_types.h	/^    float td_place_exp_first;$/;"	m	struct:s_placer_opts	access:public
s_placer_opts::td_place_exp_last	vpr_types.h	/^    float td_place_exp_last;$/;"	m	struct:s_placer_opts	access:public
s_placer_opts::timing_tradeoff	vpr_types.h	/^    float timing_tradeoff;$/;"	m	struct:s_placer_opts	access:public
s_rc_node	net_delay.c	/^struct s_rc_node$/;"	s	file:
s_rc_node::C_downstream	net_delay.c	/^    float C_downstream;$/;"	m	struct:s_rc_node	file:	access:public
s_rc_node::Tdel	net_delay.c	/^    float Tdel;$/;"	m	struct:s_rc_node	file:	access:public
s_rc_node::__anon4::child_list	net_delay.c	/^	t_linked_rc_edge *child_list;$/;"	m	union:s_rc_node::__anon4	file:	access:public
s_rc_node::__anon4::next	net_delay.c	/^	struct s_rc_node *next;$/;"	m	union:s_rc_node::__anon4	typeref:struct:s_rc_node::__anon4::s_rc_node	file:	access:public
s_rc_node::inode	net_delay.c	/^    int inode;$/;"	m	struct:s_rc_node	file:	access:public
s_rc_node::u	net_delay.c	/^    u;$/;"	m	struct:s_rc_node	typeref:union:s_rc_node::__anon4	file:	access:public
s_router_opts	vpr_types.h	/^struct s_router_opts$/;"	s
s_router_opts::acc_fac	vpr_types.h	/^    float acc_fac;$/;"	m	struct:s_router_opts	access:public
s_router_opts::astar_fac	vpr_types.h	/^    float astar_fac;$/;"	m	struct:s_router_opts	access:public
s_router_opts::base_cost_type	vpr_types.h	/^    enum e_base_cost_type base_cost_type;$/;"	m	struct:s_router_opts	typeref:enum:s_router_opts::e_base_cost_type	access:public
s_router_opts::bb_factor	vpr_types.h	/^    int bb_factor;$/;"	m	struct:s_router_opts	access:public
s_router_opts::bend_cost	vpr_types.h	/^    float bend_cost;$/;"	m	struct:s_router_opts	access:public
s_router_opts::criticality_exp	vpr_types.h	/^    float criticality_exp;$/;"	m	struct:s_router_opts	access:public
s_router_opts::first_iter_pres_fac	vpr_types.h	/^    float first_iter_pres_fac;$/;"	m	struct:s_router_opts	access:public
s_router_opts::fixed_channel_width	vpr_types.h	/^    int fixed_channel_width;$/;"	m	struct:s_router_opts	access:public
s_router_opts::full_stats	vpr_types.h	/^	boolean full_stats;$/;"	m	struct:s_router_opts	access:public
s_router_opts::initial_pres_fac	vpr_types.h	/^    float initial_pres_fac;$/;"	m	struct:s_router_opts	access:public
s_router_opts::max_criticality	vpr_types.h	/^    float max_criticality;$/;"	m	struct:s_router_opts	access:public
s_router_opts::max_router_iterations	vpr_types.h	/^    int max_router_iterations;$/;"	m	struct:s_router_opts	access:public
s_router_opts::pres_fac_mult	vpr_types.h	/^    float pres_fac_mult;$/;"	m	struct:s_router_opts	access:public
s_router_opts::route_type	vpr_types.h	/^    enum e_route_type route_type;$/;"	m	struct:s_router_opts	typeref:enum:s_router_opts::e_route_type	access:public
s_router_opts::router_algorithm	vpr_types.h	/^    enum e_router_algorithm router_algorithm;$/;"	m	struct:s_router_opts	typeref:enum:s_router_opts::e_router_algorithm	access:public
s_router_opts::verify_binary_search	vpr_types.h	/^	boolean verify_binary_search;$/;"	m	struct:s_router_opts	access:public
s_rr_indexed_data	vpr_types.h	/^typedef struct s_rr_indexed_data$/;"	s
s_rr_indexed_data::C_load	vpr_types.h	/^    float C_load;$/;"	m	struct:s_rr_indexed_data	access:public
s_rr_indexed_data::T_linear	vpr_types.h	/^    float T_linear;$/;"	m	struct:s_rr_indexed_data	access:public
s_rr_indexed_data::T_quadratic	vpr_types.h	/^    float T_quadratic;$/;"	m	struct:s_rr_indexed_data	access:public
s_rr_indexed_data::base_cost	vpr_types.h	/^    float base_cost;$/;"	m	struct:s_rr_indexed_data	access:public
s_rr_indexed_data::inv_length	vpr_types.h	/^    float inv_length;$/;"	m	struct:s_rr_indexed_data	access:public
s_rr_indexed_data::ortho_cost_index	vpr_types.h	/^    int ortho_cost_index;$/;"	m	struct:s_rr_indexed_data	access:public
s_rr_indexed_data::saved_base_cost	vpr_types.h	/^    float saved_base_cost;$/;"	m	struct:s_rr_indexed_data	access:public
s_rr_indexed_data::seg_index	vpr_types.h	/^    int seg_index;$/;"	m	struct:s_rr_indexed_data	access:public
s_rr_node	vpr_types.h	/^typedef struct s_rr_node$/;"	s
s_rr_node::C	vpr_types.h	/^    float C;$/;"	m	struct:s_rr_node	access:public
s_rr_node::R	vpr_types.h	/^    float R;$/;"	m	struct:s_rr_node	access:public
s_rr_node::capacity	vpr_types.h	/^    short capacity;$/;"	m	struct:s_rr_node	access:public
s_rr_node::cost_index	vpr_types.h	/^    short cost_index;$/;"	m	struct:s_rr_node	access:public
s_rr_node::direction	vpr_types.h	/^    enum e_direction direction;	\/* UDSD by AY *\/$/;"	m	struct:s_rr_node	typeref:enum:s_rr_node::e_direction	access:public
s_rr_node::drivers	vpr_types.h	/^    enum e_drivers drivers;	\/* UDSD by AY *\/$/;"	m	struct:s_rr_node	typeref:enum:s_rr_node::e_drivers	access:public
s_rr_node::edges	vpr_types.h	/^    int *edges;$/;"	m	struct:s_rr_node	access:public
s_rr_node::fan_in	vpr_types.h	/^    short fan_in;$/;"	m	struct:s_rr_node	access:public
s_rr_node::num_edges	vpr_types.h	/^    short num_edges;$/;"	m	struct:s_rr_node	access:public
s_rr_node::num_opin_drivers	vpr_types.h	/^    int num_opin_drivers;	\/* UDSD by WMF (could use "short") *\/$/;"	m	struct:s_rr_node	access:public
s_rr_node::num_wire_drivers	vpr_types.h	/^    int num_wire_drivers;	\/* UDSD by WMF *\/$/;"	m	struct:s_rr_node	access:public
s_rr_node::occ	vpr_types.h	/^    short occ;$/;"	m	struct:s_rr_node	access:public
s_rr_node::ptc_num	vpr_types.h	/^    short ptc_num;$/;"	m	struct:s_rr_node	access:public
s_rr_node::switches	vpr_types.h	/^    short *switches;$/;"	m	struct:s_rr_node	access:public
s_rr_node::type	vpr_types.h	/^    t_rr_type type;$/;"	m	struct:s_rr_node	access:public
s_rr_node::xhigh	vpr_types.h	/^    short xhigh;$/;"	m	struct:s_rr_node	access:public
s_rr_node::xlow	vpr_types.h	/^    short xlow;$/;"	m	struct:s_rr_node	access:public
s_rr_node::yhigh	vpr_types.h	/^    short yhigh;$/;"	m	struct:s_rr_node	access:public
s_rr_node::ylow	vpr_types.h	/^    short ylow;$/;"	m	struct:s_rr_node	access:public
s_rt_node	route_tree_timing.h	/^struct s_rt_node$/;"	s
s_rt_node::C_downstream	route_tree_timing.h	/^    float C_downstream;$/;"	m	struct:s_rt_node	access:public
s_rt_node::R_upstream	route_tree_timing.h	/^    float R_upstream;$/;"	m	struct:s_rt_node	access:public
s_rt_node::Tdel	route_tree_timing.h	/^    float Tdel;$/;"	m	struct:s_rt_node	access:public
s_rt_node::__anon10::child_list	route_tree_timing.h	/^	t_linked_rt_edge *child_list;$/;"	m	union:s_rt_node::__anon10	access:public
s_rt_node::__anon10::next	route_tree_timing.h	/^	struct s_rt_node *next;$/;"	m	union:s_rt_node::__anon10	typeref:struct:s_rt_node::__anon10::s_rt_node	access:public
s_rt_node::inode	route_tree_timing.h	/^    int inode;$/;"	m	struct:s_rt_node	access:public
s_rt_node::parent_node	route_tree_timing.h	/^    struct s_rt_node *parent_node;$/;"	m	struct:s_rt_node	typeref:struct:s_rt_node::s_rt_node	access:public
s_rt_node::parent_switch	route_tree_timing.h	/^    short parent_switch;$/;"	m	struct:s_rt_node	access:public
s_rt_node::re_expand	route_tree_timing.h	/^    short re_expand;$/;"	m	struct:s_rt_node	access:public
s_rt_node::u	route_tree_timing.h	/^    u;$/;"	m	struct:s_rt_node	typeref:union:s_rt_node::__anon10	access:public
s_seg_details	vpr_types.h	/^typedef struct s_seg_details$/;"	s
s_seg_details::Cmetal	vpr_types.h	/^    float Cmetal;$/;"	m	struct:s_seg_details	access:public
s_seg_details::Rmetal	vpr_types.h	/^    float Rmetal;$/;"	m	struct:s_seg_details	access:public
s_seg_details::cb	vpr_types.h	/^    boolean *cb;$/;"	m	struct:s_seg_details	access:public
s_seg_details::direction	vpr_types.h	/^    enum e_direction direction;	\/* UDSD by AY *\/$/;"	m	struct:s_seg_details	typeref:enum:s_seg_details::e_direction	access:public
s_seg_details::drivers	vpr_types.h	/^    enum e_drivers drivers;	\/* UDSD by AY *\/$/;"	m	struct:s_seg_details	typeref:enum:s_seg_details::e_drivers	access:public
s_seg_details::end_track	vpr_types.h	/^    int end_track;		\/* UDSD by AY *\/$/;"	m	struct:s_seg_details	access:public
s_seg_details::group_size	vpr_types.h	/^    int group_size;$/;"	m	struct:s_seg_details	access:public
s_seg_details::group_start	vpr_types.h	/^    int group_start;$/;"	m	struct:s_seg_details	access:public
s_seg_details::index	vpr_types.h	/^    int index;$/;"	m	struct:s_seg_details	access:public
s_seg_details::length	vpr_types.h	/^    int length;$/;"	m	struct:s_seg_details	access:public
s_seg_details::longline	vpr_types.h	/^    boolean longline;$/;"	m	struct:s_seg_details	access:public
s_seg_details::opin_switch	vpr_types.h	/^    short opin_switch;$/;"	m	struct:s_seg_details	access:public
s_seg_details::sb	vpr_types.h	/^    boolean *sb;$/;"	m	struct:s_seg_details	access:public
s_seg_details::start	vpr_types.h	/^    int start;$/;"	m	struct:s_seg_details	access:public
s_seg_details::start_track	vpr_types.h	/^    int start_track;		\/* UDSD by AY *\/$/;"	m	struct:s_seg_details	access:public
s_seg_details::twisted	vpr_types.h	/^    boolean twisted;$/;"	m	struct:s_seg_details	access:public
s_seg_details::wire_switch	vpr_types.h	/^    short wire_switch;$/;"	m	struct:s_seg_details	access:public
s_segment_inf	vpr_types.h	/^typedef struct s_segment_inf$/;"	s
s_segment_inf::Cmetal	vpr_types.h	/^    float Cmetal;$/;"	m	struct:s_segment_inf	access:public
s_segment_inf::Rmetal	vpr_types.h	/^    float Rmetal;$/;"	m	struct:s_segment_inf	access:public
s_segment_inf::cb	vpr_types.h	/^    boolean *cb;$/;"	m	struct:s_segment_inf	access:public
s_segment_inf::cb_len	vpr_types.h	/^    int cb_len;$/;"	m	struct:s_segment_inf	access:public
s_segment_inf::directionality	vpr_types.h	/^    enum e_directionality directionality;$/;"	m	struct:s_segment_inf	typeref:enum:s_segment_inf::e_directionality	access:public
s_segment_inf::frac_cb	vpr_types.h	/^    float frac_cb;$/;"	m	struct:s_segment_inf	access:public
s_segment_inf::frac_sb	vpr_types.h	/^    float frac_sb;$/;"	m	struct:s_segment_inf	access:public
s_segment_inf::frequency	vpr_types.h	/^    int frequency;$/;"	m	struct:s_segment_inf	access:public
s_segment_inf::length	vpr_types.h	/^    int length;$/;"	m	struct:s_segment_inf	access:public
s_segment_inf::longline	vpr_types.h	/^    boolean longline;$/;"	m	struct:s_segment_inf	access:public
s_segment_inf::opin_switch	vpr_types.h	/^    short opin_switch;$/;"	m	struct:s_segment_inf	access:public
s_segment_inf::sb	vpr_types.h	/^    boolean *sb;$/;"	m	struct:s_segment_inf	access:public
s_segment_inf::sb_len	vpr_types.h	/^    int sb_len;$/;"	m	struct:s_segment_inf	access:public
s_segment_inf::wire_switch	vpr_types.h	/^    short wire_switch;$/;"	m	struct:s_segment_inf	access:public
s_subblock	vpr_types.h	/^struct s_subblock$/;"	s
s_subblock::clock	vpr_types.h	/^    int clock;$/;"	m	struct:s_subblock	access:public
s_subblock::inputs	vpr_types.h	/^    int *inputs;$/;"	m	struct:s_subblock	access:public
s_subblock::name	vpr_types.h	/^    char *name;$/;"	m	struct:s_subblock	access:public
s_subblock::outputs	vpr_types.h	/^    int *outputs;$/;"	m	struct:s_subblock	access:public
s_subblock_data	vpr_types.h	/^struct s_subblock_data$/;"	s
s_subblock_data::num_const_gen	vpr_types.h	/^    int num_const_gen;$/;"	m	struct:s_subblock_data	access:public
s_subblock_data::num_ff	vpr_types.h	/^    int num_ff;$/;"	m	struct:s_subblock_data	access:public
s_subblock_data::num_subblocks_per_block	vpr_types.h	/^    int *num_subblocks_per_block;$/;"	m	struct:s_subblock_data	access:public
s_subblock_data::subblock_inf	vpr_types.h	/^    t_subblock **subblock_inf;$/;"	m	struct:s_subblock_data	access:public
s_switch_inf	vpr_types.h	/^struct s_switch_inf$/;"	s
s_switch_inf::Cin	vpr_types.h	/^    float Cin;$/;"	m	struct:s_switch_inf	access:public
s_switch_inf::Cout	vpr_types.h	/^    float Cout;$/;"	m	struct:s_switch_inf	access:public
s_switch_inf::R	vpr_types.h	/^    float R;$/;"	m	struct:s_switch_inf	access:public
s_switch_inf::Tdel	vpr_types.h	/^    float Tdel;$/;"	m	struct:s_switch_inf	access:public
s_switch_inf::buf_size	vpr_types.h	/^    float buf_size;$/;"	m	struct:s_switch_inf	access:public
s_switch_inf::buffered	vpr_types.h	/^    boolean buffered;$/;"	m	struct:s_switch_inf	access:public
s_switch_inf::mux_trans_size	vpr_types.h	/^    float mux_trans_size;$/;"	m	struct:s_switch_inf	access:public
s_switch_inf::name	vpr_types.h	/^    char *name;$/;"	m	struct:s_switch_inf	access:public
s_timing_inf	vpr_types.h	/^typedef struct s_timing_inf$/;"	s
s_timing_inf::C_ipin_cblock	vpr_types.h	/^    float C_ipin_cblock;$/;"	m	struct:s_timing_inf	access:public
s_timing_inf::T_ipin_cblock	vpr_types.h	/^    float T_ipin_cblock;$/;"	m	struct:s_timing_inf	access:public
s_timing_inf::timing_analysis_enabled	vpr_types.h	/^    boolean timing_analysis_enabled;$/;"	m	struct:s_timing_inf	access:public
s_trace	vpr_types.h	/^struct s_trace$/;"	s
s_trace::index	vpr_types.h	/^    int index;$/;"	m	struct:s_trace	access:public
s_trace::iswitch	vpr_types.h	/^    short iswitch;$/;"	m	struct:s_trace	access:public
s_trace::next	vpr_types.h	/^    struct s_trace *next;$/;"	m	struct:s_trace	typeref:struct:s_trace::s_trace	access:public
s_type_descriptor	vpr_types.h	/^struct s_type_descriptor$/;"	s
s_type_descriptor::Fc_in	vpr_types.h	/^    float Fc_in;$/;"	m	struct:s_type_descriptor	access:public
s_type_descriptor::Fc_out	vpr_types.h	/^    float Fc_out;$/;"	m	struct:s_type_descriptor	access:public
s_type_descriptor::capacity	vpr_types.h	/^    int capacity;$/;"	m	struct:s_type_descriptor	access:public
s_type_descriptor::class_inf	vpr_types.h	/^    struct s_class *class_inf;	\/* [0..num_class-1] *\/$/;"	m	struct:s_type_descriptor	typeref:struct:s_type_descriptor::s_class	access:public
s_type_descriptor::grid_loc_def	vpr_types.h	/^    struct s_grid_loc_def *grid_loc_def;	\/* [0..num_def-1] *\/$/;"	m	struct:s_type_descriptor	typeref:struct:s_type_descriptor::s_grid_loc_def	access:public
s_type_descriptor::height	vpr_types.h	/^    int height;$/;"	m	struct:s_type_descriptor	access:public
s_type_descriptor::index	vpr_types.h	/^    int index;			\/* index of type descriptor in array (allows for index referencing) *\/$/;"	m	struct:s_type_descriptor	access:public
s_type_descriptor::is_Fc_frac	vpr_types.h	/^    boolean is_Fc_frac;$/;"	m	struct:s_type_descriptor	access:public
s_type_descriptor::is_Fc_out_full_flex	vpr_types.h	/^    boolean is_Fc_out_full_flex;$/;"	m	struct:s_type_descriptor	access:public
s_type_descriptor::is_global_pin	vpr_types.h	/^    boolean *is_global_pin;	\/* [0..num_pins-1] *\/$/;"	m	struct:s_type_descriptor	access:public
s_type_descriptor::max_subblock_inputs	vpr_types.h	/^    int max_subblock_inputs;$/;"	m	struct:s_type_descriptor	access:public
s_type_descriptor::max_subblock_outputs	vpr_types.h	/^    int max_subblock_outputs;$/;"	m	struct:s_type_descriptor	access:public
s_type_descriptor::max_subblocks	vpr_types.h	/^    int max_subblocks;$/;"	m	struct:s_type_descriptor	access:public
s_type_descriptor::name	vpr_types.h	/^    const char *name;$/;"	m	struct:s_type_descriptor	access:public
s_type_descriptor::num_class	vpr_types.h	/^    int num_class;$/;"	m	struct:s_type_descriptor	access:public
s_type_descriptor::num_drivers	vpr_types.h	/^    int num_drivers;$/;"	m	struct:s_type_descriptor	access:public
s_type_descriptor::num_grid_loc_def	vpr_types.h	/^    int num_grid_loc_def;$/;"	m	struct:s_type_descriptor	access:public
s_type_descriptor::num_pins	vpr_types.h	/^    int num_pins;$/;"	m	struct:s_type_descriptor	access:public
s_type_descriptor::num_receivers	vpr_types.h	/^    int num_receivers;$/;"	m	struct:s_type_descriptor	access:public
s_type_descriptor::pin_class	vpr_types.h	/^    int *pin_class;		\/* [0..num_pins-1] *\/$/;"	m	struct:s_type_descriptor	access:public
s_type_descriptor::pinloc	vpr_types.h	/^    int ***pinloc;		\/* [0..height-1][0..3][0..num_pins-1] *\/$/;"	m	struct:s_type_descriptor	access:public
s_type_descriptor::type_timing_inf	vpr_types.h	/^    t_type_timing_inf type_timing_inf;$/;"	m	struct:s_type_descriptor	access:public
s_type_timing_inf	vpr_types.h	/^typedef struct s_type_timing_inf$/;"	s
s_type_timing_inf::T_fb_ipin_to_sblk_ipin	vpr_types.h	/^    float T_fb_ipin_to_sblk_ipin;$/;"	m	struct:s_type_timing_inf	access:public
s_type_timing_inf::T_sblk_opin_to_fb_opin	vpr_types.h	/^    float T_sblk_opin_to_fb_opin;$/;"	m	struct:s_type_timing_inf	access:public
s_type_timing_inf::T_sblk_opin_to_sblk_ipin	vpr_types.h	/^    float T_sblk_opin_to_sblk_ipin;$/;"	m	struct:s_type_timing_inf	access:public
s_type_timing_inf::T_subblock	vpr_types.h	/^    t_T_subblock *T_subblock;$/;"	m	struct:s_type_timing_inf	access:public
save_region_occ	place.c	/^save_region_occ(float **old_region_occ_x,$/;"	f	file:	signature:(float **old_region_occ_x, float **old_region_occ_y, int num_regions)
save_region_occ	place.c	/^static void save_region_occ(float **old_region_occ_x,$/;"	p	file:	signature:(float **old_region_occ_x, float **old_region_occ_y, int num_regions)
save_routing	route_common.c	/^save_routing(struct s_trace **best_routing,$/;"	f	signature:(struct s_trace **best_routing, t_ivec ** fb_opins_used_locally, t_ivec ** saved_clb_opins_used_locally)
save_routing	route_export.h	/^void save_routing(struct s_trace **best_routing,$/;"	p	signature:(struct s_trace **best_routing, t_ivec ** fb_opins_used_locally, t_ivec ** saved_clb_opins_used_locally)
saved_base_cost	vpr_types.h	/^    float saved_base_cost;$/;"	m	struct:s_rr_indexed_data	access:public
saved_xleft	graphics.c	/^static float saved_xleft, saved_xright, saved_ytop, saved_ybot;$/;"	v	file:
saved_xright	graphics.c	/^static float saved_xleft, saved_xright, saved_ytop, saved_ybot;$/;"	v	file:
saved_ybot	graphics.c	/^static float saved_xleft, saved_xright, saved_ytop, saved_ybot;$/;"	v	file:
saved_ytop	graphics.c	/^static float saved_xleft, saved_xright, saved_ytop, saved_ybot;$/;"	v	file:
sb	vpr_types.h	/^    boolean *sb;$/;"	m	struct:s_seg_details	access:public
sb	vpr_types.h	/^    boolean *sb;$/;"	m	struct:s_segment_inf	access:public
sb_len	vpr_types.h	/^    int sb_len;$/;"	m	struct:s_segment_inf	access:public
sched_type	vpr_types.h	/^enum sched_type$/;"	g
screen_num	graphics.c	/^static int screen_num;$/;"	v	file:
seed	vpr_types.h	/^    int seed;$/;"	m	struct:s_placer_opts	access:public
seg_index	vpr_types.h	/^    int seg_index;$/;"	m	struct:s_rr_indexed_data	access:public
seg_index_of_cblock	rr_graph_util.c	/^seg_index_of_cblock(t_rr_type from_rr_type,$/;"	f	signature:(t_rr_type from_rr_type, int to_node)
seg_index_of_cblock	rr_graph_util.h	/^int seg_index_of_cblock(t_rr_type from_rr_type,$/;"	p	signature:(t_rr_type from_rr_type, int to_node)
seg_index_of_sblock	rr_graph_util.c	/^seg_index_of_sblock(int from_node,$/;"	f	signature:(int from_node, int to_node)
seg_index_of_sblock	rr_graph_util.h	/^int seg_index_of_sblock(int from_node,$/;"	p	signature:(int from_node, int to_node)
set_graphics_state	draw.c	/^set_graphics_state(boolean show_graphics_val,$/;"	f	signature:(boolean show_graphics_val, int gr_automode_val, enum e_route_type route_type)
set_graphics_state	draw.h	/^void set_graphics_state(boolean show_graphics_val,$/;"	p	signature:(boolean show_graphics_val, int gr_automode_val, enum e_route_type route_type)
setcolor	graphics.c	/^setcolor(int cindex)$/;"	f	signature:(int cindex)
setcolor	graphics.h	/^void setcolor(int cindex);	\/* Use a constant from clist *\/$/;"	p	signature:(int cindex)
setfontsize	graphics.c	/^setfontsize(int pointsize)$/;"	f	signature:(int pointsize)
setfontsize	graphics.h	/^void setfontsize(int pointsize);$/;"	p	signature:(int pointsize)
setlinestyle	graphics.c	/^setlinestyle(int linestyle)$/;"	f	signature:(int linestyle)
setlinestyle	graphics.h	/^void setlinestyle(int linestyle);$/;"	p	signature:(int linestyle)
setlinewidth	graphics.c	/^setlinewidth(int linewidth)$/;"	f	signature:(int linewidth)
setlinewidth	graphics.h	/^void setlinewidth(int linewidth);$/;"	p	signature:(int linewidth)
setpoly	graphics.c	/^setpoly(int bnum,$/;"	f	file:	signature:(int bnum, int xc, int yc, int r, float theta)
setup_chan_width	timing_place_lookup.c	/^setup_chan_width(struct s_router_opts router_opts,$/;"	f	file:	signature:(struct s_router_opts router_opts, t_chan_width_dist chan_width_dist)
setup_chan_width	timing_place_lookup.c	/^static void setup_chan_width(struct s_router_opts router_opts,$/;"	p	file:	signature:(struct s_router_opts router_opts, t_chan_width_dist chan_width_dist)
show_congestion	draw.c	/^static boolean show_congestion = FALSE;$/;"	v	file:
show_graphics	draw.c	/^static boolean show_graphics;	\/* Graphics enabled or not? *\/$/;"	v	file:
show_nets	draw.c	/^static boolean show_nets = FALSE;	\/* Show nets of placement or routing? *\/$/;"	v	file:
sibling	ezxml.h	/^	ezxml_t sibling;	\/* next tag with different name in same section and depth *\/$/;"	m	struct:ezxml	access:public
sink_order	timing_place_lookup.c	/^static int *sink_order;$/;"	v	file:
size	rr_graph.c	/^    int size;$/;"	m	struct:s_mux	file:	access:public
snprintf	ezxml.c	57;"	d	file:
special_blk	read_netlist.c	/^enum special_blk$/;"	g	file:
standalone	ezxml.c	/^    short standalone;		\/* non-zero if <?xml standalone="yes"?> *\/$/;"	m	struct:ezxml_root	file:	access:public
start	vpr_types.h	/^    int start;$/;"	m	struct:s_seg_details	access:public
start_col	vpr_types.h	/^    int start_col;$/;"	m	struct:s_grid_loc_def	access:public
start_hash_table_iterator	hash.c	/^start_hash_table_iterator(void)$/;"	f	signature:(void)
start_hash_table_iterator	hash.h	/^struct s_hash_iterator start_hash_table_iterator(void);$/;"	p	signature:(void)
start_track	vpr_types.h	/^    int start_track;		\/* UDSD by AY *\/$/;"	m	struct:s_seg_details	access:public
starting_t	place.c	/^starting_t(float *cost_ptr,$/;"	f	file:	signature:(float *cost_ptr, float *bb_cost_ptr, float *timing_cost_ptr, int place_cost_type, float **old_region_occ_x, float **old_region_occ_y, int num_regions, boolean fixed_pins, struct s_annealing_sched annealing_sched, int max_moves, float rlim, enum e_place_algorithm place_algorithm, float timing_tradeoff, float inverse_prev_bb_cost, float inverse_prev_timing_cost, float *delay_cost_ptr)
starting_t	place.c	/^static float starting_t(float *cost_ptr,$/;"	p	file:	signature:(float *cost_ptr, float *bb_cost_ptr, float *timing_cost_ptr, int place_cost_type, float **old_region_occ_x, float **old_region_occ_y, int num_regions, boolean fixed_pins, struct s_annealing_sched annealing_sched, int max_moves, float rlim, enum e_place_algorithm place_algorithm, float timing_tradeoff, float inverse_prev_bb_cost, float inverse_prev_timing_cost, float *delay_cost_ptr)
subblock_inf	vpr_types.h	/^    t_subblock **subblock_inf;$/;"	m	struct:s_subblock_data	access:public
switch_block_type	vpr_types.h	/^    enum e_switch_block_type switch_block_type;$/;"	m	struct:s_det_routing_arch	typeref:enum:s_det_routing_arch::e_switch_block_type	access:public
switch_inf	globals_declare.h	/^struct s_switch_inf *switch_inf;	\/* [0..det_routing_arch.num_switch-1] *\/$/;"	v	typeref:struct:s_switch_inf
switch_inf	main.c	/^struct s_switch_inf *switch_inf = NULL;	\/* [0..(det_routing_arch.num_switch-1)] *\/$/;"	v	typeref:struct:s_switch_inf
switches	vpr_types.h	/^    short *switches;$/;"	m	struct:s_rr_node	access:public
sync_grid_to_blocks	vpr_utils.c	/^sync_grid_to_blocks(IN int num_blocks,$/;"	f	signature:(IN int num_blocks, IN const struct s_block block_list[], IN int nx, IN int ny, INOUT struct s_grid_tile **grid)
sync_grid_to_blocks	vpr_utils.h	/^void sync_grid_to_blocks(IN int num_blocks,$/;"	p	signature:(IN int num_blocks, IN const struct s_block block_list[], IN int nx, IN int ny, INOUT struct s_grid_tile **grid)
sync_nets_to_blocks	vpr_utils.c	/^sync_nets_to_blocks(IN int num_blocks,$/;"	f	signature:(IN int num_blocks, IN const struct s_block block_list[], IN int num_nets, INOUT struct s_net net_list[])
sync_nets_to_blocks	vpr_utils.h	/^void sync_nets_to_blocks(IN int num_blocks,$/;"	p	signature:(IN int num_blocks, IN const struct s_block block_list[], IN int num_nets, INOUT struct s_net net_list[])
t_T_subblock	vpr_types.h	/^t_T_subblock;$/;"	t	typeref:struct:s_T_subblock
t_arch	xml_arch.h	/^typedef struct s_arch t_arch;$/;"	t	typeref:struct:s_arch
t_button	graphics.c	/^t_button;$/;"	t	typeref:struct:__anon5	file:
t_chan	vpr_types.h	/^t_chan;$/;"	t	typeref:struct:s_chan
t_chan_width_dist	vpr_types.h	/^t_chan_width_dist;$/;"	t	typeref:struct:s_chan_width_dist
t_class	vpr_types.h	/^typedef struct s_class t_class;$/;"	t	typeref:struct:s_class
t_fmap_cell	place_and_route.h	/^t_fmap_cell;$/;"	t	typeref:struct:s_fmap_cell
t_graph_type	rr_graph.h	/^typedef enum e_graph_type t_graph_type;$/;"	t	typeref:enum:e_graph_type
t_ivec	util.h	/^typedef struct s_ivec t_ivec;$/;"	t	typeref:struct:s_ivec
t_linked_edge	rr_graph_util.h	/^typedef struct s_linked_edge t_linked_edge;$/;"	t	typeref:struct:s_linked_edge
t_linked_int	util.h	/^typedef struct s_linked_int t_linked_int;$/;"	t	typeref:struct:s_linked_int
t_linked_rc_edge	net_delay.c	/^typedef struct s_linked_rc_edge t_linked_rc_edge;$/;"	t	typeref:struct:s_linked_rc_edge	file:
t_linked_rc_ptr	net_delay.c	/^typedef struct s_linked_rc_ptr t_linked_rc_ptr;$/;"	t	typeref:struct:s_linked_rc_ptr	file:
t_linked_rt_edge	route_tree_timing.h	/^typedef struct s_linked_rt_edge t_linked_rt_edge;$/;"	t	typeref:struct:s_linked_rt_edge
t_mst_edge	mst.h	/^t_mst_edge;$/;"	t	typeref:struct:s_mst_edge
t_mux	rr_graph.c	/^t_mux;$/;"	t	typeref:struct:s_mux	file:
t_mux_size_distribution	rr_graph.c	/^t_mux_size_distribution;$/;"	t	typeref:struct:s_mux_size_distribution	file:
t_options	ReadOptions.h	/^typedef struct s_options t_options;$/;"	t	typeref:struct:s_options
t_point	graphics.h	/^t_point;			\/* Used in calls to fillpoly *\/$/;"	t	typeref:struct:__anon3
t_rc_node	net_delay.c	/^typedef struct s_rc_node t_rc_node;$/;"	t	typeref:struct:s_rc_node	file:
t_rr_indexed_data	vpr_types.h	/^t_rr_indexed_data;$/;"	t	typeref:struct:s_rr_indexed_data
t_rr_node	vpr_types.h	/^t_rr_node;$/;"	t	typeref:struct:s_rr_node
t_rr_node_route_inf	route_common.h	/^t_rr_node_route_inf;$/;"	t	typeref:struct:__anon2
t_rr_type	vpr_types.h	/^t_rr_type;$/;"	t	typeref:enum:e_rr_type
t_rt_node	route_tree_timing.h	/^typedef struct s_rt_node t_rt_node;$/;"	t	typeref:struct:s_rt_node
t_seg_details	vpr_types.h	/^t_seg_details;$/;"	t	typeref:struct:s_seg_details
t_segment_inf	vpr_types.h	/^t_segment_inf;$/;"	t	typeref:struct:s_segment_inf
t_subblock	vpr_types.h	/^typedef struct s_subblock t_subblock;$/;"	t	typeref:struct:s_subblock
t_subblock_data	vpr_types.h	/^typedef struct s_subblock_data t_subblock_data;$/;"	t	typeref:struct:s_subblock_data
t_switch_block_type	vpr_types.h	/^typedef enum e_switch_block_type t_switch_block_type;$/;"	t	typeref:enum:e_switch_block_type
t_tedge	path_delay2.h	/^t_tedge;$/;"	t	typeref:struct:__anon6
t_timing_inf	vpr_types.h	/^t_timing_inf;$/;"	t	typeref:struct:s_timing_inf
t_tnode	path_delay2.h	/^t_tnode;$/;"	t	typeref:struct:__anon7
t_tnode_descript	path_delay2.h	/^t_tnode_descript;$/;"	t	typeref:struct:__anon9
t_tnode_type	path_delay2.h	/^t_tnode_type;$/;"	t	typeref:enum:__anon8
t_type_descriptor	vpr_types.h	/^typedef struct s_type_descriptor t_type_descriptor;$/;"	t	typeref:struct:s_type_descriptor
t_type_ptr	vpr_types.h	/^typedef const struct s_type_descriptor *t_type_ptr;$/;"	t	typeref:struct:s_type_descriptor
t_type_timing_inf	vpr_types.h	/^t_type_timing_inf;$/;"	t	typeref:struct:s_type_timing_inf
target_flag	route_common.h	/^    short target_flag;$/;"	m	struct:__anon2	access:public
td_place_exp_first	vpr_types.h	/^    float td_place_exp_first;$/;"	m	struct:s_placer_opts	access:public
td_place_exp_last	vpr_types.h	/^    float td_place_exp_last;$/;"	m	struct:s_placer_opts	access:public
tedge_ch_bytes_avail	path_delay.c	/^static int tedge_ch_bytes_avail = 0;$/;"	v	file:
tedge_ch_list_head	path_delay.c	/^static struct s_linked_vptr *tedge_ch_list_head = NULL;$/;"	v	typeref:struct:s_linked_vptr	file:
tedge_ch_next_avail	path_delay.c	/^static char *tedge_ch_next_avail = NULL;$/;"	v	file:
temp_net_cost	place.c	/^static float *net_cost = NULL, *temp_net_cost = NULL;	\/* [0..num_nets-1] *\/$/;"	v	file:
temp_point_to_point_delay_cost	place.c	/^static float **temp_point_to_point_delay_cost = NULL;$/;"	v	file:
temp_point_to_point_timing_cost	place.c	/^static float **temp_point_to_point_timing_cost = NULL;$/;"	v	file:
test_if_exposed	graphics.c	/^static Bool test_if_exposed(Display * disp,$/;"	p	file:	signature:(Display * disp, XEvent * event_ptr, XPointer dummy)
test_if_exposed	graphics.c	/^test_if_exposed(Display * disp,$/;"	f	file:	signature:(Display * disp, XEvent * event_ptr, XPointer dummy)
text	graphics.c	/^    char text[BUTTON_TEXT_LEN];$/;"	m	struct:__anon5	file:	access:public
textarea	graphics.c	/^static Window toplevel, menu, textarea;	\/* various windows *\/$/;"	v	file:
tile_width	draw.c	/^static float tile_width, pin_size;$/;"	v	file:
tile_x	draw.c	/^static float *tile_x, *tile_y;$/;"	v	file:
tile_y	draw.c	/^static float *tile_x, *tile_y;$/;"	v	file:
timing_analysis_enabled	vpr_types.h	/^    boolean timing_analysis_enabled;$/;"	m	struct:s_timing_inf	access:public
timing_driven_check_net_delays	route_timing.c	/^static void timing_driven_check_net_delays(float **net_delay);$/;"	p	file:	signature:(float **net_delay)
timing_driven_check_net_delays	route_timing.c	/^timing_driven_check_net_delays(float **net_delay)$/;"	f	file:	signature:(float **net_delay)
timing_driven_expand_neighbours	route_timing.c	/^static void timing_driven_expand_neighbours(struct s_heap *current,$/;"	p	file:	signature:(struct s_heap *current, int inet, float bend_cost, float criticality_fac, int target_node, float astar_fac)
timing_driven_expand_neighbours	route_timing.c	/^timing_driven_expand_neighbours(struct s_heap *current,$/;"	f	file:	signature:(struct s_heap *current, int inet, float bend_cost, float criticality_fac, int target_node, float astar_fac)
timing_driven_route_net	route_timing.c	/^timing_driven_route_net(int inet,$/;"	f	signature:(int inet, float pres_fac, float max_criticality, float criticality_exp, float astar_fac, float bend_cost, float *net_slack, float *pin_criticality, int *sink_order, t_rt_node ** rt_node_of_sink, float T_crit, float *net_delay)
timing_driven_route_net	route_timing.h	/^boolean timing_driven_route_net(int inet,$/;"	p	signature:(int inet, float pres_fac, float max_criticality, float criticality_exp, float astar_fac, float bend_cost, float *net_slack, float *pin_criticality, int *sink_order, t_rt_node ** rt_node_of_sink, float T_crit, float *net_delay)
timing_place_crit	timing_place.c	/^float **timing_place_crit;	\/*available externally *\/$/;"	v
timing_place_crit_chunk_list_head	timing_place.c	/^static struct s_linked_vptr *timing_place_crit_chunk_list_head;$/;"	v	typeref:struct:s_linked_vptr	file:
timing_tradeoff	vpr_types.h	/^    float timing_tradeoff;$/;"	m	struct:s_placer_opts	access:public
tnode	path_delay2.c	/^t_tnode *tnode;			\/* [0..num_tnodes - 1] *\/$/;"	v
tnode_descript	path_delay2.c	/^t_tnode_descript *tnode_descript;	\/* [0..num_tnodes - 1] *\/$/;"	v
tnodes_at_level	path_delay2.c	/^struct s_ivec *tnodes_at_level;$/;"	v	typeref:struct:s_ivec
to_node	mst.h	/^    unsigned short int to_node;$/;"	m	struct:s_mst_edge	access:public
to_node	path_delay2.h	/^    int to_node;$/;"	m	struct:__anon6	access:public
toggle_congestion	draw.c	/^static void toggle_congestion(void (*drawscreen) (void));$/;"	p	file:	signature:(void (*drawscreen) (void))
toggle_congestion	draw.c	/^toggle_congestion(void (*drawscreen_ptr) (void))$/;"	f	file:	signature:(void (*drawscreen_ptr) (void))
toggle_nets	draw.c	/^static void toggle_nets(void (*drawscreen) (void));$/;"	p	file:	signature:(void (*drawscreen) (void))
toggle_nets	draw.c	/^toggle_nets(void (*drawscreen_ptr) (void))$/;"	f	file:	signature:(void (*drawscreen_ptr) (void))
toggle_rr	draw.c	/^static void toggle_rr(void (*drawscreen) (void));$/;"	p	file:	signature:(void (*drawscreen) (void))
toggle_rr	draw.c	/^toggle_rr(void (*drawscreen_ptr) (void))$/;"	f	file:	signature:(void (*drawscreen_ptr) (void))
top_height	graphics.c	/^static unsigned int top_width, top_height;	\/* window size *\/$/;"	v	file:
top_width	graphics.c	/^static unsigned int top_width, top_height;	\/* window size *\/$/;"	v	file:
toplevel	graphics.c	/^static Window toplevel, menu, textarea;	\/* various windows *\/$/;"	v	file:
trace_free_head	route_common.c	/^static struct s_trace *trace_free_head = NULL;$/;"	v	typeref:struct:s_trace	file:
trace_head	globals_declare.h	/^struct s_trace **trace_head, **trace_tail;$/;"	v	typeref:struct:s_trace
trace_head	main.c	/^struct s_trace **trace_head = NULL;	\/* [0..(num_nets-1)] *\/$/;"	v	typeref:struct:s_trace
trace_tail	globals_declare.h	/^struct s_trace **trace_head, **trace_tail;$/;"	v	typeref:struct:
trace_tail	main.c	/^struct s_trace **trace_tail = NULL;	\/* [0..(num_nets-1)] *\/$/;"	v	typeref:struct:s_trace
track_side	rr_graph.c	/^static int track_side(int clb_side);$/;"	p	file:	signature:(int clb_side)
trans_per_R	rr_graph_area.c	/^static float trans_per_R(float Rtrans,$/;"	p	file:	signature:(float Rtrans, float R_minW_trans)
trans_per_R	rr_graph_area.c	/^trans_per_R(float Rtrans,$/;"	f	file:	signature:(float Rtrans, float R_minW_trans)
trans_per_buf	rr_graph_area.c	/^static float trans_per_buf(float Rbuf,$/;"	p	file:	signature:(float Rbuf, float R_minW_nmos, float R_minW_pmos)
trans_per_buf	rr_graph_area.c	/^trans_per_buf(float Rbuf,$/;"	f	file:	signature:(float Rbuf, float R_minW_nmos, float R_minW_pmos)
trans_per_mux	rr_graph_area.c	/^static float trans_per_mux(int num_inputs,$/;"	p	file:	signature:(int num_inputs, float trans_sram_bit, float pass_trans_area)
trans_per_mux	rr_graph_area.c	/^trans_per_mux(int num_inputs,$/;"	f	file:	signature:(int num_inputs, float trans_sram_bit, float pass_trans_area)
translate_down	graphics.c	/^static void translate_down(void (*drawscreen) (void));$/;"	p	file:	signature:(void (*drawscreen) (void))
translate_down	graphics.c	/^translate_down(void (*drawscreen) (void))$/;"	f	file:	signature:(void (*drawscreen) (void))
translate_left	graphics.c	/^static void translate_left(void (*drawscreen) (void));$/;"	p	file:	signature:(void (*drawscreen) (void))
translate_left	graphics.c	/^translate_left(void (*drawscreen) (void))$/;"	f	file:	signature:(void (*drawscreen) (void))
translate_right	graphics.c	/^static void translate_right(void (*drawscreen) (void));$/;"	p	file:	signature:(void (*drawscreen) (void))
translate_right	graphics.c	/^translate_right(void (*drawscreen) (void))$/;"	f	file:	signature:(void (*drawscreen) (void))
translate_up	graphics.c	/^static void translate_up(void (*drawscreen) (void));$/;"	p	file:	signature:(void (*drawscreen) (void))
translate_up	graphics.c	/^translate_up(void (*drawscreen) (void))$/;"	f	file:	signature:(void (*drawscreen) (void))
try_breadth_first_route	route_breadth_first.c	/^try_breadth_first_route(struct s_router_opts router_opts,$/;"	f	signature:(struct s_router_opts router_opts, t_ivec ** fb_opins_used_locally, int width_fac)
try_breadth_first_route	route_breadth_first.h	/^boolean try_breadth_first_route(struct s_router_opts router_opts,$/;"	p	signature:(struct s_router_opts router_opts, t_ivec ** fb_opins_used_locally, int width_fac)
try_directed_search_route	route_directed_search.c	/^try_directed_search_route(struct s_router_opts router_opts,$/;"	f	signature:(struct s_router_opts router_opts, t_ivec ** fb_opins_used_locally, int width_fac, t_mst_edge ** mst)
try_directed_search_route	route_directed_search.h	/^boolean try_directed_search_route(struct s_router_opts router_opts,$/;"	p	signature:(struct s_router_opts router_opts, t_ivec ** fb_opins_used_locally, int width_fac, t_mst_edge ** mst)
try_place	place.c	/^try_place(struct s_placer_opts placer_opts,$/;"	f	signature:(struct s_placer_opts placer_opts, struct s_annealing_sched annealing_sched, t_chan_width_dist chan_width_dist, struct s_router_opts router_opts, struct s_det_routing_arch det_routing_arch, t_segment_inf * segment_inf, t_timing_inf timing_inf, t_subblock_data * subblock_data_ptr, t_mst_edge *** mst)
try_place	place.h	/^void try_place(struct s_placer_opts placer_opts,$/;"	p	signature:(struct s_placer_opts placer_opts, struct s_annealing_sched annealing_sched, t_chan_width_dist chan_width_dist, struct s_router_opts router_opts, struct s_det_routing_arch det_routing_arch, t_segment_inf * segment_inf, t_timing_inf timing_inf, t_subblock_data * subblock_data_ptr, t_mst_edge *** mst)
try_route	route_common.c	/^try_route(int width_fac,$/;"	f	signature:(int width_fac, struct s_router_opts router_opts, struct s_det_routing_arch det_routing_arch, t_segment_inf * segment_inf, t_timing_inf timing_inf, float **net_slack, float **net_delay, t_chan_width_dist chan_width_dist, t_ivec ** fb_opins_used_locally, t_mst_edge ** mst, boolean * Fc_clipped)
try_route	route_export.h	/^boolean try_route(int width_fac,$/;"	p	signature:(int width_fac, struct s_router_opts router_opts, struct s_det_routing_arch det_routing_arch, t_segment_inf * segment_inf, t_timing_inf timing_inf, float **net_slack, float **net_delay, t_chan_width_dist chan_width_dist, t_ivec ** fb_opins_used_locally, t_mst_edge ** mst, boolean * Fc_clipped)
try_swap	place.c	/^static int try_swap(float t,$/;"	p	file:	signature:(float t, float *cost, float *bb_cost, float *timing_cost, float rlim, int place_cost_type, float **old_region_occ_x, float **old_region_occ_y, int num_regions, boolean fixed_pins, enum e_place_algorithm place_algorithm, float timing_tradeoff, float inverse_prev_bb_cost, float inverse_prev_timing_cost, float *delay_cost, int *x_lookup)
try_swap	place.c	/^try_swap(float t,$/;"	f	file:	signature:(float t, float *cost, float *bb_cost, float *timing_cost, float rlim, int place_cost_type, float **old_region_occ_x, float **old_region_occ_y, int num_regions, boolean fixed_pins, enum e_place_algorithm place_algorithm, float timing_tradeoff, float inverse_prev_bb_cost, float inverse_prev_timing_cost, float *delay_cost, int *x_lookup)
try_timing_driven_route	route_timing.c	/^try_timing_driven_route(struct s_router_opts router_opts,$/;"	f	signature:(struct s_router_opts router_opts, float **net_slack, float **net_delay, t_ivec ** fb_opins_used_locally)
try_timing_driven_route	route_timing.h	/^boolean try_timing_driven_route(struct s_router_opts router_opts,$/;"	p	signature:(struct s_router_opts router_opts, float **net_slack, float **net_delay, t_ivec ** fb_opins_used_locally)
turn_on_off	graphics.c	/^turn_on_off(int pressed)$/;"	f	file:	signature:(int pressed)
twisted	vpr_types.h	/^    boolean twisted;$/;"	m	struct:s_seg_details	access:public
txt	ezxml.h	/^	char *txt;		\/* tag character content, empty string if none *\/$/;"	m	struct:ezxml	access:public
type	path_delay2.h	/^    t_tnode_type type;$/;"	m	struct:__anon9	access:public
type	vpr_types.h	/^    enum e_pin_type type;$/;"	m	struct:s_class	typeref:enum:s_class::e_pin_type	access:public
type	vpr_types.h	/^    enum e_stat type;$/;"	m	struct:s_chan	typeref:enum:s_chan::e_stat	access:public
type	vpr_types.h	/^    enum sched_type type;$/;"	m	struct:s_annealing_sched	typeref:enum:s_annealing_sched::sched_type	access:public
type	vpr_types.h	/^    t_rr_type type;$/;"	m	struct:s_rr_node	access:public
type	vpr_types.h	/^    t_type_ptr type;$/;"	m	struct:s_block	access:public
type	vpr_types.h	/^    t_type_ptr type;$/;"	m	struct:s_grid_tile	access:public
type_descriptors	main.c	/^struct s_type_descriptor *type_descriptors = NULL;$/;"	v	typeref:struct:s_type_descriptor
type_descriptors_backup	timing_place_lookup.c	/^static t_type_descriptor *type_descriptors_backup;$/;"	v	file:
type_timing_inf	vpr_types.h	/^    t_type_timing_inf type_timing_inf;$/;"	m	struct:s_type_descriptor	access:public
u	ezxml.c	/^    char *u;			\/* UTF-8 conversion of string if original was UTF-16 *\/$/;"	m	struct:ezxml_root	file:	access:public
u	net_delay.c	/^    u;$/;"	m	struct:s_rc_node	typeref:union:s_rc_node::__anon4	file:	access:public
u	route_common.h	/^    u;$/;"	m	struct:s_heap	typeref:union:s_heap::__anon1	access:public
u	route_tree_timing.h	/^    u;$/;"	m	struct:s_rt_node	typeref:union:s_rt_node::__anon10	access:public
unique_pin_list	place.c	/^static int **unique_pin_list;$/;"	v	file:
unmap_button	graphics.c	/^static void unmap_button(int bnum);$/;"	p	file:	signature:(int bnum)
unmap_button	graphics.c	/^unmap_button(int bnum)$/;"	f	file:	signature:(int bnum)
update_bb	place.c	/^static void update_bb(int inet,$/;"	p	file:	signature:(int inet, struct s_bb *bb_coord_new, struct s_bb *bb_edge_new, int xold, int yold, int xnew, int ynew)
update_bb	place.c	/^update_bb(int inet,$/;"	f	file:	signature:(int inet, struct s_bb *bb_coord_new, struct s_bb *bb_edge_new, int xold, int yold, int xnew, int ynew)
update_message	graphics.c	/^update_message(char *msg)$/;"	f	signature:(char *msg)
update_message	graphics.h	/^void update_message(char *msg);$/;"	p	signature:(char *msg)
update_net_delays_from_route_tree	route_tree_timing.c	/^update_net_delays_from_route_tree(float *net_delay,$/;"	f	signature:(float *net_delay, t_rt_node ** rt_node_of_sink, int inet)
update_net_delays_from_route_tree	route_tree_timing.h	/^void update_net_delays_from_route_tree(float *net_delay,$/;"	p	signature:(float *net_delay, t_rt_node ** rt_node_of_sink, int inet)
update_ps_transform	graphics.c	/^update_ps_transform(void)$/;"	f	file:	signature:(void)
update_region_occ	place.c	/^static void update_region_occ(int inet,$/;"	p	file:	signature:(int inet, struct s_bb *coords, int add_or_sub, int num_regions)
update_region_occ	place.c	/^update_region_occ(int inet,$/;"	f	file:	signature:(int inet, struct s_bb *coords, int add_or_sub, int num_regions)
update_rlim	place.c	/^static void update_rlim(float *rlim,$/;"	p	file:	signature:(float *rlim, float success_rat)
update_rlim	place.c	/^update_rlim(float *rlim,$/;"	f	file:	signature:(float *rlim, float success_rat)
update_route_tree	route_tree_timing.c	/^update_route_tree(struct s_heap * hptr)$/;"	f	signature:(struct s_heap * hptr)
update_route_tree	route_tree_timing.h	/^t_rt_node *update_route_tree(struct s_heap *hptr);$/;"	p	signature:(struct s_heap *hptr)
update_rr_base_costs	route_timing.c	/^static void update_rr_base_costs(int inet,$/;"	p	file:	signature:(int inet, float largest_criticality)
update_rr_base_costs	route_timing.c	/^update_rr_base_costs(int inet,$/;"	f	file:	signature:(int inet, float largest_criticality)
update_screen	draw.c	/^update_screen(int priority,$/;"	f	signature:(int priority, char *msg, enum pic_type pic_on_screen_val, boolean crit_path_button_enabled)
update_screen	draw.h	/^void update_screen(int priority,$/;"	p	signature:(int priority, char *msg, enum pic_type pic_on_screen_val, boolean crit_path_button_enabled)
update_t	place.c	/^static void update_t(float *t,$/;"	p	file:	signature:(float *t, float std_dev, float rlim, float success_rat, struct s_annealing_sched annealing_sched)
update_t	place.c	/^update_t(float *t,$/;"	f	file:	signature:(float *t, float std_dev, float rlim, float success_rat, struct s_annealing_sched annealing_sched)
update_td_cost	place.c	/^static void update_td_cost(int b_from,$/;"	p	file:	signature:(int b_from, int b_to, int num_of_pins)
update_td_cost	place.c	/^update_td_cost(int b_from,$/;"	f	file:	signature:(int b_from, int b_to, int num_of_pins)
update_traceback	route_common.c	/^update_traceback(struct s_heap *hptr,$/;"	f	signature:(struct s_heap *hptr, int inet)
update_traceback	route_common.h	/^struct s_trace *update_traceback(struct s_heap *hptr,$/;"	p	signature:(struct s_heap *hptr, int inet)
update_transform	graphics.c	/^update_transform(void)$/;"	f	file:	signature:(void)
update_unbuffered_ancestors_C_downstream	route_tree_timing.c	/^static t_rt_node *update_unbuffered_ancestors_C_downstream(t_rt_node$/;"	p	file:	signature:(t_rt_node * start_of_new_path_rt_node)
update_unbuffered_ancestors_C_downstream	route_tree_timing.c	/^update_unbuffered_ancestors_C_downstream(t_rt_node$/;"	f	file:	signature:(t_rt_node * start_of_new_path_rt_node)
update_win	graphics.c	/^update_win(int x[2],$/;"	f	file:	signature:(int x[2], int y[2], void (*drawscreen) (void))
usage	vpr_types.h	/^    int usage;$/;"	m	struct:s_grid_tile	access:public
verify_binary_search	vpr_types.h	/^	boolean verify_binary_search;$/;"	m	struct:s_router_opts	access:public
view_mux_size_distribution	rr_graph.c	/^static void view_mux_size_distribution(t_ivec *** rr_node_indices,$/;"	p	file:	signature:(t_ivec *** rr_node_indices, int nodes_per_chan, t_seg_details * seg_details_x, t_seg_details * seg_details_y)
view_mux_size_distribution	rr_graph.c	/^view_mux_size_distribution(t_ivec *** rr_node_indices,$/;"	f	file:	signature:(t_ivec *** rr_node_indices, int nodes_per_chan, t_seg_details * seg_details_x, t_seg_details * seg_details_y)
vpr_to_phy_track	rr_graph2.c	/^static int vpr_to_phy_track(IN int itrack,$/;"	p	file:	signature:(IN int itrack, IN int chan_num, IN int seg_num, IN t_seg_details * seg_details, IN enum e_directionality directionality)
vpr_to_phy_track	rr_graph2.c	/^vpr_to_phy_track(IN int itrack,$/;"	f	file:	signature:(IN int itrack, IN int chan_num, IN int seg_num, IN t_seg_details * seg_details, IN enum e_directionality directionality)
watch_edges	rr_graph.c	/^void watch_edges(int inode,$/;"	p	file:	signature:(int inode, t_linked_edge * edge_list_head)
watch_edges	rr_graph.c	/^watch_edges(int inode,$/;"	f	signature:(int inode, t_linked_edge * edge_list_head)
which_button	graphics.c	/^which_button(Window win)$/;"	f	file:	signature:(Window win)
width	graphics.c	/^    int width;$/;"	m	struct:__anon5	file:	access:public
width	vpr_types.h	/^    float width;$/;"	m	struct:s_chan	access:public
win	graphics.c	/^    Window win;$/;"	m	struct:__anon5	file:	access:public
wire_switch	vpr_types.h	/^    short wire_switch;$/;"	m	struct:s_seg_details	access:public
wire_switch	vpr_types.h	/^    short wire_switch;$/;"	m	struct:s_segment_inf	access:public
wire_to_ipin_switch	vpr_types.h	/^    short wire_to_ipin_switch;$/;"	m	struct:s_det_routing_arch	access:public
wirelength	place_and_route.h	/^    int wirelength;		\/* corresponding wirelength of successful routing at wneed *\/$/;"	m	struct:s_fmap_cell	access:public
wneed	place_and_route.h	/^    int wneed;			\/* need wneed to route *\/$/;"	m	struct:s_fmap_cell	access:public
write	ezxml.c	60;"	d	file:
x	graphics.h	/^    float x;$/;"	m	struct:__anon3	access:public
x	vpr_types.h	/^    int x;$/;"	m	struct:s_block	access:public
xcoord	graphics.c	/^xcoord(float worldx)$/;"	f	file:	signature:(float worldx)
xhigh	vpr_types.h	/^    short xhigh;$/;"	m	struct:s_rr_node	access:public
xleft	graphics.c	/^    int xleft;$/;"	m	struct:__anon5	file:	access:public
xleft	graphics.c	/^static float xleft, xright, ytop, ybot;	\/* world coordinates *\/$/;"	v	file:
xlow	vpr_types.h	/^    short xlow;$/;"	m	struct:s_rr_node	access:public
xmax	vpr_types.h	/^    int xmax;$/;"	m	struct:s_bb	access:public
xmin	vpr_types.h	/^    int xmin;$/;"	m	struct:s_bb	access:public
xml	ezxml.c	/^    struct ezxml xml;		\/* is a super-struct built on top of ezxml struct *\/$/;"	m	struct:ezxml_root	typeref:struct:ezxml_root::ezxml	file:	access:public
xmult	graphics.c	/^static float xmult, ymult;	\/* Transformation factors *\/$/;"	v	file:
xpeak	vpr_types.h	/^    float xpeak;$/;"	m	struct:s_chan	access:public
xright	graphics.c	/^static float xleft, xright, ytop, ybot;	\/* world coordinates *\/$/;"	v	file:
y	graphics.h	/^    float y;$/;"	m	struct:__anon3	access:public
y	vpr_types.h	/^    int y;$/;"	m	struct:s_block	access:public
ybot	graphics.c	/^static float xleft, xright, ytop, ybot;	\/* world coordinates *\/$/;"	v	file:
ycoord	graphics.c	/^ycoord(float worldy)$/;"	f	file:	signature:(float worldy)
yhigh	vpr_types.h	/^    short yhigh;$/;"	m	struct:s_rr_node	access:public
ylow	vpr_types.h	/^    short ylow;$/;"	m	struct:s_rr_node	access:public
ymax	vpr_types.h	/^    int ymax;$/;"	m	struct:s_bb	access:public
ymin	vpr_types.h	/^    int ymin;$/;"	m	struct:s_bb	access:public
ymult	graphics.c	/^static float xmult, ymult;	\/* Transformation factors *\/$/;"	v	file:
ytop	graphics.c	/^    int ytop;$/;"	m	struct:__anon5	file:	access:public
ytop	graphics.c	/^static float xleft, xright, ytop, ybot;	\/* world coordinates *\/$/;"	v	file:
z	vpr_types.h	/^    int z;$/;"	m	struct:s_block	access:public
zoom_fit	graphics.c	/^static void zoom_fit(void (*drawscreen) (void));$/;"	p	file:	signature:(void (*drawscreen) (void))
zoom_fit	graphics.c	/^zoom_fit(void (*drawscreen) (void))$/;"	f	file:	signature:(void (*drawscreen) (void))
zoom_in	graphics.c	/^static void zoom_in(void (*drawscreen) (void));$/;"	p	file:	signature:(void (*drawscreen) (void))
zoom_in	graphics.c	/^zoom_in(void (*drawscreen) (void))$/;"	f	file:	signature:(void (*drawscreen) (void))
zoom_out	graphics.c	/^static void zoom_out(void (*drawscreen) (void));$/;"	p	file:	signature:(void (*drawscreen) (void))
zoom_out	graphics.c	/^zoom_out(void (*drawscreen) (void))$/;"	f	file:	signature:(void (*drawscreen) (void))
